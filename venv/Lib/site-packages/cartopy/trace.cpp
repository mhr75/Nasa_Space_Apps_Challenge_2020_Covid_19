/* Generated by Cython 0.29.17 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "ACCEPT_USE_OF_DEPRECATED_PROJ_API_H",
                "1"
            ],
            [
                "CYTHON_TRACE_NOGIL",
                "1"
            ]
        ],
        "depends": [
            "/home/travis/miniconda/envs/test-environment/include/geos_c.h",
            "/home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/numpy/core/include/numpy/npy_math.h"
        ],
        "include_dirs": [
            "/home/travis/miniconda/envs/test-environment/include",
            "./lib/cartopy",
            "/home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/numpy/core/include",
            "/home/travis/miniconda/envs/test-environment/include"
        ],
        "language": "c++",
        "libraries": [
            "proj",
            "geos_c"
        ],
        "library_dirs": [
            "/home/travis/miniconda/envs/test-environment/lib",
            "/home/travis/miniconda/envs/test-environment/lib"
        ],
        "name": "cartopy.trace",
        "runtime_library_dirs": [
            "/home/travis/miniconda/envs/test-environment/lib"
        ],
        "sources": [
            "lib/cartopy/trace.pyx"
        ]
    },
    "module_name": "cartopy.trace"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_17"
#define CYTHON_HEX_VERSION 0x001D11F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__cartopy__trace
#define __PYX_HAVE_API__cartopy__trace
/* Early includes */
#include <math.h>
#include "numpy/npy_math.h"
#include <stdint.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <list>
#include <vector>
#include "geos_c.h"
#include "proj_api.h"
#include "geodesic.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "lib/cartopy/trace.pyx",
  "stringsource",
  "lib/cartopy/_crs.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_7cartopy_4_crs_CRS;
struct __pyx_obj_7cartopy_5trace_LineAccumulator;
struct __pyx_obj_7cartopy_5trace_Interpolator;
struct __pyx_obj_7cartopy_5trace_CartesianInterpolator;
struct __pyx_obj_7cartopy_5trace_SphericalInterpolator;
struct __pyx_t_7cartopy_5trace_Point;
typedef struct __pyx_t_7cartopy_5trace_Point __pyx_t_7cartopy_5trace_Point;

/* "cartopy/trace.pyx":281
 * 
 * 
 * cdef enum State:             # <<<<<<<<<<<<<<
 *     POINT_IN = 1,
 *     POINT_OUT,
 */
enum __pyx_t_7cartopy_5trace_State {
  __pyx_e_7cartopy_5trace_POINT_IN = 1,
  __pyx_e_7cartopy_5trace_POINT_OUT,
  __pyx_e_7cartopy_5trace_POINT_NAN
};

/* "cartopy/trace.pyx":91
 * 
 * 
 * ctypedef struct Point:             # <<<<<<<<<<<<<<
 *     double x
 *     double y
 */
struct __pyx_t_7cartopy_5trace_Point {
  double x;
  double y;
};

/* "cartopy/trace.pyx":95
 *     double y
 * 
 * ctypedef list[Point] Line             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef std::list<__pyx_t_7cartopy_5trace_Point>  __pyx_t_7cartopy_5trace_Line;

/* "cartopy/_crs.pxd":22
 * 
 * 
 * cdef class CRS:             # <<<<<<<<<<<<<<
 *     """
 *     Defines a Coordinate Reference System using proj.
 */
struct __pyx_obj_7cartopy_4_crs_CRS {
  PyObject_HEAD
  struct __pyx_vtabstruct_7cartopy_4_crs_CRS *__pyx_vtab;
  projPJ proj4;
  PyObject *proj4_init;
  PyObject *proj4_params;
};


/* "cartopy/trace.pyx":107
 * 
 * @cython.final
 * cdef class LineAccumulator:             # <<<<<<<<<<<<<<
 *     cdef list[Line] lines
 * 
 */
struct __pyx_obj_7cartopy_5trace_LineAccumulator {
  PyObject_HEAD
  struct __pyx_vtabstruct_7cartopy_5trace_LineAccumulator *__pyx_vtab;
  std::list<__pyx_t_7cartopy_5trace_Line>  lines;
};


/* "cartopy/trace.pyx":170
 * 
 * 
 * cdef class Interpolator:             # <<<<<<<<<<<<<<
 *     cdef Point start
 *     cdef Point end
 */
struct __pyx_obj_7cartopy_5trace_Interpolator {
  PyObject_HEAD
  struct __pyx_vtabstruct_7cartopy_5trace_Interpolator *__pyx_vtab;
  __pyx_t_7cartopy_5trace_Point start;
  __pyx_t_7cartopy_5trace_Point end;
  projPJ src_proj;
  projPJ dest_proj;
  double src_scale;
  double dest_scale;
};


/* "cartopy/trace.pyx":197
 * 
 * 
 * cdef class CartesianInterpolator(Interpolator):             # <<<<<<<<<<<<<<
 *     cdef Point interpolate(self, double t):
 *         cdef Point xy
 */
struct __pyx_obj_7cartopy_5trace_CartesianInterpolator {
  struct __pyx_obj_7cartopy_5trace_Interpolator __pyx_base;
};


/* "cartopy/trace.pyx":227
 * 
 * 
 * cdef class SphericalInterpolator(Interpolator):             # <<<<<<<<<<<<<<
 *     cdef geod_geodesic geod
 *     cdef geod_geodesicline geod_line
 */
struct __pyx_obj_7cartopy_5trace_SphericalInterpolator {
  struct __pyx_obj_7cartopy_5trace_Interpolator __pyx_base;
  struct geod_geodesic geod;
  struct geod_geodesicline geod_line;
  double a13;
};



/* "cartopy/_crs.pxd":22
 * 
 * 
 * cdef class CRS:             # <<<<<<<<<<<<<<
 *     """
 *     Defines a Coordinate Reference System using proj.
 */

struct __pyx_vtabstruct_7cartopy_4_crs_CRS {
  PyObject *(*is_geodetic)(struct __pyx_obj_7cartopy_4_crs_CRS *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7cartopy_4_crs_CRS *__pyx_vtabptr_7cartopy_4_crs_CRS;


/* "cartopy/trace.pyx":107
 * 
 * @cython.final
 * cdef class LineAccumulator:             # <<<<<<<<<<<<<<
 *     cdef list[Line] lines
 * 
 */

struct __pyx_vtabstruct_7cartopy_5trace_LineAccumulator {
  void (*new_line)(struct __pyx_obj_7cartopy_5trace_LineAccumulator *);
  void (*add_point)(struct __pyx_obj_7cartopy_5trace_LineAccumulator *, __pyx_t_7cartopy_5trace_Point const &);
  void (*add_point_if_empty)(struct __pyx_obj_7cartopy_5trace_LineAccumulator *, __pyx_t_7cartopy_5trace_Point const &);
  GEOSGeometry *(*as_geom)(struct __pyx_obj_7cartopy_5trace_LineAccumulator *, GEOSContextHandle_t);
  size_t (*size)(struct __pyx_obj_7cartopy_5trace_LineAccumulator *);
};
static struct __pyx_vtabstruct_7cartopy_5trace_LineAccumulator *__pyx_vtabptr_7cartopy_5trace_LineAccumulator;
static void __pyx_f_7cartopy_5trace_15LineAccumulator_new_line(struct __pyx_obj_7cartopy_5trace_LineAccumulator *);
static void __pyx_f_7cartopy_5trace_15LineAccumulator_add_point(struct __pyx_obj_7cartopy_5trace_LineAccumulator *, __pyx_t_7cartopy_5trace_Point const &);
static void __pyx_f_7cartopy_5trace_15LineAccumulator_add_point_if_empty(struct __pyx_obj_7cartopy_5trace_LineAccumulator *, __pyx_t_7cartopy_5trace_Point const &);
static GEOSGeometry *__pyx_f_7cartopy_5trace_15LineAccumulator_as_geom(struct __pyx_obj_7cartopy_5trace_LineAccumulator *, GEOSContextHandle_t);
static size_t __pyx_f_7cartopy_5trace_15LineAccumulator_size(struct __pyx_obj_7cartopy_5trace_LineAccumulator *);


/* "cartopy/trace.pyx":170
 * 
 * 
 * cdef class Interpolator:             # <<<<<<<<<<<<<<
 *     cdef Point start
 *     cdef Point end
 */

struct __pyx_vtabstruct_7cartopy_5trace_Interpolator {
  void (*init)(struct __pyx_obj_7cartopy_5trace_Interpolator *, projPJ, projPJ);
  void (*set_line)(struct __pyx_obj_7cartopy_5trace_Interpolator *, __pyx_t_7cartopy_5trace_Point const &, __pyx_t_7cartopy_5trace_Point const &);
  __pyx_t_7cartopy_5trace_Point (*interpolate)(struct __pyx_obj_7cartopy_5trace_Interpolator *, double);
  __pyx_t_7cartopy_5trace_Point (*project)(struct __pyx_obj_7cartopy_5trace_Interpolator *, __pyx_t_7cartopy_5trace_Point const &);
};
static struct __pyx_vtabstruct_7cartopy_5trace_Interpolator *__pyx_vtabptr_7cartopy_5trace_Interpolator;


/* "cartopy/trace.pyx":197
 * 
 * 
 * cdef class CartesianInterpolator(Interpolator):             # <<<<<<<<<<<<<<
 *     cdef Point interpolate(self, double t):
 *         cdef Point xy
 */

struct __pyx_vtabstruct_7cartopy_5trace_CartesianInterpolator {
  struct __pyx_vtabstruct_7cartopy_5trace_Interpolator __pyx_base;
};
static struct __pyx_vtabstruct_7cartopy_5trace_CartesianInterpolator *__pyx_vtabptr_7cartopy_5trace_CartesianInterpolator;


/* "cartopy/trace.pyx":227
 * 
 * 
 * cdef class SphericalInterpolator(Interpolator):             # <<<<<<<<<<<<<<
 *     cdef geod_geodesic geod
 *     cdef geod_geodesicline geod_line
 */

struct __pyx_vtabstruct_7cartopy_5trace_SphericalInterpolator {
  struct __pyx_vtabstruct_7cartopy_5trace_Interpolator __pyx_base;
};
static struct __pyx_vtabstruct_7cartopy_5trace_SphericalInterpolator *__pyx_vtabptr_7cartopy_5trace_SphericalInterpolator;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* Profile.proto */
#ifndef CYTHON_PROFILE
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
  #define CYTHON_PROFILE 0
#else
  #define CYTHON_PROFILE 1
#endif
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
  static PyCodeObject *__pyx_frame_code = NULL;\
  CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
  int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
  if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = __Pyx_PyThreadState_Current;\
          if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
                  (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (tstate->use_tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          tstate->tracing++;\
          tstate->use_tracing = 0;\
          PyObject *exc_info = __Pyx_GetExceptionTuple(tstate);\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          tstate->use_tracing = 1;\
          tstate->tracing--;\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      tstate->tracing++;
      tstate->use_tracing = 0;
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      tstate->use_tracing = 1;
      tstate->tracing--;
      __Pyx_ErrRestoreInState(tstate, type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (tstate->use_tracing) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (tstate->use_tracing) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (tstate->use_tracing) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, PyThreadState* tstate, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if ((1)); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_PyFrame_SetLineNumber(frame, lineno);
      tstate->tracing++;
      tstate->use_tracing = 0;
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      tstate->use_tracing = 1;
      tstate->tracing--;
      if (likely(!ret)) {
          __Pyx_ErrRestoreInState(tstate, type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if ((1)); else goto_error;
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

static PyObject* __pyx_convert__to_py___pyx_t_7cartopy_5trace_Point(__pyx_t_7cartopy_5trace_Point s);
/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static void __pyx_f_7cartopy_5trace_15LineAccumulator_new_line(struct __pyx_obj_7cartopy_5trace_LineAccumulator *__pyx_v_self); /* proto*/
static void __pyx_f_7cartopy_5trace_15LineAccumulator_add_point(struct __pyx_obj_7cartopy_5trace_LineAccumulator *__pyx_v_self, __pyx_t_7cartopy_5trace_Point const &__pyx_v_point); /* proto*/
static void __pyx_f_7cartopy_5trace_15LineAccumulator_add_point_if_empty(struct __pyx_obj_7cartopy_5trace_LineAccumulator *__pyx_v_self, __pyx_t_7cartopy_5trace_Point const &__pyx_v_point); /* proto*/
static GEOSGeometry *__pyx_f_7cartopy_5trace_15LineAccumulator_as_geom(struct __pyx_obj_7cartopy_5trace_LineAccumulator *__pyx_v_self, GEOSContextHandle_t __pyx_v_handle); /* proto*/
static size_t __pyx_f_7cartopy_5trace_15LineAccumulator_size(struct __pyx_obj_7cartopy_5trace_LineAccumulator *__pyx_v_self); /* proto*/
static void __pyx_f_7cartopy_5trace_12Interpolator_init(struct __pyx_obj_7cartopy_5trace_Interpolator *__pyx_v_self, projPJ __pyx_v_src_proj, projPJ __pyx_v_dest_proj); /* proto*/
static void __pyx_f_7cartopy_5trace_12Interpolator_set_line(struct __pyx_obj_7cartopy_5trace_Interpolator *__pyx_v_self, __pyx_t_7cartopy_5trace_Point const &__pyx_v_start, __pyx_t_7cartopy_5trace_Point const &__pyx_v_end); /* proto*/
static __pyx_t_7cartopy_5trace_Point __pyx_f_7cartopy_5trace_12Interpolator_interpolate(CYTHON_UNUSED struct __pyx_obj_7cartopy_5trace_Interpolator *__pyx_v_self, CYTHON_UNUSED double __pyx_v_t); /* proto*/
static __pyx_t_7cartopy_5trace_Point __pyx_f_7cartopy_5trace_12Interpolator_project(CYTHON_UNUSED struct __pyx_obj_7cartopy_5trace_Interpolator *__pyx_v_self, CYTHON_UNUSED __pyx_t_7cartopy_5trace_Point const &__pyx_v_point); /* proto*/
static __pyx_t_7cartopy_5trace_Point __pyx_f_7cartopy_5trace_21CartesianInterpolator_interpolate(struct __pyx_obj_7cartopy_5trace_CartesianInterpolator *__pyx_v_self, double __pyx_v_t); /* proto*/
static __pyx_t_7cartopy_5trace_Point __pyx_f_7cartopy_5trace_21CartesianInterpolator_project(struct __pyx_obj_7cartopy_5trace_CartesianInterpolator *__pyx_v_self, __pyx_t_7cartopy_5trace_Point const &__pyx_v_src_xy); /* proto*/
static void __pyx_f_7cartopy_5trace_21SphericalInterpolator_init(struct __pyx_obj_7cartopy_5trace_SphericalInterpolator *__pyx_v_self, projPJ __pyx_v_src_proj, projPJ __pyx_v_dest_proj); /* proto*/
static void __pyx_f_7cartopy_5trace_21SphericalInterpolator_set_line(struct __pyx_obj_7cartopy_5trace_SphericalInterpolator *__pyx_v_self, __pyx_t_7cartopy_5trace_Point const &__pyx_v_start, __pyx_t_7cartopy_5trace_Point const &__pyx_v_end); /* proto*/
static __pyx_t_7cartopy_5trace_Point __pyx_f_7cartopy_5trace_21SphericalInterpolator_interpolate(struct __pyx_obj_7cartopy_5trace_SphericalInterpolator *__pyx_v_self, double __pyx_v_t); /* proto*/
static __pyx_t_7cartopy_5trace_Point __pyx_f_7cartopy_5trace_21SphericalInterpolator_project(struct __pyx_obj_7cartopy_5trace_SphericalInterpolator *__pyx_v_self, __pyx_t_7cartopy_5trace_Point const &__pyx_v_lonlat); /* proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'numpy.math' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.list' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'cartopy._proj4' */

/* Module declarations from 'cartopy._crs' */
static PyTypeObject *__pyx_ptype_7cartopy_4_crs_CRS = 0;

/* Module declarations from 'cartopy.geodesic._geodesic' */

/* Module declarations from 'cartopy.trace' */
static PyTypeObject *__pyx_ptype_7cartopy_5trace_LineAccumulator = 0;
static PyTypeObject *__pyx_ptype_7cartopy_5trace_Interpolator = 0;
static PyTypeObject *__pyx_ptype_7cartopy_5trace_CartesianInterpolator = 0;
static PyTypeObject *__pyx_ptype_7cartopy_5trace_SphericalInterpolator = 0;
static bool __pyx_v_7cartopy_5trace_DEBUG;
static GEOSContextHandle_t __pyx_f_7cartopy_5trace_get_geos_context_handle(void); /*proto*/
static GEOSGeometry *__pyx_f_7cartopy_5trace_geos_from_shapely(PyObject *); /*proto*/
static PyObject *__pyx_f_7cartopy_5trace_shapely_from_geos(GEOSGeometry *); /*proto*/
static bool __pyx_f_7cartopy_5trace_degenerate_line(__pyx_t_7cartopy_5trace_Line const &); /*proto*/
static bool __pyx_f_7cartopy_5trace_close(double, double); /*proto*/
static enum __pyx_t_7cartopy_5trace_State __pyx_f_7cartopy_5trace_get_state(__pyx_t_7cartopy_5trace_Point const &, GEOSPreparedGeometry const *, GEOSContextHandle_t); /*proto*/
static bool __pyx_f_7cartopy_5trace_straightAndDomain(double, __pyx_t_7cartopy_5trace_Point const &, double, __pyx_t_7cartopy_5trace_Point const &, struct __pyx_obj_7cartopy_5trace_Interpolator *, double, GEOSContextHandle_t, GEOSPreparedGeometry const *, bool); /*proto*/
static void __pyx_f_7cartopy_5trace_bisect(double, __pyx_t_7cartopy_5trace_Point const &, __pyx_t_7cartopy_5trace_Point const &, GEOSContextHandle_t, GEOSPreparedGeometry const *, enum __pyx_t_7cartopy_5trace_State const &, struct __pyx_obj_7cartopy_5trace_Interpolator *, double, double &, __pyx_t_7cartopy_5trace_Point &, double &, __pyx_t_7cartopy_5trace_Point &); /*proto*/
static void __pyx_f_7cartopy_5trace__project_segment(GEOSContextHandle_t, GEOSCoordSequence const *, unsigned int, unsigned int, struct __pyx_obj_7cartopy_5trace_Interpolator *, GEOSPreparedGeometry const *, double, struct __pyx_obj_7cartopy_5trace_LineAccumulator *); /*proto*/
static PyObject *__pyx_f_7cartopy_5trace___pyx_unpickle_LineAccumulator__set_state(struct __pyx_obj_7cartopy_5trace_LineAccumulator *, PyObject *); /*proto*/
static PyObject *__pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Point(std::list<__pyx_t_7cartopy_5trace_Point>  const &); /*proto*/
static PyObject *__pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Line(std::list<__pyx_t_7cartopy_5trace_Line>  const &); /*proto*/
static __pyx_t_7cartopy_5trace_Point __pyx_convert__from_py___pyx_t_7cartopy_5trace_Point(PyObject *); /*proto*/
static std::list<__pyx_t_7cartopy_5trace_Point>  __pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Point(PyObject *); /*proto*/
static std::list<__pyx_t_7cartopy_5trace_Line>  __pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Line(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "cartopy.trace"
extern int __pyx_module_is_main_cartopy__trace;
int __pyx_module_is_main_cartopy__trace = 0;

/* Implementation of 'cartopy.trace' */
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_ValueError;
static const char __pyx_k_t[] = "t: ";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_IN[] = "IN";
static const char __pyx_k_to[] = "to";
static const char __pyx_k_NAN[] = "NAN";
static const char __pyx_k_OUT[] = "OUT";
static const char __pyx_k__15[] = "   ";
static const char __pyx_k__16[] = ", ";
static const char __pyx_k__17[] = " (";
static const char __pyx_k__18[] = ")";
static const char __pyx_k__19[] = "   => ";
static const char __pyx_k__20[] = "   => (";
static const char __pyx_k__25[] = "";
static const char __pyx_k__31[] = "*";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_geom[] = "_geom";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_proj[] = "proj";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_to_2[] = ") to (";
static const char __pyx_k_lgeos[] = "lgeos";
static const char __pyx_k_lines[] = "lines";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_sgeom[] = "sgeom";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_valid[] = "   => valid: ";
static const char __pyx_k_dict_2[] = "_dict";
static const char __pyx_k_domain[] = "domain";
static const char __pyx_k_handle[] = "handle";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_latlon[] = "latlon";
static const char __pyx_k_lonlat[] = "lonlat";
static const char __pyx_k_o_proj[] = "o_proj";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_latlong[] = "latlong";
static const char __pyx_k_longlat[] = "longlat";
static const char __pyx_k_ob_tran[] = "ob_tran";
static const char __pyx_k_src_crs[] = "src_crs";
static const char __pyx_k_src_idx[] = "src_idx";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_g_domain[] = "g_domain";
static const char __pyx_k_g_linear[] = "g_linear";
static const char __pyx_k_geometry[] = "geometry";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_src_size[] = "src_size";
static const char __pyx_k_to_meter[] = "to_meter";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_gp_domain[] = "gp_domain";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_threshold[] = "threshold";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_src_coords[] = "src_coords";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_geos_handle[] = "geos_handle";
static const char __pyx_k_Interpolator[] = "Interpolator";
static const char __pyx_k_Projected_as[] = "Projected as:";
static const char __pyx_k_Setting_line[] = "Setting line:";
static const char __pyx_k_cartopy__crs[] = "cartopy._crs";
static const char __pyx_k_geom_factory[] = "geom_factory";
static const char __pyx_k_interpolator[] = "interpolator";
static const char __pyx_k_proj4_params[] = "proj4_params";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_shapely_geos[] = "shapely.geos";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_use_setstate[] = "use_setstate";
static const char __pyx_k_PROJ4_VERSION[] = "PROJ4_VERSION";
static const char __pyx_k_cartopy_trace[] = "cartopy.trace";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_Bisecting_from[] = "Bisecting from: ";
static const char __pyx_k_project_linear[] = "project_linear";
static const char __pyx_k_LineAccumulator[] = "LineAccumulator";
static const char __pyx_k_dest_projection[] = "dest_projection";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_shapely_geometry[] = "shapely.geometry";
static const char __pyx_k_multi_line_string[] = "multi_line_string";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_g_multi_line_string[] = "g_multi_line_string";
static const char __pyx_k_CartesianInterpolator[] = "CartesianInterpolator";
static const char __pyx_k_SphericalInterpolator[] = "SphericalInterpolator";
static const char __pyx_k_lib_cartopy_trace_pyx[] = "lib/cartopy/trace.pyx";
static const char __pyx_k_pj_transform_failed_d_s[] = "pj_transform failed: %d\n%s";
static const char __pyx_k_Interpolator___reduce_cython[] = "Interpolator.__reduce_cython__";
static const char __pyx_k_pyx_unpickle_LineAccumulator[] = "__pyx_unpickle_LineAccumulator";
static const char __pyx_k_Interpolator___setstate_cython[] = "Interpolator.__setstate_cython__";
static const char __pyx_k_LineAccumulator___reduce_cython[] = "LineAccumulator.__reduce_cython__";
static const char __pyx_k_This_module_pulls_together_proj[] = "\nThis module pulls together proj, GEOS and ``_crs.pyx`` to implement a function\nto project a `~shapely.geometry.LinearRing` / `~shapely.geometry.LineString`.\nIn general, this should never be called manually, instead leaving the\nprocessing to be done by the :class:`cartopy.crs.Projection` subclasses.\n";
static const char __pyx_k_CartesianInterpolator___reduce_c[] = "CartesianInterpolator.__reduce_cython__";
static const char __pyx_k_CartesianInterpolator___setstate[] = "CartesianInterpolator.__setstate_cython__";
static const char __pyx_k_Incompatible_checksums_s_vs_0x98[] = "Incompatible checksums (%s vs 0x980da98 = (lines))";
static const char __pyx_k_LineAccumulator___setstate_cytho[] = "LineAccumulator.__setstate_cython__";
static const char __pyx_k_No_value_specified_for_struct_at[] = "No value specified for struct attribute 'x'";
static const char __pyx_k_SphericalInterpolator___reduce_c[] = "SphericalInterpolator.__reduce_cython__";
static const char __pyx_k_SphericalInterpolator___setstate[] = "SphericalInterpolator.__setstate_cython__";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_No_value_specified_for_struct_at_2[] = "No value specified for struct attribute 'y'";
static PyObject *__pyx_kp_s_Bisecting_from;
static PyObject *__pyx_n_s_CartesianInterpolator;
static PyObject *__pyx_n_s_CartesianInterpolator___reduce_c;
static PyObject *__pyx_n_s_CartesianInterpolator___setstate;
static PyObject *__pyx_n_s_IN;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x98;
static PyObject *__pyx_n_s_Interpolator;
static PyObject *__pyx_n_s_Interpolator___reduce_cython;
static PyObject *__pyx_n_s_Interpolator___setstate_cython;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_s_LineAccumulator;
static PyObject *__pyx_n_s_LineAccumulator___reduce_cython;
static PyObject *__pyx_n_s_LineAccumulator___setstate_cytho;
static PyObject *__pyx_n_s_NAN;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_2;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_s_OUT;
static PyObject *__pyx_n_s_PROJ4_VERSION;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_kp_s_Projected_as;
static PyObject *__pyx_kp_s_Setting_line;
static PyObject *__pyx_n_s_SphericalInterpolator;
static PyObject *__pyx_n_s_SphericalInterpolator___reduce_c;
static PyObject *__pyx_n_s_SphericalInterpolator___setstate;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s__15;
static PyObject *__pyx_kp_s__16;
static PyObject *__pyx_kp_s__17;
static PyObject *__pyx_kp_s__18;
static PyObject *__pyx_kp_s__19;
static PyObject *__pyx_kp_s__20;
static PyObject *__pyx_kp_s__25;
static PyObject *__pyx_n_s__31;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_cartopy__crs;
static PyObject *__pyx_n_s_cartopy_trace;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_dest_projection;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_dict_2;
static PyObject *__pyx_n_s_domain;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_g_domain;
static PyObject *__pyx_n_s_g_linear;
static PyObject *__pyx_n_s_g_multi_line_string;
static PyObject *__pyx_n_s_geom;
static PyObject *__pyx_n_s_geom_factory;
static PyObject *__pyx_n_s_geometry;
static PyObject *__pyx_n_s_geos_handle;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_gp_domain;
static PyObject *__pyx_n_s_handle;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_interpolator;
static PyObject *__pyx_n_s_latlon;
static PyObject *__pyx_n_s_latlong;
static PyObject *__pyx_n_s_lgeos;
static PyObject *__pyx_kp_s_lib_cartopy_trace_pyx;
static PyObject *__pyx_n_s_lines;
static PyObject *__pyx_n_s_longlat;
static PyObject *__pyx_n_s_lonlat;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_multi_line_string;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_o_proj;
static PyObject *__pyx_n_s_ob_tran;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_kp_s_pj_transform_failed_d_s;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_proj;
static PyObject *__pyx_n_s_proj4_params;
static PyObject *__pyx_n_s_project_linear;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_LineAccumulator;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_sgeom;
static PyObject *__pyx_n_s_shapely_geometry;
static PyObject *__pyx_n_s_shapely_geos;
static PyObject *__pyx_n_s_src_coords;
static PyObject *__pyx_n_s_src_crs;
static PyObject *__pyx_n_s_src_idx;
static PyObject *__pyx_n_s_src_size;
static PyObject *__pyx_n_s_state;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_kp_s_t;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_threshold;
static PyObject *__pyx_n_s_to;
static PyObject *__pyx_kp_s_to_2;
static PyObject *__pyx_n_s_to_meter;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_use_setstate;
static PyObject *__pyx_kp_s_valid;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_y;
static int __pyx_pf_7cartopy_5trace_15LineAccumulator___init__(struct __pyx_obj_7cartopy_5trace_LineAccumulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cartopy_5trace_15LineAccumulator_2__reduce_cython__(struct __pyx_obj_7cartopy_5trace_LineAccumulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cartopy_5trace_15LineAccumulator_4__setstate_cython__(struct __pyx_obj_7cartopy_5trace_LineAccumulator *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7cartopy_5trace_12Interpolator___cinit__(struct __pyx_obj_7cartopy_5trace_Interpolator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cartopy_5trace_12Interpolator_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cartopy_5trace_Interpolator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cartopy_5trace_12Interpolator_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cartopy_5trace_Interpolator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7cartopy_5trace_21CartesianInterpolator___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cartopy_5trace_CartesianInterpolator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cartopy_5trace_21CartesianInterpolator_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cartopy_5trace_CartesianInterpolator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7cartopy_5trace_21SphericalInterpolator___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cartopy_5trace_SphericalInterpolator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cartopy_5trace_21SphericalInterpolator_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cartopy_5trace_SphericalInterpolator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7cartopy_5trace_project_linear(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_geometry, struct __pyx_obj_7cartopy_4_crs_CRS *__pyx_v_src_crs, PyObject *__pyx_v_dest_projection); /* proto */
static PyObject *__pyx_pf_7cartopy_5trace_2__pyx_unpickle_LineAccumulator(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_7cartopy_5trace_LineAccumulator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7cartopy_5trace_Interpolator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7cartopy_5trace_CartesianInterpolator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7cartopy_5trace_SphericalInterpolator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_159439512;
static PyObject *__pyx_codeobj_;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_codeobj__2;
static PyObject *__pyx_codeobj__3;
static PyObject *__pyx_codeobj__5;
static PyObject *__pyx_codeobj__7;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_codeobj__11;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__21;
static PyObject *__pyx_codeobj__28;
/* Late includes */

/* "cartopy/trace.pyx":75
 * 
 * 
 * cdef GEOSContextHandle_t get_geos_context_handle():             # <<<<<<<<<<<<<<
 *     cdef ptr handle = lgeos.geos_handle
 *     return <GEOSContextHandle_t>handle
 */

static GEOSContextHandle_t __pyx_f_7cartopy_5trace_get_geos_context_handle(void) {
  uintptr_t __pyx_v_handle;
  GEOSContextHandle_t __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  uintptr_t __pyx_t_3;
  __Pyx_RefNannySetupContext("get_geos_context_handle", 0);
  __Pyx_TraceCall("get_geos_context_handle", __pyx_f[0], 75, 0, __PYX_ERR(0, 75, __pyx_L1_error));

  /* "cartopy/trace.pyx":76
 * 
 * cdef GEOSContextHandle_t get_geos_context_handle():
 *     cdef ptr handle = lgeos.geos_handle             # <<<<<<<<<<<<<<
 *     return <GEOSContextHandle_t>handle
 * 
 */
  __Pyx_TraceLine(76,0,__PYX_ERR(0, 76, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_lgeos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_geos_handle); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_3 == ((uintptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_handle = __pyx_t_3;

  /* "cartopy/trace.pyx":77
 * cdef GEOSContextHandle_t get_geos_context_handle():
 *     cdef ptr handle = lgeos.geos_handle
 *     return <GEOSContextHandle_t>handle             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(77,0,__PYX_ERR(0, 77, __pyx_L1_error))
  __pyx_r = ((GEOSContextHandle_t)__pyx_v_handle);
  goto __pyx_L0;

  /* "cartopy/trace.pyx":75
 * 
 * 
 * cdef GEOSContextHandle_t get_geos_context_handle():             # <<<<<<<<<<<<<<
 *     cdef ptr handle = lgeos.geos_handle
 *     return <GEOSContextHandle_t>handle
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("cartopy.trace.get_geos_context_handle", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cartopy/trace.pyx":80
 * 
 * 
 * cdef GEOSGeometry *geos_from_shapely(shapely_geom) except *:             # <<<<<<<<<<<<<<
 *     """Get the GEOS pointer from the given shapely geometry."""
 *     cdef ptr geos_geom = shapely_geom._geom
 */

static GEOSGeometry *__pyx_f_7cartopy_5trace_geos_from_shapely(PyObject *__pyx_v_shapely_geom) {
  uintptr_t __pyx_v_geos_geom;
  GEOSGeometry *__pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  uintptr_t __pyx_t_2;
  __Pyx_RefNannySetupContext("geos_from_shapely", 0);
  __Pyx_TraceCall("geos_from_shapely", __pyx_f[0], 80, 0, __PYX_ERR(0, 80, __pyx_L1_error));

  /* "cartopy/trace.pyx":82
 * cdef GEOSGeometry *geos_from_shapely(shapely_geom) except *:
 *     """Get the GEOS pointer from the given shapely geometry."""
 *     cdef ptr geos_geom = shapely_geom._geom             # <<<<<<<<<<<<<<
 *     return <GEOSGeometry *>geos_geom
 * 
 */
  __Pyx_TraceLine(82,0,__PYX_ERR(0, 82, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_shapely_geom, __pyx_n_s_geom); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uintptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_geos_geom = __pyx_t_2;

  /* "cartopy/trace.pyx":83
 *     """Get the GEOS pointer from the given shapely geometry."""
 *     cdef ptr geos_geom = shapely_geom._geom
 *     return <GEOSGeometry *>geos_geom             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(83,0,__PYX_ERR(0, 83, __pyx_L1_error))
  __pyx_r = ((GEOSGeometry *)__pyx_v_geos_geom);
  goto __pyx_L0;

  /* "cartopy/trace.pyx":80
 * 
 * 
 * cdef GEOSGeometry *geos_from_shapely(shapely_geom) except *:             # <<<<<<<<<<<<<<
 *     """Get the GEOS pointer from the given shapely geometry."""
 *     cdef ptr geos_geom = shapely_geom._geom
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cartopy.trace.geos_from_shapely", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cartopy/trace.pyx":86
 * 
 * 
 * cdef shapely_from_geos(GEOSGeometry *geom):             # <<<<<<<<<<<<<<
 *     """Turn the given GEOS geometry pointer into a shapely geometry."""
 *     return sgeom.base.geom_factory(<ptr>geom)
 */

static PyObject *__pyx_f_7cartopy_5trace_shapely_from_geos(GEOSGeometry *__pyx_v_geom) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("shapely_from_geos", 0);
  __Pyx_TraceCall("shapely_from_geos", __pyx_f[0], 86, 0, __PYX_ERR(0, 86, __pyx_L1_error));

  /* "cartopy/trace.pyx":88
 * cdef shapely_from_geos(GEOSGeometry *geom):
 *     """Turn the given GEOS geometry pointer into a shapely geometry."""
 *     return sgeom.base.geom_factory(<ptr>geom)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(88,0,__PYX_ERR(0, 88, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_sgeom); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_base); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_geom_factory); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(((uintptr_t)__pyx_v_geom)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cartopy/trace.pyx":86
 * 
 * 
 * cdef shapely_from_geos(GEOSGeometry *geom):             # <<<<<<<<<<<<<<
 *     """Turn the given GEOS geometry pointer into a shapely geometry."""
 *     return sgeom.base.geom_factory(<ptr>geom)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cartopy.trace.shapely_from_geos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cartopy/trace.pyx":98
 * 
 * 
 * cdef bool degenerate_line(const Line &value):             # <<<<<<<<<<<<<<
 *     return value.size() < 2
 * 
 */

static bool __pyx_f_7cartopy_5trace_degenerate_line(__pyx_t_7cartopy_5trace_Line const &__pyx_v_value) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("degenerate_line", 0);
  __Pyx_TraceCall("degenerate_line", __pyx_f[0], 98, 0, __PYX_ERR(0, 98, __pyx_L1_error));

  /* "cartopy/trace.pyx":99
 * 
 * cdef bool degenerate_line(const Line &value):
 *     return value.size() < 2             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(99,0,__PYX_ERR(0, 99, __pyx_L1_error))
  __pyx_r = (__pyx_v_value.size() < 2);
  goto __pyx_L0;

  /* "cartopy/trace.pyx":98
 * 
 * 
 * cdef bool degenerate_line(const Line &value):             # <<<<<<<<<<<<<<
 *     return value.size() < 2
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cartopy.trace.degenerate_line", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cartopy/trace.pyx":102
 * 
 * 
 * cdef bool close(double a, double b):             # <<<<<<<<<<<<<<
 *     return abs(a - b) <= (1e-8 + 1e-5 * abs(b))
 * 
 */

static bool __pyx_f_7cartopy_5trace_close(double __pyx_v_a, double __pyx_v_b) {
  bool __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close", 0);
  __Pyx_TraceCall("close", __pyx_f[0], 102, 0, __PYX_ERR(0, 102, __pyx_L1_error));

  /* "cartopy/trace.pyx":103
 * 
 * cdef bool close(double a, double b):
 *     return abs(a - b) <= (1e-8 + 1e-5 * abs(b))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(103,0,__PYX_ERR(0, 103, __pyx_L1_error))
  __pyx_r = (fabs((__pyx_v_a - __pyx_v_b)) <= (1e-8 + (1e-5 * fabs(__pyx_v_b))));
  goto __pyx_L0;

  /* "cartopy/trace.pyx":102
 * 
 * 
 * cdef bool close(double a, double b):             # <<<<<<<<<<<<<<
 *     return abs(a - b) <= (1e-8 + 1e-5 * abs(b))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cartopy.trace.close", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cartopy/trace.pyx":110
 *     cdef list[Line] lines
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.new_line()
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cartopy_5trace_15LineAccumulator_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cartopy_5trace_15LineAccumulator_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_7cartopy_5trace_15LineAccumulator___init__(((struct __pyx_obj_7cartopy_5trace_LineAccumulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cartopy_5trace_15LineAccumulator___init__(struct __pyx_obj_7cartopy_5trace_LineAccumulator *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 110, 0, __PYX_ERR(0, 110, __pyx_L1_error));

  /* "cartopy/trace.pyx":111
 * 
 *     def __init__(self):
 *         self.new_line()             # <<<<<<<<<<<<<<
 * 
 *     cdef void new_line(self):
 */
  __Pyx_TraceLine(111,0,__PYX_ERR(0, 111, __pyx_L1_error))
  __pyx_f_7cartopy_5trace_15LineAccumulator_new_line(__pyx_v_self);

  /* "cartopy/trace.pyx":110
 *     cdef list[Line] lines
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.new_line()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cartopy.trace.LineAccumulator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cartopy/trace.pyx":113
 *         self.new_line()
 * 
 *     cdef void new_line(self):             # <<<<<<<<<<<<<<
 *         cdef Line line
 *         self.lines.push_back(line)
 */

static void __pyx_f_7cartopy_5trace_15LineAccumulator_new_line(struct __pyx_obj_7cartopy_5trace_LineAccumulator *__pyx_v_self) {
  __pyx_t_7cartopy_5trace_Line __pyx_v_line;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_line", 0);
  __Pyx_TraceCall("new_line", __pyx_f[0], 113, 0, __PYX_ERR(0, 113, __pyx_L1_error));

  /* "cartopy/trace.pyx":115
 *     cdef void new_line(self):
 *         cdef Line line
 *         self.lines.push_back(line)             # <<<<<<<<<<<<<<
 * 
 *     cdef void add_point(self, const Point &point):
 */
  __Pyx_TraceLine(115,0,__PYX_ERR(0, 115, __pyx_L1_error))
  __pyx_v_self->lines.push_back(__pyx_v_line);

  /* "cartopy/trace.pyx":113
 *         self.new_line()
 * 
 *     cdef void new_line(self):             # <<<<<<<<<<<<<<
 *         cdef Line line
 *         self.lines.push_back(line)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cartopy.trace.LineAccumulator.new_line", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "cartopy/trace.pyx":117
 *         self.lines.push_back(line)
 * 
 *     cdef void add_point(self, const Point &point):             # <<<<<<<<<<<<<<
 *         self.lines.back().push_back(point)
 * 
 */

static void __pyx_f_7cartopy_5trace_15LineAccumulator_add_point(struct __pyx_obj_7cartopy_5trace_LineAccumulator *__pyx_v_self, __pyx_t_7cartopy_5trace_Point const &__pyx_v_point) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_point", 0);
  __Pyx_TraceCall("add_point", __pyx_f[0], 117, 0, __PYX_ERR(0, 117, __pyx_L1_error));

  /* "cartopy/trace.pyx":118
 * 
 *     cdef void add_point(self, const Point &point):
 *         self.lines.back().push_back(point)             # <<<<<<<<<<<<<<
 * 
 *     cdef void add_point_if_empty(self, const Point &point):
 */
  __Pyx_TraceLine(118,0,__PYX_ERR(0, 118, __pyx_L1_error))
  __pyx_v_self->lines.back().push_back(__pyx_v_point);

  /* "cartopy/trace.pyx":117
 *         self.lines.push_back(line)
 * 
 *     cdef void add_point(self, const Point &point):             # <<<<<<<<<<<<<<
 *         self.lines.back().push_back(point)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cartopy.trace.LineAccumulator.add_point", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "cartopy/trace.pyx":120
 *         self.lines.back().push_back(point)
 * 
 *     cdef void add_point_if_empty(self, const Point &point):             # <<<<<<<<<<<<<<
 *         if self.lines.back().empty():
 *             self.add_point(point)
 */

static void __pyx_f_7cartopy_5trace_15LineAccumulator_add_point_if_empty(struct __pyx_obj_7cartopy_5trace_LineAccumulator *__pyx_v_self, __pyx_t_7cartopy_5trace_Point const &__pyx_v_point) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("add_point_if_empty", 0);
  __Pyx_TraceCall("add_point_if_empty", __pyx_f[0], 120, 0, __PYX_ERR(0, 120, __pyx_L1_error));

  /* "cartopy/trace.pyx":121
 * 
 *     cdef void add_point_if_empty(self, const Point &point):
 *         if self.lines.back().empty():             # <<<<<<<<<<<<<<
 *             self.add_point(point)
 * 
 */
  __Pyx_TraceLine(121,0,__PYX_ERR(0, 121, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_self->lines.back().empty() != 0);
  if (__pyx_t_1) {

    /* "cartopy/trace.pyx":122
 *     cdef void add_point_if_empty(self, const Point &point):
 *         if self.lines.back().empty():
 *             self.add_point(point)             # <<<<<<<<<<<<<<
 * 
 *     cdef GEOSGeometry *as_geom(self, GEOSContextHandle_t handle):
 */
    __Pyx_TraceLine(122,0,__PYX_ERR(0, 122, __pyx_L1_error))
    __pyx_f_7cartopy_5trace_15LineAccumulator_add_point(__pyx_v_self, __pyx_v_point);

    /* "cartopy/trace.pyx":121
 * 
 *     cdef void add_point_if_empty(self, const Point &point):
 *         if self.lines.back().empty():             # <<<<<<<<<<<<<<
 *             self.add_point(point)
 * 
 */
  }

  /* "cartopy/trace.pyx":120
 *         self.lines.back().push_back(point)
 * 
 *     cdef void add_point_if_empty(self, const Point &point):             # <<<<<<<<<<<<<<
 *         if self.lines.back().empty():
 *             self.add_point(point)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cartopy.trace.LineAccumulator.add_point_if_empty", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "cartopy/trace.pyx":124
 *             self.add_point(point)
 * 
 *     cdef GEOSGeometry *as_geom(self, GEOSContextHandle_t handle):             # <<<<<<<<<<<<<<
 *         from cython.operator cimport dereference, preincrement
 *         # self.lines.remove_if(degenerate_line) is not available in Cython.
 */

static GEOSGeometry *__pyx_f_7cartopy_5trace_15LineAccumulator_as_geom(struct __pyx_obj_7cartopy_5trace_LineAccumulator *__pyx_v_self, GEOSContextHandle_t __pyx_v_handle) {
  std::list<__pyx_t_7cartopy_5trace_Line> ::iterator __pyx_v_it;
  __pyx_t_7cartopy_5trace_Point __pyx_v_first;
  __pyx_t_7cartopy_5trace_Point __pyx_v_last;
  __pyx_t_7cartopy_5trace_Line __pyx_v_ilines;
  __pyx_t_7cartopy_5trace_Point __pyx_v_ipoints;
  std::vector<GEOSGeometry *>  __pyx_v_geoms;
  int __pyx_v_i;
  GEOSCoordSequence *__pyx_v_coords;
  GEOSGeometry *__pyx_v_geom;
  GEOSGeometry *__pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::list<__pyx_t_7cartopy_5trace_Line> ::iterator __pyx_t_3;
  std::list<__pyx_t_7cartopy_5trace_Line>  *__pyx_t_4;
  __pyx_t_7cartopy_5trace_Line __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  __pyx_t_7cartopy_5trace_Point __pyx_t_11;
  __Pyx_RefNannySetupContext("as_geom", 0);
  __Pyx_TraceCall("as_geom", __pyx_f[0], 124, 0, __PYX_ERR(0, 124, __pyx_L1_error));

  /* "cartopy/trace.pyx":127
 *         from cython.operator cimport dereference, preincrement
 *         # self.lines.remove_if(degenerate_line) is not available in Cython.
 *         cdef list[Line].iterator it = self.lines.begin()             # <<<<<<<<<<<<<<
 *         while it != self.lines.end():
 *             if degenerate_line(dereference(it)):
 */
  __Pyx_TraceLine(127,0,__PYX_ERR(0, 127, __pyx_L1_error))
  __pyx_v_it = __pyx_v_self->lines.begin();

  /* "cartopy/trace.pyx":128
 *         # self.lines.remove_if(degenerate_line) is not available in Cython.
 *         cdef list[Line].iterator it = self.lines.begin()
 *         while it != self.lines.end():             # <<<<<<<<<<<<<<
 *             if degenerate_line(dereference(it)):
 *                 it = self.lines.erase(it)
 */
  __Pyx_TraceLine(128,0,__PYX_ERR(0, 128, __pyx_L1_error))
  while (1) {
    __pyx_t_1 = ((__pyx_v_it != __pyx_v_self->lines.end()) != 0);
    if (!__pyx_t_1) break;

    /* "cartopy/trace.pyx":129
 *         cdef list[Line].iterator it = self.lines.begin()
 *         while it != self.lines.end():
 *             if degenerate_line(dereference(it)):             # <<<<<<<<<<<<<<
 *                 it = self.lines.erase(it)
 *             else:
 */
    __Pyx_TraceLine(129,0,__PYX_ERR(0, 129, __pyx_L1_error))
    __pyx_t_1 = (__pyx_f_7cartopy_5trace_degenerate_line((*__pyx_v_it)) != 0);
    if (__pyx_t_1) {

      /* "cartopy/trace.pyx":130
 *         while it != self.lines.end():
 *             if degenerate_line(dereference(it)):
 *                 it = self.lines.erase(it)             # <<<<<<<<<<<<<<
 *             else:
 *                 preincrement(it)
 */
      __Pyx_TraceLine(130,0,__PYX_ERR(0, 130, __pyx_L1_error))
      __pyx_v_it = __pyx_v_self->lines.erase(__pyx_v_it);

      /* "cartopy/trace.pyx":129
 *         cdef list[Line].iterator it = self.lines.begin()
 *         while it != self.lines.end():
 *             if degenerate_line(dereference(it)):             # <<<<<<<<<<<<<<
 *                 it = self.lines.erase(it)
 *             else:
 */
      goto __pyx_L5;
    }

    /* "cartopy/trace.pyx":132
 *                 it = self.lines.erase(it)
 *             else:
 *                 preincrement(it)             # <<<<<<<<<<<<<<
 * 
 *         cdef Point first, last
 */
    __Pyx_TraceLine(132,0,__PYX_ERR(0, 132, __pyx_L1_error))
    /*else*/ {
      (void)((++__pyx_v_it));
    }
    __pyx_L5:;
  }

  /* "cartopy/trace.pyx":135
 * 
 *         cdef Point first, last
 *         if self.lines.size() > 1:             # <<<<<<<<<<<<<<
 *             first = self.lines.front().front()
 *             last = self.lines.back().back()
 */
  __Pyx_TraceLine(135,0,__PYX_ERR(0, 135, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v_self->lines.size() > 1) != 0);
  if (__pyx_t_1) {

    /* "cartopy/trace.pyx":136
 *         cdef Point first, last
 *         if self.lines.size() > 1:
 *             first = self.lines.front().front()             # <<<<<<<<<<<<<<
 *             last = self.lines.back().back()
 *             if close(first.x, last.x) and close(first.y, last.y):
 */
    __Pyx_TraceLine(136,0,__PYX_ERR(0, 136, __pyx_L1_error))
    __pyx_v_first = __pyx_v_self->lines.front().front();

    /* "cartopy/trace.pyx":137
 *         if self.lines.size() > 1:
 *             first = self.lines.front().front()
 *             last = self.lines.back().back()             # <<<<<<<<<<<<<<
 *             if close(first.x, last.x) and close(first.y, last.y):
 *                 self.lines.front().pop_front()
 */
    __Pyx_TraceLine(137,0,__PYX_ERR(0, 137, __pyx_L1_error))
    __pyx_v_last = __pyx_v_self->lines.back().back();

    /* "cartopy/trace.pyx":138
 *             first = self.lines.front().front()
 *             last = self.lines.back().back()
 *             if close(first.x, last.x) and close(first.y, last.y):             # <<<<<<<<<<<<<<
 *                 self.lines.front().pop_front()
 *                 self.lines.back().splice(self.lines.back().end(),
 */
    __Pyx_TraceLine(138,0,__PYX_ERR(0, 138, __pyx_L1_error))
    __pyx_t_2 = (__pyx_f_7cartopy_5trace_close(__pyx_v_first.x, __pyx_v_last.x) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_2 = (__pyx_f_7cartopy_5trace_close(__pyx_v_first.y, __pyx_v_last.y) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_1) {

      /* "cartopy/trace.pyx":139
 *             last = self.lines.back().back()
 *             if close(first.x, last.x) and close(first.y, last.y):
 *                 self.lines.front().pop_front()             # <<<<<<<<<<<<<<
 *                 self.lines.back().splice(self.lines.back().end(),
 *                                          self.lines.front())
 */
      __Pyx_TraceLine(139,0,__PYX_ERR(0, 139, __pyx_L1_error))
      __pyx_v_self->lines.front().pop_front();

      /* "cartopy/trace.pyx":140
 *             if close(first.x, last.x) and close(first.y, last.y):
 *                 self.lines.front().pop_front()
 *                 self.lines.back().splice(self.lines.back().end(),             # <<<<<<<<<<<<<<
 *                                          self.lines.front())
 *                 self.lines.pop_front()
 */
      __Pyx_TraceLine(140,0,__PYX_ERR(0, 140, __pyx_L1_error))
      __pyx_v_self->lines.back().splice(__pyx_v_self->lines.back().end(), __pyx_v_self->lines.front());

      /* "cartopy/trace.pyx":142
 *                 self.lines.back().splice(self.lines.back().end(),
 *                                          self.lines.front())
 *                 self.lines.pop_front()             # <<<<<<<<<<<<<<
 * 
 *         cdef Line ilines
 */
      __Pyx_TraceLine(142,0,__PYX_ERR(0, 142, __pyx_L1_error))
      __pyx_v_self->lines.pop_front();

      /* "cartopy/trace.pyx":138
 *             first = self.lines.front().front()
 *             last = self.lines.back().back()
 *             if close(first.x, last.x) and close(first.y, last.y):             # <<<<<<<<<<<<<<
 *                 self.lines.front().pop_front()
 *                 self.lines.back().splice(self.lines.back().end(),
 */
    }

    /* "cartopy/trace.pyx":135
 * 
 *         cdef Point first, last
 *         if self.lines.size() > 1:             # <<<<<<<<<<<<<<
 *             first = self.lines.front().front()
 *             last = self.lines.back().back()
 */
  }

  /* "cartopy/trace.pyx":149
 *         cdef int i
 *         cdef GEOSCoordSequence *coords
 *         for ilines in self.lines:             # <<<<<<<<<<<<<<
 *             coords = GEOSCoordSeq_create_r(handle, ilines.size(), 2)
 *             for i, ipoints in enumerate(ilines):
 */
  __Pyx_TraceLine(149,0,__PYX_ERR(0, 149, __pyx_L1_error))
  __pyx_t_4 = &__pyx_v_self->lines;
  __pyx_t_3 = __pyx_t_4->begin();
  for (;;) {
    if (!(__pyx_t_3 != __pyx_t_4->end())) break;
    __pyx_t_5 = *__pyx_t_3;
    ++__pyx_t_3;
    __pyx_v_ilines = __pyx_t_5;

    /* "cartopy/trace.pyx":150
 *         cdef GEOSCoordSequence *coords
 *         for ilines in self.lines:
 *             coords = GEOSCoordSeq_create_r(handle, ilines.size(), 2)             # <<<<<<<<<<<<<<
 *             for i, ipoints in enumerate(ilines):
 *                 GEOSCoordSeq_setX_r(handle, coords, i, ipoints.x)
 */
    __Pyx_TraceLine(150,0,__PYX_ERR(0, 150, __pyx_L1_error))
    __pyx_v_coords = GEOSCoordSeq_create_r(__pyx_v_handle, __pyx_v_ilines.size(), 2);

    /* "cartopy/trace.pyx":151
 *         for ilines in self.lines:
 *             coords = GEOSCoordSeq_create_r(handle, ilines.size(), 2)
 *             for i, ipoints in enumerate(ilines):             # <<<<<<<<<<<<<<
 *                 GEOSCoordSeq_setX_r(handle, coords, i, ipoints.x)
 *                 GEOSCoordSeq_setY_r(handle, coords, i, ipoints.y)
 */
    __Pyx_TraceLine(151,0,__PYX_ERR(0, 151, __pyx_L1_error))
    __pyx_t_6 = 0;
    __pyx_t_7 = __pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Point(__pyx_v_ilines); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
      __pyx_t_8 = __pyx_t_7; __Pyx_INCREF(__pyx_t_8); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_9 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 151, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_8))) {
          if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_9); __Pyx_INCREF(__pyx_t_7); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 151, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_8, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 151, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_9); __Pyx_INCREF(__pyx_t_7); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 151, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_8, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 151, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_10(__pyx_t_8);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 151, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __pyx_t_11 = __pyx_convert__from_py___pyx_t_7cartopy_5trace_Point(__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 151, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_ipoints = __pyx_t_11;
      __pyx_v_i = __pyx_t_6;
      __pyx_t_6 = (__pyx_t_6 + 1);

      /* "cartopy/trace.pyx":152
 *             coords = GEOSCoordSeq_create_r(handle, ilines.size(), 2)
 *             for i, ipoints in enumerate(ilines):
 *                 GEOSCoordSeq_setX_r(handle, coords, i, ipoints.x)             # <<<<<<<<<<<<<<
 *                 GEOSCoordSeq_setY_r(handle, coords, i, ipoints.y)
 * 
 */
      __Pyx_TraceLine(152,0,__PYX_ERR(0, 152, __pyx_L1_error))
      (void)(GEOSCoordSeq_setX_r(__pyx_v_handle, __pyx_v_coords, __pyx_v_i, __pyx_v_ipoints.x));

      /* "cartopy/trace.pyx":153
 *             for i, ipoints in enumerate(ilines):
 *                 GEOSCoordSeq_setX_r(handle, coords, i, ipoints.x)
 *                 GEOSCoordSeq_setY_r(handle, coords, i, ipoints.y)             # <<<<<<<<<<<<<<
 * 
 *             geoms.push_back(GEOSGeom_createLineString_r(handle, coords))
 */
      __Pyx_TraceLine(153,0,__PYX_ERR(0, 153, __pyx_L1_error))
      (void)(GEOSCoordSeq_setY_r(__pyx_v_handle, __pyx_v_coords, __pyx_v_i, __pyx_v_ipoints.y));

      /* "cartopy/trace.pyx":151
 *         for ilines in self.lines:
 *             coords = GEOSCoordSeq_create_r(handle, ilines.size(), 2)
 *             for i, ipoints in enumerate(ilines):             # <<<<<<<<<<<<<<
 *                 GEOSCoordSeq_setX_r(handle, coords, i, ipoints.x)
 *                 GEOSCoordSeq_setY_r(handle, coords, i, ipoints.y)
 */
      __Pyx_TraceLine(151,0,__PYX_ERR(0, 151, __pyx_L1_error))
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "cartopy/trace.pyx":155
 *                 GEOSCoordSeq_setY_r(handle, coords, i, ipoints.y)
 * 
 *             geoms.push_back(GEOSGeom_createLineString_r(handle, coords))             # <<<<<<<<<<<<<<
 * 
 *         cdef GEOSGeometry *geom
 */
    __Pyx_TraceLine(155,0,__PYX_ERR(0, 155, __pyx_L1_error))
    try {
      __pyx_v_geoms.push_back(GEOSGeom_createLineString_r(__pyx_v_handle, __pyx_v_coords));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 155, __pyx_L1_error)
    }

    /* "cartopy/trace.pyx":149
 *         cdef int i
 *         cdef GEOSCoordSequence *coords
 *         for ilines in self.lines:             # <<<<<<<<<<<<<<
 *             coords = GEOSCoordSeq_create_r(handle, ilines.size(), 2)
 *             for i, ipoints in enumerate(ilines):
 */
    __Pyx_TraceLine(149,0,__PYX_ERR(0, 149, __pyx_L1_error))
  }

  /* "cartopy/trace.pyx":158
 * 
 *         cdef GEOSGeometry *geom
 *         if geoms.empty():             # <<<<<<<<<<<<<<
 *             geom = GEOSGeom_createEmptyCollection_r(handle,
 *                                                     GEOS_MULTILINESTRING)
 */
  __Pyx_TraceLine(158,0,__PYX_ERR(0, 158, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_geoms.empty() != 0);
  if (__pyx_t_1) {

    /* "cartopy/trace.pyx":159
 *         cdef GEOSGeometry *geom
 *         if geoms.empty():
 *             geom = GEOSGeom_createEmptyCollection_r(handle,             # <<<<<<<<<<<<<<
 *                                                     GEOS_MULTILINESTRING)
 *         else:
 */
    __Pyx_TraceLine(159,0,__PYX_ERR(0, 159, __pyx_L1_error))
    __pyx_v_geom = GEOSGeom_createEmptyCollection_r(__pyx_v_handle, GEOS_MULTILINESTRING);

    /* "cartopy/trace.pyx":158
 * 
 *         cdef GEOSGeometry *geom
 *         if geoms.empty():             # <<<<<<<<<<<<<<
 *             geom = GEOSGeom_createEmptyCollection_r(handle,
 *                                                     GEOS_MULTILINESTRING)
 */
    goto __pyx_L14;
  }

  /* "cartopy/trace.pyx":162
 *                                                     GEOS_MULTILINESTRING)
 *         else:
 *             geom = GEOSGeom_createCollection_r(handle, GEOS_MULTILINESTRING,             # <<<<<<<<<<<<<<
 *                                                &geoms[0], geoms.size())
 *         return geom
 */
  __Pyx_TraceLine(162,0,__PYX_ERR(0, 162, __pyx_L1_error))
  /*else*/ {

    /* "cartopy/trace.pyx":163
 *         else:
 *             geom = GEOSGeom_createCollection_r(handle, GEOS_MULTILINESTRING,
 *                                                &geoms[0], geoms.size())             # <<<<<<<<<<<<<<
 *         return geom
 * 
 */
    __Pyx_TraceLine(163,0,__PYX_ERR(0, 163, __pyx_L1_error))
    __pyx_v_geom = GEOSGeom_createCollection_r(__pyx_v_handle, GEOS_MULTILINESTRING, (&(__pyx_v_geoms[0])), __pyx_v_geoms.size());
  }
  __pyx_L14:;

  /* "cartopy/trace.pyx":164
 *             geom = GEOSGeom_createCollection_r(handle, GEOS_MULTILINESTRING,
 *                                                &geoms[0], geoms.size())
 *         return geom             # <<<<<<<<<<<<<<
 * 
 *     cdef size_t size(self):
 */
  __Pyx_TraceLine(164,0,__PYX_ERR(0, 164, __pyx_L1_error))
  __pyx_r = __pyx_v_geom;
  goto __pyx_L0;

  /* "cartopy/trace.pyx":124
 *             self.add_point(point)
 * 
 *     cdef GEOSGeometry *as_geom(self, GEOSContextHandle_t handle):             # <<<<<<<<<<<<<<
 *         from cython.operator cimport dereference, preincrement
 *         # self.lines.remove_if(degenerate_line) is not available in Cython.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("cartopy.trace.LineAccumulator.as_geom", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cartopy/trace.pyx":166
 *         return geom
 * 
 *     cdef size_t size(self):             # <<<<<<<<<<<<<<
 *         return self.lines.size()
 * 
 */

static size_t __pyx_f_7cartopy_5trace_15LineAccumulator_size(struct __pyx_obj_7cartopy_5trace_LineAccumulator *__pyx_v_self) {
  size_t __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size", 0);
  __Pyx_TraceCall("size", __pyx_f[0], 166, 0, __PYX_ERR(0, 166, __pyx_L1_error));

  /* "cartopy/trace.pyx":167
 * 
 *     cdef size_t size(self):
 *         return self.lines.size()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(167,0,__PYX_ERR(0, 167, __pyx_L1_error))
  __pyx_r = __pyx_v_self->lines.size();
  goto __pyx_L0;

  /* "cartopy/trace.pyx":166
 *         return geom
 * 
 *     cdef size_t size(self):             # <<<<<<<<<<<<<<
 *         return self.lines.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cartopy.trace.LineAccumulator.size", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cartopy_5trace_15LineAccumulator_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7cartopy_5trace_15LineAccumulator_2__reduce_cython__[] = "LineAccumulator.__reduce_cython__(self)";
static PyMethodDef __pyx_mdef_7cartopy_5trace_15LineAccumulator_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_7cartopy_5trace_15LineAccumulator_3__reduce_cython__, METH_NOARGS, __pyx_doc_7cartopy_5trace_15LineAccumulator_2__reduce_cython__};
static PyObject *__pyx_pw_7cartopy_5trace_15LineAccumulator_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cartopy_5trace_15LineAccumulator_2__reduce_cython__(((struct __pyx_obj_7cartopy_5trace_LineAccumulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cartopy_5trace_15LineAccumulator_2__reduce_cython__(struct __pyx_obj_7cartopy_5trace_LineAccumulator *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj_)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.lines,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_TraceLine(5,0,__PYX_ERR(1, 5, __pyx_L1_error))
  __pyx_t_1 = __pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Line(__pyx_v_self->lines); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.lines,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __Pyx_TraceLine(6,0,__PYX_ERR(1, 6, __pyx_L1_error))
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self.lines,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(1, 7, __pyx_L1_error))
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __Pyx_TraceLine(8,0,__PYX_ERR(1, 8, __pyx_L1_error))
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(1, 9, __pyx_L1_error))
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.lines,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_LineAccumulator, (type(self), 0x980da98, None), state
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(1, 11, __pyx_L1_error))
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_LineAccumulator, (type(self), 0x980da98, None), state
 *     else:
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(1, 12, __pyx_L1_error))
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_LineAccumulator, (type(self), 0x980da98, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_LineAccumulator, (type(self), 0x980da98, state)
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(1, 13, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_LineAccumulator); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_159439512);
    __Pyx_GIVEREF(__pyx_int_159439512);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_159439512);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_LineAccumulator, (type(self), 0x980da98, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_LineAccumulator, (type(self), 0x980da98, None), state
 *     else:
 *         return __pyx_unpickle_LineAccumulator, (type(self), 0x980da98, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_LineAccumulator__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(15,0,__PYX_ERR(1, 15, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_LineAccumulator); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_159439512);
    __Pyx_GIVEREF(__pyx_int_159439512);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_159439512);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cartopy.trace.LineAccumulator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_LineAccumulator, (type(self), 0x980da98, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_LineAccumulator__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cartopy_5trace_15LineAccumulator_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_7cartopy_5trace_15LineAccumulator_4__setstate_cython__[] = "LineAccumulator.__setstate_cython__(self, __pyx_state)";
static PyMethodDef __pyx_mdef_7cartopy_5trace_15LineAccumulator_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_7cartopy_5trace_15LineAccumulator_5__setstate_cython__, METH_O, __pyx_doc_7cartopy_5trace_15LineAccumulator_4__setstate_cython__};
static PyObject *__pyx_pw_7cartopy_5trace_15LineAccumulator_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cartopy_5trace_15LineAccumulator_4__setstate_cython__(((struct __pyx_obj_7cartopy_5trace_LineAccumulator *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cartopy_5trace_15LineAccumulator_4__setstate_cython__(struct __pyx_obj_7cartopy_5trace_LineAccumulator *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__2)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 16, 0, __PYX_ERR(1, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_LineAccumulator, (type(self), 0x980da98, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_LineAccumulator__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(17,0,__PYX_ERR(1, 17, __pyx_L1_error))
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_7cartopy_5trace___pyx_unpickle_LineAccumulator__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_LineAccumulator, (type(self), 0x980da98, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_LineAccumulator__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cartopy.trace.LineAccumulator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cartopy/trace.pyx":178
 *     cdef double dest_scale
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.src_scale = 1
 *         self.dest_scale = 1
 */

/* Python wrapper */
static int __pyx_pw_7cartopy_5trace_12Interpolator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cartopy_5trace_12Interpolator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_7cartopy_5trace_12Interpolator___cinit__(((struct __pyx_obj_7cartopy_5trace_Interpolator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cartopy_5trace_12Interpolator___cinit__(struct __pyx_obj_7cartopy_5trace_Interpolator *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 178, 0, __PYX_ERR(0, 178, __pyx_L1_error));

  /* "cartopy/trace.pyx":179
 * 
 *     def __cinit__(self):
 *         self.src_scale = 1             # <<<<<<<<<<<<<<
 *         self.dest_scale = 1
 * 
 */
  __Pyx_TraceLine(179,0,__PYX_ERR(0, 179, __pyx_L1_error))
  __pyx_v_self->src_scale = 1.0;

  /* "cartopy/trace.pyx":180
 *     def __cinit__(self):
 *         self.src_scale = 1
 *         self.dest_scale = 1             # <<<<<<<<<<<<<<
 * 
 *     cdef void init(self, projPJ src_proj, projPJ dest_proj):
 */
  __Pyx_TraceLine(180,0,__PYX_ERR(0, 180, __pyx_L1_error))
  __pyx_v_self->dest_scale = 1.0;

  /* "cartopy/trace.pyx":178
 *     cdef double dest_scale
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.src_scale = 1
 *         self.dest_scale = 1
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cartopy.trace.Interpolator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cartopy/trace.pyx":182
 *         self.dest_scale = 1
 * 
 *     cdef void init(self, projPJ src_proj, projPJ dest_proj):             # <<<<<<<<<<<<<<
 *         self.src_proj = src_proj
 *         self.dest_proj = dest_proj
 */

static void __pyx_f_7cartopy_5trace_12Interpolator_init(struct __pyx_obj_7cartopy_5trace_Interpolator *__pyx_v_self, projPJ __pyx_v_src_proj, projPJ __pyx_v_dest_proj) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);
  __Pyx_TraceCall("init", __pyx_f[0], 182, 0, __PYX_ERR(0, 182, __pyx_L1_error));

  /* "cartopy/trace.pyx":183
 * 
 *     cdef void init(self, projPJ src_proj, projPJ dest_proj):
 *         self.src_proj = src_proj             # <<<<<<<<<<<<<<
 *         self.dest_proj = dest_proj
 * 
 */
  __Pyx_TraceLine(183,0,__PYX_ERR(0, 183, __pyx_L1_error))
  __pyx_v_self->src_proj = __pyx_v_src_proj;

  /* "cartopy/trace.pyx":184
 *     cdef void init(self, projPJ src_proj, projPJ dest_proj):
 *         self.src_proj = src_proj
 *         self.dest_proj = dest_proj             # <<<<<<<<<<<<<<
 * 
 *     cdef void set_line(self, const Point &start, const Point &end):
 */
  __Pyx_TraceLine(184,0,__PYX_ERR(0, 184, __pyx_L1_error))
  __pyx_v_self->dest_proj = __pyx_v_dest_proj;

  /* "cartopy/trace.pyx":182
 *         self.dest_scale = 1
 * 
 *     cdef void init(self, projPJ src_proj, projPJ dest_proj):             # <<<<<<<<<<<<<<
 *         self.src_proj = src_proj
 *         self.dest_proj = dest_proj
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cartopy.trace.Interpolator.init", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "cartopy/trace.pyx":186
 *         self.dest_proj = dest_proj
 * 
 *     cdef void set_line(self, const Point &start, const Point &end):             # <<<<<<<<<<<<<<
 *         self.start = start
 *         self.end = end
 */

static void __pyx_f_7cartopy_5trace_12Interpolator_set_line(struct __pyx_obj_7cartopy_5trace_Interpolator *__pyx_v_self, __pyx_t_7cartopy_5trace_Point const &__pyx_v_start, __pyx_t_7cartopy_5trace_Point const &__pyx_v_end) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_line", 0);
  __Pyx_TraceCall("set_line", __pyx_f[0], 186, 0, __PYX_ERR(0, 186, __pyx_L1_error));

  /* "cartopy/trace.pyx":187
 * 
 *     cdef void set_line(self, const Point &start, const Point &end):
 *         self.start = start             # <<<<<<<<<<<<<<
 *         self.end = end
 * 
 */
  __Pyx_TraceLine(187,0,__PYX_ERR(0, 187, __pyx_L1_error))
  __pyx_v_self->start = __pyx_v_start;

  /* "cartopy/trace.pyx":188
 *     cdef void set_line(self, const Point &start, const Point &end):
 *         self.start = start
 *         self.end = end             # <<<<<<<<<<<<<<
 * 
 *     cdef Point interpolate(self, double t):
 */
  __Pyx_TraceLine(188,0,__PYX_ERR(0, 188, __pyx_L1_error))
  __pyx_v_self->end = __pyx_v_end;

  /* "cartopy/trace.pyx":186
 *         self.dest_proj = dest_proj
 * 
 *     cdef void set_line(self, const Point &start, const Point &end):             # <<<<<<<<<<<<<<
 *         self.start = start
 *         self.end = end
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cartopy.trace.Interpolator.set_line", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "cartopy/trace.pyx":190
 *         self.end = end
 * 
 *     cdef Point interpolate(self, double t):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError
 * 
 */

static __pyx_t_7cartopy_5trace_Point __pyx_f_7cartopy_5trace_12Interpolator_interpolate(CYTHON_UNUSED struct __pyx_obj_7cartopy_5trace_Interpolator *__pyx_v_self, CYTHON_UNUSED double __pyx_v_t) {
  __pyx_t_7cartopy_5trace_Point __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("interpolate", 0);
  __Pyx_TraceCall("interpolate", __pyx_f[0], 190, 0, __PYX_ERR(0, 190, __pyx_L1_error));

  /* "cartopy/trace.pyx":191
 * 
 *     cdef Point interpolate(self, double t):
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     cdef Point project(self, const Point &point):
 */
  __Pyx_TraceLine(191,0,__PYX_ERR(0, 191, __pyx_L1_error))
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 191, __pyx_L1_error)

  /* "cartopy/trace.pyx":190
 *         self.end = end
 * 
 *     cdef Point interpolate(self, double t):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cartopy.trace.Interpolator.interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cartopy/trace.pyx":193
 *         raise NotImplementedError
 * 
 *     cdef Point project(self, const Point &point):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError
 * 
 */

static __pyx_t_7cartopy_5trace_Point __pyx_f_7cartopy_5trace_12Interpolator_project(CYTHON_UNUSED struct __pyx_obj_7cartopy_5trace_Interpolator *__pyx_v_self, CYTHON_UNUSED __pyx_t_7cartopy_5trace_Point const &__pyx_v_point) {
  __pyx_t_7cartopy_5trace_Point __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project", 0);
  __Pyx_TraceCall("project", __pyx_f[0], 193, 0, __PYX_ERR(0, 193, __pyx_L1_error));

  /* "cartopy/trace.pyx":194
 * 
 *     cdef Point project(self, const Point &point):
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(194,0,__PYX_ERR(0, 194, __pyx_L1_error))
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 194, __pyx_L1_error)

  /* "cartopy/trace.pyx":193
 *         raise NotImplementedError
 * 
 *     cdef Point project(self, const Point &point):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cartopy.trace.Interpolator.project", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cartopy_5trace_12Interpolator_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7cartopy_5trace_12Interpolator_2__reduce_cython__[] = "Interpolator.__reduce_cython__(self)";
static PyMethodDef __pyx_mdef_7cartopy_5trace_12Interpolator_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_7cartopy_5trace_12Interpolator_3__reduce_cython__, METH_NOARGS, __pyx_doc_7cartopy_5trace_12Interpolator_2__reduce_cython__};
static PyObject *__pyx_pw_7cartopy_5trace_12Interpolator_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cartopy_5trace_12Interpolator_2__reduce_cython__(((struct __pyx_obj_7cartopy_5trace_Interpolator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cartopy_5trace_12Interpolator_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cartopy_5trace_Interpolator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__3)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(1, 2, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cartopy.trace.Interpolator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cartopy_5trace_12Interpolator_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_7cartopy_5trace_12Interpolator_4__setstate_cython__[] = "Interpolator.__setstate_cython__(self, __pyx_state)";
static PyMethodDef __pyx_mdef_7cartopy_5trace_12Interpolator_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_7cartopy_5trace_12Interpolator_5__setstate_cython__, METH_O, __pyx_doc_7cartopy_5trace_12Interpolator_4__setstate_cython__};
static PyObject *__pyx_pw_7cartopy_5trace_12Interpolator_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cartopy_5trace_12Interpolator_4__setstate_cython__(((struct __pyx_obj_7cartopy_5trace_Interpolator *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cartopy_5trace_12Interpolator_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cartopy_5trace_Interpolator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__5)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(1, 4, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cartopy.trace.Interpolator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cartopy/trace.pyx":198
 * 
 * cdef class CartesianInterpolator(Interpolator):
 *     cdef Point interpolate(self, double t):             # <<<<<<<<<<<<<<
 *         cdef Point xy
 *         xy.x = self.start.x + (self.end.x - self.start.x) * t
 */

static __pyx_t_7cartopy_5trace_Point __pyx_f_7cartopy_5trace_21CartesianInterpolator_interpolate(struct __pyx_obj_7cartopy_5trace_CartesianInterpolator *__pyx_v_self, double __pyx_v_t) {
  __pyx_t_7cartopy_5trace_Point __pyx_v_xy;
  __pyx_t_7cartopy_5trace_Point __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("interpolate", 0);
  __Pyx_TraceCall("interpolate", __pyx_f[0], 198, 0, __PYX_ERR(0, 198, __pyx_L1_error));

  /* "cartopy/trace.pyx":200
 *     cdef Point interpolate(self, double t):
 *         cdef Point xy
 *         xy.x = self.start.x + (self.end.x - self.start.x) * t             # <<<<<<<<<<<<<<
 *         xy.y = self.start.y + (self.end.y - self.start.y) * t
 *         return self.project(xy)
 */
  __Pyx_TraceLine(200,0,__PYX_ERR(0, 200, __pyx_L1_error))
  __pyx_v_xy.x = (__pyx_v_self->__pyx_base.start.x + ((__pyx_v_self->__pyx_base.end.x - __pyx_v_self->__pyx_base.start.x) * __pyx_v_t));

  /* "cartopy/trace.pyx":201
 *         cdef Point xy
 *         xy.x = self.start.x + (self.end.x - self.start.x) * t
 *         xy.y = self.start.y + (self.end.y - self.start.y) * t             # <<<<<<<<<<<<<<
 *         return self.project(xy)
 * 
 */
  __Pyx_TraceLine(201,0,__PYX_ERR(0, 201, __pyx_L1_error))
  __pyx_v_xy.y = (__pyx_v_self->__pyx_base.start.y + ((__pyx_v_self->__pyx_base.end.y - __pyx_v_self->__pyx_base.start.y) * __pyx_v_t));

  /* "cartopy/trace.pyx":202
 *         xy.x = self.start.x + (self.end.x - self.start.x) * t
 *         xy.y = self.start.y + (self.end.y - self.start.y) * t
 *         return self.project(xy)             # <<<<<<<<<<<<<<
 * 
 *     cdef Point project(self, const Point &src_xy):
 */
  __Pyx_TraceLine(202,0,__PYX_ERR(0, 202, __pyx_L1_error))
  __pyx_r = ((struct __pyx_vtabstruct_7cartopy_5trace_CartesianInterpolator *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.project(((struct __pyx_obj_7cartopy_5trace_Interpolator *)__pyx_v_self), __pyx_v_xy);
  goto __pyx_L0;

  /* "cartopy/trace.pyx":198
 * 
 * cdef class CartesianInterpolator(Interpolator):
 *     cdef Point interpolate(self, double t):             # <<<<<<<<<<<<<<
 *         cdef Point xy
 *         xy.x = self.start.x + (self.end.x - self.start.x) * t
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cartopy.trace.CartesianInterpolator.interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cartopy/trace.pyx":204
 *         return self.project(xy)
 * 
 *     cdef Point project(self, const Point &src_xy):             # <<<<<<<<<<<<<<
 *         cdef Point dest_xy
 *         cdef projLP xy
 */

static __pyx_t_7cartopy_5trace_Point __pyx_f_7cartopy_5trace_21CartesianInterpolator_project(struct __pyx_obj_7cartopy_5trace_CartesianInterpolator *__pyx_v_self, __pyx_t_7cartopy_5trace_Point const &__pyx_v_src_xy) {
  __pyx_t_7cartopy_5trace_Point __pyx_v_dest_xy;
  projLP __pyx_v_xy;
  int __pyx_v_status;
  __pyx_t_7cartopy_5trace_Point __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("project", 0);
  __Pyx_TraceCall("project", __pyx_f[0], 204, 0, __PYX_ERR(0, 204, __pyx_L1_error));

  /* "cartopy/trace.pyx":208
 *         cdef projLP xy
 * 
 *         xy.u = src_xy.x * self.src_scale             # <<<<<<<<<<<<<<
 *         xy.v = src_xy.y * self.src_scale
 * 
 */
  __Pyx_TraceLine(208,0,__PYX_ERR(0, 208, __pyx_L1_error))
  __pyx_v_xy.u = (__pyx_v_src_xy.x * __pyx_v_self->__pyx_base.src_scale);

  /* "cartopy/trace.pyx":209
 * 
 *         xy.u = src_xy.x * self.src_scale
 *         xy.v = src_xy.y * self.src_scale             # <<<<<<<<<<<<<<
 * 
 *         cdef int status = pj_transform(self.src_proj, self.dest_proj,
 */
  __Pyx_TraceLine(209,0,__PYX_ERR(0, 209, __pyx_L1_error))
  __pyx_v_xy.v = (__pyx_v_src_xy.y * __pyx_v_self->__pyx_base.src_scale);

  /* "cartopy/trace.pyx":211
 *         xy.v = src_xy.y * self.src_scale
 * 
 *         cdef int status = pj_transform(self.src_proj, self.dest_proj,             # <<<<<<<<<<<<<<
 *                                        1, 1, &xy.u, &xy.v, NULL)
 *         if status in (-14, -20):
 */
  __Pyx_TraceLine(211,0,__PYX_ERR(0, 211, __pyx_L1_error))
  __pyx_v_status = pj_transform(__pyx_v_self->__pyx_base.src_proj, __pyx_v_self->__pyx_base.dest_proj, 1, 1, (&__pyx_v_xy.u), (&__pyx_v_xy.v), NULL);

  /* "cartopy/trace.pyx":213
 *         cdef int status = pj_transform(self.src_proj, self.dest_proj,
 *                                        1, 1, &xy.u, &xy.v, NULL)
 *         if status in (-14, -20):             # <<<<<<<<<<<<<<
 *             # -14 => "latitude or longitude exceeded limits"
 *             # -20 => "tolerance condition error"
 */
  __Pyx_TraceLine(213,0,__PYX_ERR(0, 213, __pyx_L1_error))
  switch (__pyx_v_status) {
    case -14L:
    CYTHON_FALLTHROUGH;
    case -20L:
    __pyx_t_1 = 1;
    break;
    default:
    __pyx_t_1 = 0;
    break;
  }
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cartopy/trace.pyx":216
 *             # -14 => "latitude or longitude exceeded limits"
 *             # -20 => "tolerance condition error"
 *             xy.u = xy.v = HUGE_VAL             # <<<<<<<<<<<<<<
 *         elif status != 0:
 *             raise Exception('pj_transform failed: %d\n%s' % (
 */
    __Pyx_TraceLine(216,0,__PYX_ERR(0, 216, __pyx_L1_error))
    __pyx_v_xy.u = HUGE_VAL;
    __pyx_v_xy.v = HUGE_VAL;

    /* "cartopy/trace.pyx":213
 *         cdef int status = pj_transform(self.src_proj, self.dest_proj,
 *                                        1, 1, &xy.u, &xy.v, NULL)
 *         if status in (-14, -20):             # <<<<<<<<<<<<<<
 *             # -14 => "latitude or longitude exceeded limits"
 *             # -20 => "tolerance condition error"
 */
    goto __pyx_L3;
  }

  /* "cartopy/trace.pyx":217
 *             # -20 => "tolerance condition error"
 *             xy.u = xy.v = HUGE_VAL
 *         elif status != 0:             # <<<<<<<<<<<<<<
 *             raise Exception('pj_transform failed: %d\n%s' % (
 *                 status,
 */
  __Pyx_TraceLine(217,0,__PYX_ERR(0, 217, __pyx_L1_error))
  __pyx_t_2 = ((__pyx_v_status != 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cartopy/trace.pyx":219
 *         elif status != 0:
 *             raise Exception('pj_transform failed: %d\n%s' % (
 *                 status,             # <<<<<<<<<<<<<<
 *                 pj_strerrno(status)))
 * 
 */
    __Pyx_TraceLine(219,0,__PYX_ERR(0, 219, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "cartopy/trace.pyx":220
 *             raise Exception('pj_transform failed: %d\n%s' % (
 *                 status,
 *                 pj_strerrno(status)))             # <<<<<<<<<<<<<<
 * 
 *         dest_xy.x = xy.u * self.dest_scale
 */
    __Pyx_TraceLine(220,0,__PYX_ERR(0, 220, __pyx_L1_error))
    __pyx_t_4 = __Pyx_PyBytes_FromString(pj_strerrno(__pyx_v_status)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "cartopy/trace.pyx":219
 *         elif status != 0:
 *             raise Exception('pj_transform failed: %d\n%s' % (
 *                 status,             # <<<<<<<<<<<<<<
 *                 pj_strerrno(status)))
 * 
 */
    __Pyx_TraceLine(219,0,__PYX_ERR(0, 219, __pyx_L1_error))
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;

    /* "cartopy/trace.pyx":218
 *             xy.u = xy.v = HUGE_VAL
 *         elif status != 0:
 *             raise Exception('pj_transform failed: %d\n%s' % (             # <<<<<<<<<<<<<<
 *                 status,
 *                 pj_strerrno(status)))
 */
    __Pyx_TraceLine(218,0,__PYX_ERR(0, 218, __pyx_L1_error))
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_pj_transform_failed_d_s, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 218, __pyx_L1_error)

    /* "cartopy/trace.pyx":217
 *             # -20 => "tolerance condition error"
 *             xy.u = xy.v = HUGE_VAL
 *         elif status != 0:             # <<<<<<<<<<<<<<
 *             raise Exception('pj_transform failed: %d\n%s' % (
 *                 status,
 */
  }
  __pyx_L3:;

  /* "cartopy/trace.pyx":222
 *                 pj_strerrno(status)))
 * 
 *         dest_xy.x = xy.u * self.dest_scale             # <<<<<<<<<<<<<<
 *         dest_xy.y = xy.v * self.dest_scale
 *         return dest_xy
 */
  __Pyx_TraceLine(222,0,__PYX_ERR(0, 222, __pyx_L1_error))
  __pyx_v_dest_xy.x = (__pyx_v_xy.u * __pyx_v_self->__pyx_base.dest_scale);

  /* "cartopy/trace.pyx":223
 * 
 *         dest_xy.x = xy.u * self.dest_scale
 *         dest_xy.y = xy.v * self.dest_scale             # <<<<<<<<<<<<<<
 *         return dest_xy
 * 
 */
  __Pyx_TraceLine(223,0,__PYX_ERR(0, 223, __pyx_L1_error))
  __pyx_v_dest_xy.y = (__pyx_v_xy.v * __pyx_v_self->__pyx_base.dest_scale);

  /* "cartopy/trace.pyx":224
 *         dest_xy.x = xy.u * self.dest_scale
 *         dest_xy.y = xy.v * self.dest_scale
 *         return dest_xy             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(224,0,__PYX_ERR(0, 224, __pyx_L1_error))
  __pyx_r = __pyx_v_dest_xy;
  goto __pyx_L0;

  /* "cartopy/trace.pyx":204
 *         return self.project(xy)
 * 
 *     cdef Point project(self, const Point &src_xy):             # <<<<<<<<<<<<<<
 *         cdef Point dest_xy
 *         cdef projLP xy
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("cartopy.trace.CartesianInterpolator.project", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cartopy_5trace_21CartesianInterpolator_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7cartopy_5trace_21CartesianInterpolator___reduce_cython__[] = "CartesianInterpolator.__reduce_cython__(self)";
static PyMethodDef __pyx_mdef_7cartopy_5trace_21CartesianInterpolator_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_7cartopy_5trace_21CartesianInterpolator_1__reduce_cython__, METH_NOARGS, __pyx_doc_7cartopy_5trace_21CartesianInterpolator___reduce_cython__};
static PyObject *__pyx_pw_7cartopy_5trace_21CartesianInterpolator_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cartopy_5trace_21CartesianInterpolator___reduce_cython__(((struct __pyx_obj_7cartopy_5trace_CartesianInterpolator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cartopy_5trace_21CartesianInterpolator___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cartopy_5trace_CartesianInterpolator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__7)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(1, 2, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cartopy.trace.CartesianInterpolator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cartopy_5trace_21CartesianInterpolator_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_7cartopy_5trace_21CartesianInterpolator_2__setstate_cython__[] = "CartesianInterpolator.__setstate_cython__(self, __pyx_state)";
static PyMethodDef __pyx_mdef_7cartopy_5trace_21CartesianInterpolator_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_7cartopy_5trace_21CartesianInterpolator_3__setstate_cython__, METH_O, __pyx_doc_7cartopy_5trace_21CartesianInterpolator_2__setstate_cython__};
static PyObject *__pyx_pw_7cartopy_5trace_21CartesianInterpolator_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cartopy_5trace_21CartesianInterpolator_2__setstate_cython__(((struct __pyx_obj_7cartopy_5trace_CartesianInterpolator *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cartopy_5trace_21CartesianInterpolator_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cartopy_5trace_CartesianInterpolator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__9)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(1, 4, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cartopy.trace.CartesianInterpolator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cartopy/trace.pyx":232
 *     cdef double a13
 * 
 *     cdef void init(self, projPJ src_proj, projPJ dest_proj):             # <<<<<<<<<<<<<<
 *         self.src_proj = src_proj
 *         self.dest_proj = dest_proj
 */

static void __pyx_f_7cartopy_5trace_21SphericalInterpolator_init(struct __pyx_obj_7cartopy_5trace_SphericalInterpolator *__pyx_v_self, projPJ __pyx_v_src_proj, projPJ __pyx_v_dest_proj) {
  double __pyx_v_major_axis;
  double __pyx_v_eccentricity_squared;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);
  __Pyx_TraceCall("init", __pyx_f[0], 232, 0, __PYX_ERR(0, 232, __pyx_L1_error));

  /* "cartopy/trace.pyx":233
 * 
 *     cdef void init(self, projPJ src_proj, projPJ dest_proj):
 *         self.src_proj = src_proj             # <<<<<<<<<<<<<<
 *         self.dest_proj = dest_proj
 * 
 */
  __Pyx_TraceLine(233,0,__PYX_ERR(0, 233, __pyx_L1_error))
  __pyx_v_self->__pyx_base.src_proj = __pyx_v_src_proj;

  /* "cartopy/trace.pyx":234
 *     cdef void init(self, projPJ src_proj, projPJ dest_proj):
 *         self.src_proj = src_proj
 *         self.dest_proj = dest_proj             # <<<<<<<<<<<<<<
 * 
 *         cdef double major_axis
 */
  __Pyx_TraceLine(234,0,__PYX_ERR(0, 234, __pyx_L1_error))
  __pyx_v_self->__pyx_base.dest_proj = __pyx_v_dest_proj;

  /* "cartopy/trace.pyx":238
 *         cdef double major_axis
 *         cdef double eccentricity_squared
 *         pj_get_spheroid_defn(self.src_proj, &major_axis, &eccentricity_squared)             # <<<<<<<<<<<<<<
 *         geod_init(&self.geod, major_axis, 1 - sqrt(1 - eccentricity_squared))
 * 
 */
  __Pyx_TraceLine(238,0,__PYX_ERR(0, 238, __pyx_L1_error))
  pj_get_spheroid_defn(__pyx_v_self->__pyx_base.src_proj, (&__pyx_v_major_axis), (&__pyx_v_eccentricity_squared));

  /* "cartopy/trace.pyx":239
 *         cdef double eccentricity_squared
 *         pj_get_spheroid_defn(self.src_proj, &major_axis, &eccentricity_squared)
 *         geod_init(&self.geod, major_axis, 1 - sqrt(1 - eccentricity_squared))             # <<<<<<<<<<<<<<
 * 
 *     cdef void set_line(self, const Point &start, const Point &end):
 */
  __Pyx_TraceLine(239,0,__PYX_ERR(0, 239, __pyx_L1_error))
  geod_init((&__pyx_v_self->geod), __pyx_v_major_axis, (1.0 - sqrt((1.0 - __pyx_v_eccentricity_squared))));

  /* "cartopy/trace.pyx":232
 *     cdef double a13
 * 
 *     cdef void init(self, projPJ src_proj, projPJ dest_proj):             # <<<<<<<<<<<<<<
 *         self.src_proj = src_proj
 *         self.dest_proj = dest_proj
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cartopy.trace.SphericalInterpolator.init", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "cartopy/trace.pyx":241
 *         geod_init(&self.geod, major_axis, 1 - sqrt(1 - eccentricity_squared))
 * 
 *     cdef void set_line(self, const Point &start, const Point &end):             # <<<<<<<<<<<<<<
 *         cdef double azi1
 *         self.a13 = geod_geninverse(&self.geod,
 */

static void __pyx_f_7cartopy_5trace_21SphericalInterpolator_set_line(struct __pyx_obj_7cartopy_5trace_SphericalInterpolator *__pyx_v_self, __pyx_t_7cartopy_5trace_Point const &__pyx_v_start, __pyx_t_7cartopy_5trace_Point const &__pyx_v_end) {
  double __pyx_v_azi1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_line", 0);
  __Pyx_TraceCall("set_line", __pyx_f[0], 241, 0, __PYX_ERR(0, 241, __pyx_L1_error));

  /* "cartopy/trace.pyx":243
 *     cdef void set_line(self, const Point &start, const Point &end):
 *         cdef double azi1
 *         self.a13 = geod_geninverse(&self.geod,             # <<<<<<<<<<<<<<
 *                                    start.y, start.x, end.y, end.x,
 *                                    NULL, &azi1, NULL, NULL, NULL, NULL, NULL)
 */
  __Pyx_TraceLine(243,0,__PYX_ERR(0, 243, __pyx_L1_error))
  __pyx_v_self->a13 = geod_geninverse((&__pyx_v_self->geod), __pyx_v_start.y, __pyx_v_start.x, __pyx_v_end.y, __pyx_v_end.x, NULL, (&__pyx_v_azi1), NULL, NULL, NULL, NULL, NULL);

  /* "cartopy/trace.pyx":246
 *                                    start.y, start.x, end.y, end.x,
 *                                    NULL, &azi1, NULL, NULL, NULL, NULL, NULL)
 *         geod_lineinit(&self.geod_line, &self.geod, start.y, start.x, azi1,             # <<<<<<<<<<<<<<
 *                       GEOD_LATITUDE | GEOD_LONGITUDE);
 * 
 */
  __Pyx_TraceLine(246,0,__PYX_ERR(0, 246, __pyx_L1_error))
  geod_lineinit((&__pyx_v_self->geod_line), (&__pyx_v_self->geod), __pyx_v_start.y, __pyx_v_start.x, __pyx_v_azi1, (GEOD_LATITUDE | GEOD_LONGITUDE));

  /* "cartopy/trace.pyx":241
 *         geod_init(&self.geod, major_axis, 1 - sqrt(1 - eccentricity_squared))
 * 
 *     cdef void set_line(self, const Point &start, const Point &end):             # <<<<<<<<<<<<<<
 *         cdef double azi1
 *         self.a13 = geod_geninverse(&self.geod,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cartopy.trace.SphericalInterpolator.set_line", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "cartopy/trace.pyx":249
 *                       GEOD_LATITUDE | GEOD_LONGITUDE);
 * 
 *     cdef Point interpolate(self, double t):             # <<<<<<<<<<<<<<
 *         cdef Point lonlat
 * 
 */

static __pyx_t_7cartopy_5trace_Point __pyx_f_7cartopy_5trace_21SphericalInterpolator_interpolate(struct __pyx_obj_7cartopy_5trace_SphericalInterpolator *__pyx_v_self, double __pyx_v_t) {
  __pyx_t_7cartopy_5trace_Point __pyx_v_lonlat;
  __pyx_t_7cartopy_5trace_Point __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("interpolate", 0);
  __Pyx_TraceCall("interpolate", __pyx_f[0], 249, 0, __PYX_ERR(0, 249, __pyx_L1_error));

  /* "cartopy/trace.pyx":252
 *         cdef Point lonlat
 * 
 *         geod_genposition(&self.geod_line, GEOD_ARCMODE, self.a13 * t,             # <<<<<<<<<<<<<<
 *                          &lonlat.y, &lonlat.x, NULL, NULL, NULL, NULL, NULL,
 *                          NULL)
 */
  __Pyx_TraceLine(252,0,__PYX_ERR(0, 252, __pyx_L1_error))
  geod_genposition((&__pyx_v_self->geod_line), GEOD_ARCMODE, (__pyx_v_self->a13 * __pyx_v_t), (&__pyx_v_lonlat.y), (&__pyx_v_lonlat.x), NULL, NULL, NULL, NULL, NULL, NULL);

  /* "cartopy/trace.pyx":256
 *                          NULL)
 * 
 *         return self.project(lonlat)             # <<<<<<<<<<<<<<
 * 
 *     cdef Point project(self, const Point &lonlat):
 */
  __Pyx_TraceLine(256,0,__PYX_ERR(0, 256, __pyx_L1_error))
  __pyx_r = ((struct __pyx_vtabstruct_7cartopy_5trace_SphericalInterpolator *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.project(((struct __pyx_obj_7cartopy_5trace_Interpolator *)__pyx_v_self), __pyx_v_lonlat);
  goto __pyx_L0;

  /* "cartopy/trace.pyx":249
 *                       GEOD_LATITUDE | GEOD_LONGITUDE);
 * 
 *     cdef Point interpolate(self, double t):             # <<<<<<<<<<<<<<
 *         cdef Point lonlat
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cartopy.trace.SphericalInterpolator.interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cartopy/trace.pyx":258
 *         return self.project(lonlat)
 * 
 *     cdef Point project(self, const Point &lonlat):             # <<<<<<<<<<<<<<
 *         cdef Point xy
 *         cdef projLP dest
 */

static __pyx_t_7cartopy_5trace_Point __pyx_f_7cartopy_5trace_21SphericalInterpolator_project(struct __pyx_obj_7cartopy_5trace_SphericalInterpolator *__pyx_v_self, __pyx_t_7cartopy_5trace_Point const &__pyx_v_lonlat) {
  __pyx_t_7cartopy_5trace_Point __pyx_v_xy;
  projLP __pyx_v_dest;
  int __pyx_v_status;
  __pyx_t_7cartopy_5trace_Point __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("project", 0);
  __Pyx_TraceCall("project", __pyx_f[0], 258, 0, __PYX_ERR(0, 258, __pyx_L1_error));

  /* "cartopy/trace.pyx":262
 *         cdef projLP dest
 * 
 *         dest.u = (lonlat.x * DEG_TO_RAD) * self.src_scale             # <<<<<<<<<<<<<<
 *         dest.v = (lonlat.y * DEG_TO_RAD) * self.src_scale
 * 
 */
  __Pyx_TraceLine(262,0,__PYX_ERR(0, 262, __pyx_L1_error))
  __pyx_v_dest.u = ((__pyx_v_lonlat.x * DEG_TO_RAD) * __pyx_v_self->__pyx_base.src_scale);

  /* "cartopy/trace.pyx":263
 * 
 *         dest.u = (lonlat.x * DEG_TO_RAD) * self.src_scale
 *         dest.v = (lonlat.y * DEG_TO_RAD) * self.src_scale             # <<<<<<<<<<<<<<
 * 
 *         cdef int status = pj_transform(self.src_proj, self.dest_proj,
 */
  __Pyx_TraceLine(263,0,__PYX_ERR(0, 263, __pyx_L1_error))
  __pyx_v_dest.v = ((__pyx_v_lonlat.y * DEG_TO_RAD) * __pyx_v_self->__pyx_base.src_scale);

  /* "cartopy/trace.pyx":265
 *         dest.v = (lonlat.y * DEG_TO_RAD) * self.src_scale
 * 
 *         cdef int status = pj_transform(self.src_proj, self.dest_proj,             # <<<<<<<<<<<<<<
 *                                        1, 1, &dest.u, &dest.v, NULL)
 *         if status in (-14, -20):
 */
  __Pyx_TraceLine(265,0,__PYX_ERR(0, 265, __pyx_L1_error))
  __pyx_v_status = pj_transform(__pyx_v_self->__pyx_base.src_proj, __pyx_v_self->__pyx_base.dest_proj, 1, 1, (&__pyx_v_dest.u), (&__pyx_v_dest.v), NULL);

  /* "cartopy/trace.pyx":267
 *         cdef int status = pj_transform(self.src_proj, self.dest_proj,
 *                                        1, 1, &dest.u, &dest.v, NULL)
 *         if status in (-14, -20):             # <<<<<<<<<<<<<<
 *             # -14 => "latitude or longitude exceeded limits"
 *             # -20 => "tolerance condition error"
 */
  __Pyx_TraceLine(267,0,__PYX_ERR(0, 267, __pyx_L1_error))
  switch (__pyx_v_status) {
    case -14L:
    CYTHON_FALLTHROUGH;
    case -20L:
    __pyx_t_1 = 1;
    break;
    default:
    __pyx_t_1 = 0;
    break;
  }
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cartopy/trace.pyx":270
 *             # -14 => "latitude or longitude exceeded limits"
 *             # -20 => "tolerance condition error"
 *             dest.u = dest.v = HUGE_VAL             # <<<<<<<<<<<<<<
 *         elif status != 0:
 *             raise Exception('pj_transform failed: %d\n%s' % (
 */
    __Pyx_TraceLine(270,0,__PYX_ERR(0, 270, __pyx_L1_error))
    __pyx_v_dest.u = HUGE_VAL;
    __pyx_v_dest.v = HUGE_VAL;

    /* "cartopy/trace.pyx":267
 *         cdef int status = pj_transform(self.src_proj, self.dest_proj,
 *                                        1, 1, &dest.u, &dest.v, NULL)
 *         if status in (-14, -20):             # <<<<<<<<<<<<<<
 *             # -14 => "latitude or longitude exceeded limits"
 *             # -20 => "tolerance condition error"
 */
    goto __pyx_L3;
  }

  /* "cartopy/trace.pyx":271
 *             # -20 => "tolerance condition error"
 *             dest.u = dest.v = HUGE_VAL
 *         elif status != 0:             # <<<<<<<<<<<<<<
 *             raise Exception('pj_transform failed: %d\n%s' % (
 *                 status,
 */
  __Pyx_TraceLine(271,0,__PYX_ERR(0, 271, __pyx_L1_error))
  __pyx_t_2 = ((__pyx_v_status != 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cartopy/trace.pyx":273
 *         elif status != 0:
 *             raise Exception('pj_transform failed: %d\n%s' % (
 *                 status,             # <<<<<<<<<<<<<<
 *                 pj_strerrno(status)))
 * 
 */
    __Pyx_TraceLine(273,0,__PYX_ERR(0, 273, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "cartopy/trace.pyx":274
 *             raise Exception('pj_transform failed: %d\n%s' % (
 *                 status,
 *                 pj_strerrno(status)))             # <<<<<<<<<<<<<<
 * 
 *         xy.x = dest.u * self.dest_scale
 */
    __Pyx_TraceLine(274,0,__PYX_ERR(0, 274, __pyx_L1_error))
    __pyx_t_4 = __Pyx_PyBytes_FromString(pj_strerrno(__pyx_v_status)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "cartopy/trace.pyx":273
 *         elif status != 0:
 *             raise Exception('pj_transform failed: %d\n%s' % (
 *                 status,             # <<<<<<<<<<<<<<
 *                 pj_strerrno(status)))
 * 
 */
    __Pyx_TraceLine(273,0,__PYX_ERR(0, 273, __pyx_L1_error))
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;

    /* "cartopy/trace.pyx":272
 *             dest.u = dest.v = HUGE_VAL
 *         elif status != 0:
 *             raise Exception('pj_transform failed: %d\n%s' % (             # <<<<<<<<<<<<<<
 *                 status,
 *                 pj_strerrno(status)))
 */
    __Pyx_TraceLine(272,0,__PYX_ERR(0, 272, __pyx_L1_error))
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_pj_transform_failed_d_s, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 272, __pyx_L1_error)

    /* "cartopy/trace.pyx":271
 *             # -20 => "tolerance condition error"
 *             dest.u = dest.v = HUGE_VAL
 *         elif status != 0:             # <<<<<<<<<<<<<<
 *             raise Exception('pj_transform failed: %d\n%s' % (
 *                 status,
 */
  }
  __pyx_L3:;

  /* "cartopy/trace.pyx":276
 *                 pj_strerrno(status)))
 * 
 *         xy.x = dest.u * self.dest_scale             # <<<<<<<<<<<<<<
 *         xy.y = dest.v * self.dest_scale
 *         return xy
 */
  __Pyx_TraceLine(276,0,__PYX_ERR(0, 276, __pyx_L1_error))
  __pyx_v_xy.x = (__pyx_v_dest.u * __pyx_v_self->__pyx_base.dest_scale);

  /* "cartopy/trace.pyx":277
 * 
 *         xy.x = dest.u * self.dest_scale
 *         xy.y = dest.v * self.dest_scale             # <<<<<<<<<<<<<<
 *         return xy
 * 
 */
  __Pyx_TraceLine(277,0,__PYX_ERR(0, 277, __pyx_L1_error))
  __pyx_v_xy.y = (__pyx_v_dest.v * __pyx_v_self->__pyx_base.dest_scale);

  /* "cartopy/trace.pyx":278
 *         xy.x = dest.u * self.dest_scale
 *         xy.y = dest.v * self.dest_scale
 *         return xy             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(278,0,__PYX_ERR(0, 278, __pyx_L1_error))
  __pyx_r = __pyx_v_xy;
  goto __pyx_L0;

  /* "cartopy/trace.pyx":258
 *         return self.project(lonlat)
 * 
 *     cdef Point project(self, const Point &lonlat):             # <<<<<<<<<<<<<<
 *         cdef Point xy
 *         cdef projLP dest
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("cartopy.trace.SphericalInterpolator.project", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cartopy_5trace_21SphericalInterpolator_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7cartopy_5trace_21SphericalInterpolator___reduce_cython__[] = "SphericalInterpolator.__reduce_cython__(self)";
static PyMethodDef __pyx_mdef_7cartopy_5trace_21SphericalInterpolator_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_7cartopy_5trace_21SphericalInterpolator_1__reduce_cython__, METH_NOARGS, __pyx_doc_7cartopy_5trace_21SphericalInterpolator___reduce_cython__};
static PyObject *__pyx_pw_7cartopy_5trace_21SphericalInterpolator_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cartopy_5trace_21SphericalInterpolator___reduce_cython__(((struct __pyx_obj_7cartopy_5trace_SphericalInterpolator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cartopy_5trace_21SphericalInterpolator___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cartopy_5trace_SphericalInterpolator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__11)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(1, 2, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cartopy.trace.SphericalInterpolator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cartopy_5trace_21SphericalInterpolator_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_7cartopy_5trace_21SphericalInterpolator_2__setstate_cython__[] = "SphericalInterpolator.__setstate_cython__(self, __pyx_state)";
static PyMethodDef __pyx_mdef_7cartopy_5trace_21SphericalInterpolator_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_7cartopy_5trace_21SphericalInterpolator_3__setstate_cython__, METH_O, __pyx_doc_7cartopy_5trace_21SphericalInterpolator_2__setstate_cython__};
static PyObject *__pyx_pw_7cartopy_5trace_21SphericalInterpolator_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cartopy_5trace_21SphericalInterpolator_2__setstate_cython__(((struct __pyx_obj_7cartopy_5trace_SphericalInterpolator *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cartopy_5trace_21SphericalInterpolator_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cartopy_5trace_SphericalInterpolator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__13)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(1, 4, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cartopy.trace.SphericalInterpolator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cartopy/trace.pyx":287
 * 
 * 
 * cdef State get_state(const Point &point, const GEOSPreparedGeometry *gp_domain,             # <<<<<<<<<<<<<<
 *                      GEOSContextHandle_t handle):
 *     cdef State state
 */

static enum __pyx_t_7cartopy_5trace_State __pyx_f_7cartopy_5trace_get_state(__pyx_t_7cartopy_5trace_Point const &__pyx_v_point, GEOSPreparedGeometry const *__pyx_v_gp_domain, GEOSContextHandle_t __pyx_v_handle) {
  enum __pyx_t_7cartopy_5trace_State __pyx_v_state;
  GEOSCoordSequence *__pyx_v_coords;
  GEOSGeometry *__pyx_v_g_point;
  enum __pyx_t_7cartopy_5trace_State __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  enum __pyx_t_7cartopy_5trace_State __pyx_t_3;
  __Pyx_RefNannySetupContext("get_state", 0);
  __Pyx_TraceCall("get_state", __pyx_f[0], 287, 0, __PYX_ERR(0, 287, __pyx_L1_error));

  /* "cartopy/trace.pyx":293
 *     cdef GEOSGeometry *g_point
 * 
 *     if isfinite(point.x) and isfinite(point.y):             # <<<<<<<<<<<<<<
 *         # TODO: Avoid create-destroy
 *         coords = GEOSCoordSeq_create_r(handle, 1, 2)
 */
  __Pyx_TraceLine(293,0,__PYX_ERR(0, 293, __pyx_L1_error))
  __pyx_t_2 = (npy_isfinite(__pyx_v_point.x) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (npy_isfinite(__pyx_v_point.y) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cartopy/trace.pyx":295
 *     if isfinite(point.x) and isfinite(point.y):
 *         # TODO: Avoid create-destroy
 *         coords = GEOSCoordSeq_create_r(handle, 1, 2)             # <<<<<<<<<<<<<<
 *         GEOSCoordSeq_setX_r(handle, coords, 0, point.x)
 *         GEOSCoordSeq_setY_r(handle, coords, 0, point.y)
 */
    __Pyx_TraceLine(295,0,__PYX_ERR(0, 295, __pyx_L1_error))
    __pyx_v_coords = GEOSCoordSeq_create_r(__pyx_v_handle, 1, 2);

    /* "cartopy/trace.pyx":296
 *         # TODO: Avoid create-destroy
 *         coords = GEOSCoordSeq_create_r(handle, 1, 2)
 *         GEOSCoordSeq_setX_r(handle, coords, 0, point.x)             # <<<<<<<<<<<<<<
 *         GEOSCoordSeq_setY_r(handle, coords, 0, point.y)
 *         g_point = GEOSGeom_createPoint_r(handle, coords)
 */
    __Pyx_TraceLine(296,0,__PYX_ERR(0, 296, __pyx_L1_error))
    (void)(GEOSCoordSeq_setX_r(__pyx_v_handle, __pyx_v_coords, 0, __pyx_v_point.x));

    /* "cartopy/trace.pyx":297
 *         coords = GEOSCoordSeq_create_r(handle, 1, 2)
 *         GEOSCoordSeq_setX_r(handle, coords, 0, point.x)
 *         GEOSCoordSeq_setY_r(handle, coords, 0, point.y)             # <<<<<<<<<<<<<<
 *         g_point = GEOSGeom_createPoint_r(handle, coords)
 *         state = (POINT_IN
 */
    __Pyx_TraceLine(297,0,__PYX_ERR(0, 297, __pyx_L1_error))
    (void)(GEOSCoordSeq_setY_r(__pyx_v_handle, __pyx_v_coords, 0, __pyx_v_point.y));

    /* "cartopy/trace.pyx":298
 *         GEOSCoordSeq_setX_r(handle, coords, 0, point.x)
 *         GEOSCoordSeq_setY_r(handle, coords, 0, point.y)
 *         g_point = GEOSGeom_createPoint_r(handle, coords)             # <<<<<<<<<<<<<<
 *         state = (POINT_IN
 *                  if GEOSPreparedCovers_r(handle, gp_domain, g_point)
 */
    __Pyx_TraceLine(298,0,__PYX_ERR(0, 298, __pyx_L1_error))
    __pyx_v_g_point = GEOSGeom_createPoint_r(__pyx_v_handle, __pyx_v_coords);

    /* "cartopy/trace.pyx":300
 *         g_point = GEOSGeom_createPoint_r(handle, coords)
 *         state = (POINT_IN
 *                  if GEOSPreparedCovers_r(handle, gp_domain, g_point)             # <<<<<<<<<<<<<<
 *                  else POINT_OUT)
 *         GEOSGeom_destroy_r(handle, g_point)
 */
    __Pyx_TraceLine(300,0,__PYX_ERR(0, 300, __pyx_L1_error))
    if ((GEOSPreparedCovers_r(__pyx_v_handle, __pyx_v_gp_domain, __pyx_v_g_point) != 0)) {

      /* "cartopy/trace.pyx":299
 *         GEOSCoordSeq_setY_r(handle, coords, 0, point.y)
 *         g_point = GEOSGeom_createPoint_r(handle, coords)
 *         state = (POINT_IN             # <<<<<<<<<<<<<<
 *                  if GEOSPreparedCovers_r(handle, gp_domain, g_point)
 *                  else POINT_OUT)
 */
      __Pyx_TraceLine(299,0,__PYX_ERR(0, 299, __pyx_L1_error))
      __pyx_t_3 = __pyx_e_7cartopy_5trace_POINT_IN;
    } else {

      /* "cartopy/trace.pyx":301
 *         state = (POINT_IN
 *                  if GEOSPreparedCovers_r(handle, gp_domain, g_point)
 *                  else POINT_OUT)             # <<<<<<<<<<<<<<
 *         GEOSGeom_destroy_r(handle, g_point)
 *     else:
 */
      __Pyx_TraceLine(301,0,__PYX_ERR(0, 301, __pyx_L1_error))
      __pyx_t_3 = __pyx_e_7cartopy_5trace_POINT_OUT;
    }
    __pyx_v_state = __pyx_t_3;

    /* "cartopy/trace.pyx":302
 *                  if GEOSPreparedCovers_r(handle, gp_domain, g_point)
 *                  else POINT_OUT)
 *         GEOSGeom_destroy_r(handle, g_point)             # <<<<<<<<<<<<<<
 *     else:
 *         state = POINT_NAN
 */
    __Pyx_TraceLine(302,0,__PYX_ERR(0, 302, __pyx_L1_error))
    GEOSGeom_destroy_r(__pyx_v_handle, __pyx_v_g_point);

    /* "cartopy/trace.pyx":293
 *     cdef GEOSGeometry *g_point
 * 
 *     if isfinite(point.x) and isfinite(point.y):             # <<<<<<<<<<<<<<
 *         # TODO: Avoid create-destroy
 *         coords = GEOSCoordSeq_create_r(handle, 1, 2)
 */
    goto __pyx_L3;
  }

  /* "cartopy/trace.pyx":304
 *         GEOSGeom_destroy_r(handle, g_point)
 *     else:
 *         state = POINT_NAN             # <<<<<<<<<<<<<<
 *     return state
 * 
 */
  __Pyx_TraceLine(304,0,__PYX_ERR(0, 304, __pyx_L1_error))
  /*else*/ {
    __pyx_v_state = __pyx_e_7cartopy_5trace_POINT_NAN;
  }
  __pyx_L3:;

  /* "cartopy/trace.pyx":305
 *     else:
 *         state = POINT_NAN
 *     return state             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(305,0,__PYX_ERR(0, 305, __pyx_L1_error))
  __pyx_r = __pyx_v_state;
  goto __pyx_L0;

  /* "cartopy/trace.pyx":287
 * 
 * 
 * cdef State get_state(const Point &point, const GEOSPreparedGeometry *gp_domain,             # <<<<<<<<<<<<<<
 *                      GEOSContextHandle_t handle):
 *     cdef State state
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cartopy.trace.get_state", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (enum __pyx_t_7cartopy_5trace_State) 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cartopy/trace.pyx":309
 * 
 * @cython.cdivision(True)  # Want divide-by-zero to produce NaN.
 * cdef bool straightAndDomain(double t_start, const Point &p_start,             # <<<<<<<<<<<<<<
 *                             double t_end, const Point &p_end,
 *                             Interpolator interpolator, double threshold,
 */

static bool __pyx_f_7cartopy_5trace_straightAndDomain(double __pyx_v_t_start, __pyx_t_7cartopy_5trace_Point const &__pyx_v_p_start, double __pyx_v_t_end, __pyx_t_7cartopy_5trace_Point const &__pyx_v_p_end, struct __pyx_obj_7cartopy_5trace_Interpolator *__pyx_v_interpolator, double __pyx_v_threshold, GEOSContextHandle_t __pyx_v_handle, GEOSPreparedGeometry const *__pyx_v_gp_domain, bool __pyx_v_inside) {
  bool __pyx_v_valid;
  double __pyx_v_t_mid;
  __pyx_t_7cartopy_5trace_Point __pyx_v_p_mid;
  double __pyx_v_seg_dx;
  double __pyx_v_seg_dy;
  double __pyx_v_mid_dx;
  double __pyx_v_mid_dy;
  double __pyx_v_seg_hypot_sq;
  double __pyx_v_along;
  double __pyx_v_separation;
  double __pyx_v_hypot;
  GEOSCoordSequence *__pyx_v_coords;
  GEOSGeometry *__pyx_v_g_segment;
  bool __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("straightAndDomain", 0);
  __Pyx_TraceCall("straightAndDomain", __pyx_f[0], 309, 0, __PYX_ERR(0, 309, __pyx_L1_error));

  /* "cartopy/trace.pyx":344
 * 
 *     # This could be optimised out of the loop.
 *     if not (isfinite(p_start.x) and isfinite(p_start.y)):             # <<<<<<<<<<<<<<
 *         valid = False
 *     elif not (isfinite(p_end.x) and isfinite(p_end.y)):
 */
  __Pyx_TraceLine(344,0,__PYX_ERR(0, 344, __pyx_L1_error))
  __pyx_t_2 = (npy_isfinite(__pyx_v_p_start.x) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (npy_isfinite(__pyx_v_p_start.y) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "cartopy/trace.pyx":345
 *     # This could be optimised out of the loop.
 *     if not (isfinite(p_start.x) and isfinite(p_start.y)):
 *         valid = False             # <<<<<<<<<<<<<<
 *     elif not (isfinite(p_end.x) and isfinite(p_end.y)):
 *         valid = False
 */
    __Pyx_TraceLine(345,0,__PYX_ERR(0, 345, __pyx_L1_error))
    __pyx_v_valid = 0;

    /* "cartopy/trace.pyx":344
 * 
 *     # This could be optimised out of the loop.
 *     if not (isfinite(p_start.x) and isfinite(p_start.y)):             # <<<<<<<<<<<<<<
 *         valid = False
 *     elif not (isfinite(p_end.x) and isfinite(p_end.y)):
 */
    goto __pyx_L3;
  }

  /* "cartopy/trace.pyx":346
 *     if not (isfinite(p_start.x) and isfinite(p_start.y)):
 *         valid = False
 *     elif not (isfinite(p_end.x) and isfinite(p_end.y)):             # <<<<<<<<<<<<<<
 *         valid = False
 *     else:
 */
  __Pyx_TraceLine(346,0,__PYX_ERR(0, 346, __pyx_L1_error))
  __pyx_t_1 = (npy_isfinite(__pyx_v_p_end.x) != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_1 = (npy_isfinite(__pyx_v_p_end.y) != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L6_bool_binop_done:;
  __pyx_t_1 = ((!__pyx_t_2) != 0);
  if (__pyx_t_1) {

    /* "cartopy/trace.pyx":347
 *         valid = False
 *     elif not (isfinite(p_end.x) and isfinite(p_end.y)):
 *         valid = False             # <<<<<<<<<<<<<<
 *     else:
 *         # Find the projected mid-point
 */
    __Pyx_TraceLine(347,0,__PYX_ERR(0, 347, __pyx_L1_error))
    __pyx_v_valid = 0;

    /* "cartopy/trace.pyx":346
 *     if not (isfinite(p_start.x) and isfinite(p_start.y)):
 *         valid = False
 *     elif not (isfinite(p_end.x) and isfinite(p_end.y)):             # <<<<<<<<<<<<<<
 *         valid = False
 *     else:
 */
    goto __pyx_L3;
  }

  /* "cartopy/trace.pyx":350
 *     else:
 *         # Find the projected mid-point
 *         t_mid = (t_start + t_end) * 0.5             # <<<<<<<<<<<<<<
 *         p_mid = interpolator.interpolate(t_mid)
 * 
 */
  __Pyx_TraceLine(350,0,__PYX_ERR(0, 350, __pyx_L1_error))
  /*else*/ {
    __pyx_v_t_mid = ((__pyx_v_t_start + __pyx_v_t_end) * 0.5);

    /* "cartopy/trace.pyx":351
 *         # Find the projected mid-point
 *         t_mid = (t_start + t_end) * 0.5
 *         p_mid = interpolator.interpolate(t_mid)             # <<<<<<<<<<<<<<
 * 
 *         # Determine the closest point on the segment to the midpoint, in
 */
    __Pyx_TraceLine(351,0,__PYX_ERR(0, 351, __pyx_L1_error))
    __pyx_v_p_mid = ((struct __pyx_vtabstruct_7cartopy_5trace_Interpolator *)__pyx_v_interpolator->__pyx_vtab)->interpolate(__pyx_v_interpolator, __pyx_v_t_mid);

    /* "cartopy/trace.pyx":380
 *         # following equations (with a slight refactoring to reuse some
 *         # intermediate values):
 *         seg_dx = p_end.x - p_start.x             # <<<<<<<<<<<<<<
 *         seg_dy = p_end.y - p_start.y
 *         mid_dx = p_mid.x - p_start.x
 */
    __Pyx_TraceLine(380,0,__PYX_ERR(0, 380, __pyx_L1_error))
    __pyx_v_seg_dx = (__pyx_v_p_end.x - __pyx_v_p_start.x);

    /* "cartopy/trace.pyx":381
 *         # intermediate values):
 *         seg_dx = p_end.x - p_start.x
 *         seg_dy = p_end.y - p_start.y             # <<<<<<<<<<<<<<
 *         mid_dx = p_mid.x - p_start.x
 *         mid_dy = p_mid.y - p_start.y
 */
    __Pyx_TraceLine(381,0,__PYX_ERR(0, 381, __pyx_L1_error))
    __pyx_v_seg_dy = (__pyx_v_p_end.y - __pyx_v_p_start.y);

    /* "cartopy/trace.pyx":382
 *         seg_dx = p_end.x - p_start.x
 *         seg_dy = p_end.y - p_start.y
 *         mid_dx = p_mid.x - p_start.x             # <<<<<<<<<<<<<<
 *         mid_dy = p_mid.y - p_start.y
 *         seg_hypot_sq = seg_dx*seg_dx + seg_dy*seg_dy
 */
    __Pyx_TraceLine(382,0,__PYX_ERR(0, 382, __pyx_L1_error))
    __pyx_v_mid_dx = (__pyx_v_p_mid.x - __pyx_v_p_start.x);

    /* "cartopy/trace.pyx":383
 *         seg_dy = p_end.y - p_start.y
 *         mid_dx = p_mid.x - p_start.x
 *         mid_dy = p_mid.y - p_start.y             # <<<<<<<<<<<<<<
 *         seg_hypot_sq = seg_dx*seg_dx + seg_dy*seg_dy
 * 
 */
    __Pyx_TraceLine(383,0,__PYX_ERR(0, 383, __pyx_L1_error))
    __pyx_v_mid_dy = (__pyx_v_p_mid.y - __pyx_v_p_start.y);

    /* "cartopy/trace.pyx":384
 *         mid_dx = p_mid.x - p_start.x
 *         mid_dy = p_mid.y - p_start.y
 *         seg_hypot_sq = seg_dx*seg_dx + seg_dy*seg_dy             # <<<<<<<<<<<<<<
 * 
 *         along = (seg_dx*mid_dx + seg_dy*mid_dy) / seg_hypot_sq
 */
    __Pyx_TraceLine(384,0,__PYX_ERR(0, 384, __pyx_L1_error))
    __pyx_v_seg_hypot_sq = ((__pyx_v_seg_dx * __pyx_v_seg_dx) + (__pyx_v_seg_dy * __pyx_v_seg_dy));

    /* "cartopy/trace.pyx":386
 *         seg_hypot_sq = seg_dx*seg_dx + seg_dy*seg_dy
 * 
 *         along = (seg_dx*mid_dx + seg_dy*mid_dy) / seg_hypot_sq             # <<<<<<<<<<<<<<
 * 
 *         if isnan(along):
 */
    __Pyx_TraceLine(386,0,__PYX_ERR(0, 386, __pyx_L1_error))
    __pyx_v_along = (((__pyx_v_seg_dx * __pyx_v_mid_dx) + (__pyx_v_seg_dy * __pyx_v_mid_dy)) / __pyx_v_seg_hypot_sq);

    /* "cartopy/trace.pyx":388
 *         along = (seg_dx*mid_dx + seg_dy*mid_dy) / seg_hypot_sq
 * 
 *         if isnan(along):             # <<<<<<<<<<<<<<
 *             valid = True
 *         else:
 */
    __Pyx_TraceLine(388,0,__PYX_ERR(0, 388, __pyx_L1_error))
    __pyx_t_1 = (npy_isnan(__pyx_v_along) != 0);
    if (__pyx_t_1) {

      /* "cartopy/trace.pyx":389
 * 
 *         if isnan(along):
 *             valid = True             # <<<<<<<<<<<<<<
 *         else:
 *             valid = 0.0 < along < 1.0
 */
      __Pyx_TraceLine(389,0,__PYX_ERR(0, 389, __pyx_L1_error))
      __pyx_v_valid = 1;

      /* "cartopy/trace.pyx":388
 *         along = (seg_dx*mid_dx + seg_dy*mid_dy) / seg_hypot_sq
 * 
 *         if isnan(along):             # <<<<<<<<<<<<<<
 *             valid = True
 *         else:
 */
      goto __pyx_L8;
    }

    /* "cartopy/trace.pyx":391
 *             valid = True
 *         else:
 *             valid = 0.0 < along < 1.0             # <<<<<<<<<<<<<<
 *             if valid:
 *                 # For the distance of the point from the line segment, using
 */
    __Pyx_TraceLine(391,0,__PYX_ERR(0, 391, __pyx_L1_error))
    /*else*/ {
      __pyx_t_1 = (0.0 < __pyx_v_along);
      if (__pyx_t_1) {
        __pyx_t_1 = (__pyx_v_along < 1.0);
      }
      __pyx_v_valid = __pyx_t_1;

      /* "cartopy/trace.pyx":392
 *         else:
 *             valid = 0.0 < along < 1.0
 *             if valid:             # <<<<<<<<<<<<<<
 *                 # For the distance of the point from the line segment, using
 *                 # the same geometry above, use sin instead of cos:
 */
      __Pyx_TraceLine(392,0,__PYX_ERR(0, 392, __pyx_L1_error))
      __pyx_t_1 = (__pyx_v_valid != 0);
      if (__pyx_t_1) {

        /* "cartopy/trace.pyx":397
 *                 #     D = hypot(x - x0, y - y0) * sin()
 *                 # and then simplify with SymPy again:
 *                 separation = (abs(mid_dx*seg_dy - mid_dy*seg_dx) /             # <<<<<<<<<<<<<<
 *                               sqrt(seg_hypot_sq))
 *                 if inside:
 */
        __Pyx_TraceLine(397,0,__PYX_ERR(0, 397, __pyx_L1_error))
        __pyx_v_separation = (fabs(((__pyx_v_mid_dx * __pyx_v_seg_dy) - (__pyx_v_mid_dy * __pyx_v_seg_dx))) / sqrt(__pyx_v_seg_hypot_sq));

        /* "cartopy/trace.pyx":399
 *                 separation = (abs(mid_dx*seg_dy - mid_dy*seg_dx) /
 *                               sqrt(seg_hypot_sq))
 *                 if inside:             # <<<<<<<<<<<<<<
 *                     # Scale the lateral threshold by the distance from
 *                     # the nearest end. I.e. Near the ends the lateral
 */
        __Pyx_TraceLine(399,0,__PYX_ERR(0, 399, __pyx_L1_error))
        __pyx_t_1 = (__pyx_v_inside != 0);
        if (__pyx_t_1) {

          /* "cartopy/trace.pyx":405
 *                     # value in the middle.
 *                     valid = (separation <=
 *                              threshold * 2.0 * (0.5 - abs(0.5 - along)))             # <<<<<<<<<<<<<<
 *                 else:
 *                     # Check if the mid-point makes less than ~11 degree
 */
          __Pyx_TraceLine(405,0,__PYX_ERR(0, 405, __pyx_L1_error))
          __pyx_v_valid = (__pyx_v_separation <= ((__pyx_v_threshold * 2.0) * (0.5 - fabs((0.5 - __pyx_v_along)))));

          /* "cartopy/trace.pyx":399
 *                 separation = (abs(mid_dx*seg_dy - mid_dy*seg_dx) /
 *                               sqrt(seg_hypot_sq))
 *                 if inside:             # <<<<<<<<<<<<<<
 *                     # Scale the lateral threshold by the distance from
 *                     # the nearest end. I.e. Near the ends the lateral
 */
          goto __pyx_L10;
        }

        /* "cartopy/trace.pyx":413
 *                     # the lengths, hence:
 *                     # 0.2 ^ 2 => 0.04
 *                     hypot = mid_dx*mid_dx + mid_dy*mid_dy             # <<<<<<<<<<<<<<
 *                     valid = ((separation * separation) / hypot) < 0.04
 * 
 */
        __Pyx_TraceLine(413,0,__PYX_ERR(0, 413, __pyx_L1_error))
        /*else*/ {
          __pyx_v_hypot = ((__pyx_v_mid_dx * __pyx_v_mid_dx) + (__pyx_v_mid_dy * __pyx_v_mid_dy));

          /* "cartopy/trace.pyx":414
 *                     # 0.2 ^ 2 => 0.04
 *                     hypot = mid_dx*mid_dx + mid_dy*mid_dy
 *                     valid = ((separation * separation) / hypot) < 0.04             # <<<<<<<<<<<<<<
 * 
 *         if valid:
 */
          __Pyx_TraceLine(414,0,__PYX_ERR(0, 414, __pyx_L1_error))
          __pyx_v_valid = (((__pyx_v_separation * __pyx_v_separation) / __pyx_v_hypot) < 0.04);
        }
        __pyx_L10:;

        /* "cartopy/trace.pyx":392
 *         else:
 *             valid = 0.0 < along < 1.0
 *             if valid:             # <<<<<<<<<<<<<<
 *                 # For the distance of the point from the line segment, using
 *                 # the same geometry above, use sin instead of cos:
 */
      }
    }
    __pyx_L8:;

    /* "cartopy/trace.pyx":416
 *                     valid = ((separation * separation) / hypot) < 0.04
 * 
 *         if valid:             # <<<<<<<<<<<<<<
 *             # TODO: Re-use geometries, instead of create-destroy!
 * 
 */
    __Pyx_TraceLine(416,0,__PYX_ERR(0, 416, __pyx_L1_error))
    __pyx_t_1 = (__pyx_v_valid != 0);
    if (__pyx_t_1) {

      /* "cartopy/trace.pyx":420
 * 
 *             # Create a LineString for the current end-point.
 *             coords = GEOSCoordSeq_create_r(handle, 2, 2)             # <<<<<<<<<<<<<<
 *             GEOSCoordSeq_setX_r(handle, coords, 0, p_start.x)
 *             GEOSCoordSeq_setY_r(handle, coords, 0, p_start.y)
 */
      __Pyx_TraceLine(420,0,__PYX_ERR(0, 420, __pyx_L1_error))
      __pyx_v_coords = GEOSCoordSeq_create_r(__pyx_v_handle, 2, 2);

      /* "cartopy/trace.pyx":421
 *             # Create a LineString for the current end-point.
 *             coords = GEOSCoordSeq_create_r(handle, 2, 2)
 *             GEOSCoordSeq_setX_r(handle, coords, 0, p_start.x)             # <<<<<<<<<<<<<<
 *             GEOSCoordSeq_setY_r(handle, coords, 0, p_start.y)
 *             GEOSCoordSeq_setX_r(handle, coords, 1, p_end.x)
 */
      __Pyx_TraceLine(421,0,__PYX_ERR(0, 421, __pyx_L1_error))
      (void)(GEOSCoordSeq_setX_r(__pyx_v_handle, __pyx_v_coords, 0, __pyx_v_p_start.x));

      /* "cartopy/trace.pyx":422
 *             coords = GEOSCoordSeq_create_r(handle, 2, 2)
 *             GEOSCoordSeq_setX_r(handle, coords, 0, p_start.x)
 *             GEOSCoordSeq_setY_r(handle, coords, 0, p_start.y)             # <<<<<<<<<<<<<<
 *             GEOSCoordSeq_setX_r(handle, coords, 1, p_end.x)
 *             GEOSCoordSeq_setY_r(handle, coords, 1, p_end.y)
 */
      __Pyx_TraceLine(422,0,__PYX_ERR(0, 422, __pyx_L1_error))
      (void)(GEOSCoordSeq_setY_r(__pyx_v_handle, __pyx_v_coords, 0, __pyx_v_p_start.y));

      /* "cartopy/trace.pyx":423
 *             GEOSCoordSeq_setX_r(handle, coords, 0, p_start.x)
 *             GEOSCoordSeq_setY_r(handle, coords, 0, p_start.y)
 *             GEOSCoordSeq_setX_r(handle, coords, 1, p_end.x)             # <<<<<<<<<<<<<<
 *             GEOSCoordSeq_setY_r(handle, coords, 1, p_end.y)
 *             g_segment = GEOSGeom_createLineString_r(handle, coords)
 */
      __Pyx_TraceLine(423,0,__PYX_ERR(0, 423, __pyx_L1_error))
      (void)(GEOSCoordSeq_setX_r(__pyx_v_handle, __pyx_v_coords, 1, __pyx_v_p_end.x));

      /* "cartopy/trace.pyx":424
 *             GEOSCoordSeq_setY_r(handle, coords, 0, p_start.y)
 *             GEOSCoordSeq_setX_r(handle, coords, 1, p_end.x)
 *             GEOSCoordSeq_setY_r(handle, coords, 1, p_end.y)             # <<<<<<<<<<<<<<
 *             g_segment = GEOSGeom_createLineString_r(handle, coords)
 * 
 */
      __Pyx_TraceLine(424,0,__PYX_ERR(0, 424, __pyx_L1_error))
      (void)(GEOSCoordSeq_setY_r(__pyx_v_handle, __pyx_v_coords, 1, __pyx_v_p_end.y));

      /* "cartopy/trace.pyx":425
 *             GEOSCoordSeq_setX_r(handle, coords, 1, p_end.x)
 *             GEOSCoordSeq_setY_r(handle, coords, 1, p_end.y)
 *             g_segment = GEOSGeom_createLineString_r(handle, coords)             # <<<<<<<<<<<<<<
 * 
 *             if inside:
 */
      __Pyx_TraceLine(425,0,__PYX_ERR(0, 425, __pyx_L1_error))
      __pyx_v_g_segment = GEOSGeom_createLineString_r(__pyx_v_handle, __pyx_v_coords);

      /* "cartopy/trace.pyx":427
 *             g_segment = GEOSGeom_createLineString_r(handle, coords)
 * 
 *             if inside:             # <<<<<<<<<<<<<<
 *                 valid = GEOSPreparedCovers_r(handle, gp_domain, g_segment)
 *             else:
 */
      __Pyx_TraceLine(427,0,__PYX_ERR(0, 427, __pyx_L1_error))
      __pyx_t_1 = (__pyx_v_inside != 0);
      if (__pyx_t_1) {

        /* "cartopy/trace.pyx":428
 * 
 *             if inside:
 *                 valid = GEOSPreparedCovers_r(handle, gp_domain, g_segment)             # <<<<<<<<<<<<<<
 *             else:
 *                 valid = GEOSPreparedDisjoint_r(handle, gp_domain, g_segment)
 */
        __Pyx_TraceLine(428,0,__PYX_ERR(0, 428, __pyx_L1_error))
        __pyx_v_valid = GEOSPreparedCovers_r(__pyx_v_handle, __pyx_v_gp_domain, __pyx_v_g_segment);

        /* "cartopy/trace.pyx":427
 *             g_segment = GEOSGeom_createLineString_r(handle, coords)
 * 
 *             if inside:             # <<<<<<<<<<<<<<
 *                 valid = GEOSPreparedCovers_r(handle, gp_domain, g_segment)
 *             else:
 */
        goto __pyx_L12;
      }

      /* "cartopy/trace.pyx":430
 *                 valid = GEOSPreparedCovers_r(handle, gp_domain, g_segment)
 *             else:
 *                 valid = GEOSPreparedDisjoint_r(handle, gp_domain, g_segment)             # <<<<<<<<<<<<<<
 * 
 *             GEOSGeom_destroy_r(handle, g_segment)
 */
      __Pyx_TraceLine(430,0,__PYX_ERR(0, 430, __pyx_L1_error))
      /*else*/ {
        __pyx_v_valid = GEOSPreparedDisjoint_r(__pyx_v_handle, __pyx_v_gp_domain, __pyx_v_g_segment);
      }
      __pyx_L12:;

      /* "cartopy/trace.pyx":432
 *                 valid = GEOSPreparedDisjoint_r(handle, gp_domain, g_segment)
 * 
 *             GEOSGeom_destroy_r(handle, g_segment)             # <<<<<<<<<<<<<<
 * 
 *     return valid
 */
      __Pyx_TraceLine(432,0,__PYX_ERR(0, 432, __pyx_L1_error))
      GEOSGeom_destroy_r(__pyx_v_handle, __pyx_v_g_segment);

      /* "cartopy/trace.pyx":416
 *                     valid = ((separation * separation) / hypot) < 0.04
 * 
 *         if valid:             # <<<<<<<<<<<<<<
 *             # TODO: Re-use geometries, instead of create-destroy!
 * 
 */
    }
  }
  __pyx_L3:;

  /* "cartopy/trace.pyx":434
 *             GEOSGeom_destroy_r(handle, g_segment)
 * 
 *     return valid             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(434,0,__PYX_ERR(0, 434, __pyx_L1_error))
  __pyx_r = __pyx_v_valid;
  goto __pyx_L0;

  /* "cartopy/trace.pyx":309
 * 
 * @cython.cdivision(True)  # Want divide-by-zero to produce NaN.
 * cdef bool straightAndDomain(double t_start, const Point &p_start,             # <<<<<<<<<<<<<<
 *                             double t_end, const Point &p_end,
 *                             Interpolator interpolator, double threshold,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cartopy.trace.straightAndDomain", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cartopy/trace.pyx":437
 * 
 * 
 * cdef void bisect(double t_start, const Point &p_start, const Point &p_end,             # <<<<<<<<<<<<<<
 *                  GEOSContextHandle_t handle,
 *                  const GEOSPreparedGeometry *gp_domain, const State &state,
 */

static void __pyx_f_7cartopy_5trace_bisect(double __pyx_v_t_start, __pyx_t_7cartopy_5trace_Point const &__pyx_v_p_start, __pyx_t_7cartopy_5trace_Point const &__pyx_v_p_end, GEOSContextHandle_t __pyx_v_handle, GEOSPreparedGeometry const *__pyx_v_gp_domain, enum __pyx_t_7cartopy_5trace_State const &__pyx_v_state, struct __pyx_obj_7cartopy_5trace_Interpolator *__pyx_v_interpolator, double __pyx_v_threshold, double &__pyx_v_t_min, __pyx_t_7cartopy_5trace_Point &__pyx_v_p_min, double &__pyx_v_t_max, __pyx_t_7cartopy_5trace_Point &__pyx_v_p_max) {
  double __pyx_v_t_current;
  __pyx_t_7cartopy_5trace_Point __pyx_v_p_current;
  bool __pyx_v_valid;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  bool __pyx_t_4;
  __Pyx_RefNannySetupContext("bisect", 0);
  __Pyx_TraceCall("bisect", __pyx_f[0], 437, 0, __PYX_ERR(0, 437, __pyx_L1_error));

  /* "cartopy/trace.pyx":447
 * 
 *     # Initialise our bisection range to the start and end points.
 *     (&t_min)[0] = t_start             # <<<<<<<<<<<<<<
 *     (&p_min)[0] = p_start
 *     (&t_max)[0] = 1.0
 */
  __Pyx_TraceLine(447,0,__PYX_ERR(0, 447, __pyx_L1_error))
  ((&__pyx_v_t_min)[0]) = __pyx_v_t_start;

  /* "cartopy/trace.pyx":448
 *     # Initialise our bisection range to the start and end points.
 *     (&t_min)[0] = t_start
 *     (&p_min)[0] = p_start             # <<<<<<<<<<<<<<
 *     (&t_max)[0] = 1.0
 *     (&p_max)[0] = p_end
 */
  __Pyx_TraceLine(448,0,__PYX_ERR(0, 448, __pyx_L1_error))
  ((&__pyx_v_p_min)[0]) = __pyx_v_p_start;

  /* "cartopy/trace.pyx":449
 *     (&t_min)[0] = t_start
 *     (&p_min)[0] = p_start
 *     (&t_max)[0] = 1.0             # <<<<<<<<<<<<<<
 *     (&p_max)[0] = p_end
 * 
 */
  __Pyx_TraceLine(449,0,__PYX_ERR(0, 449, __pyx_L1_error))
  ((&__pyx_v_t_max)[0]) = 1.0;

  /* "cartopy/trace.pyx":450
 *     (&p_min)[0] = p_start
 *     (&t_max)[0] = 1.0
 *     (&p_max)[0] = p_end             # <<<<<<<<<<<<<<
 * 
 *     # Start the search at the end.
 */
  __Pyx_TraceLine(450,0,__PYX_ERR(0, 450, __pyx_L1_error))
  ((&__pyx_v_p_max)[0]) = __pyx_v_p_end;

  /* "cartopy/trace.pyx":453
 * 
 *     # Start the search at the end.
 *     t_current = t_max             # <<<<<<<<<<<<<<
 *     p_current = p_max
 * 
 */
  __Pyx_TraceLine(453,0,__PYX_ERR(0, 453, __pyx_L1_error))
  __pyx_v_t_current = __pyx_v_t_max;

  /* "cartopy/trace.pyx":454
 *     # Start the search at the end.
 *     t_current = t_max
 *     p_current = p_max             # <<<<<<<<<<<<<<
 * 
 *     # TODO: See if we can convert the 't' threshold into one based on the
 */
  __Pyx_TraceLine(454,0,__PYX_ERR(0, 454, __pyx_L1_error))
  __pyx_v_p_current = __pyx_v_p_max;

  /* "cartopy/trace.pyx":459
 *     # projected coordinates - e.g. the resulting line length.
 * 
 *     while abs(t_max - t_min) > 1.0e-6:             # <<<<<<<<<<<<<<
 *         if DEBUG:
 *             print("t: ", t_current)
 */
  __Pyx_TraceLine(459,0,__PYX_ERR(0, 459, __pyx_L1_error))
  while (1) {
    __pyx_t_1 = ((fabs((__pyx_v_t_max - __pyx_v_t_min)) > 1.0e-6) != 0);
    if (!__pyx_t_1) break;

    /* "cartopy/trace.pyx":460
 * 
 *     while abs(t_max - t_min) > 1.0e-6:
 *         if DEBUG:             # <<<<<<<<<<<<<<
 *             print("t: ", t_current)
 * 
 */
    __Pyx_TraceLine(460,0,__PYX_ERR(0, 460, __pyx_L1_error))
    __pyx_t_1 = (__pyx_v_7cartopy_5trace_DEBUG != 0);
    if (__pyx_t_1) {

      /* "cartopy/trace.pyx":461
 *     while abs(t_max - t_min) > 1.0e-6:
 *         if DEBUG:
 *             print("t: ", t_current)             # <<<<<<<<<<<<<<
 * 
 *         if state == POINT_IN:
 */
      __Pyx_TraceLine(461,0,__PYX_ERR(0, 461, __pyx_L1_error))
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_t_current); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 461, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 461, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_kp_s_t);
      __Pyx_GIVEREF(__pyx_kp_s_t);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s_t);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
      __pyx_t_2 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_3) < 0) __PYX_ERR(0, 461, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "cartopy/trace.pyx":460
 * 
 *     while abs(t_max - t_min) > 1.0e-6:
 *         if DEBUG:             # <<<<<<<<<<<<<<
 *             print("t: ", t_current)
 * 
 */
    }

    /* "cartopy/trace.pyx":463
 *             print("t: ", t_current)
 * 
 *         if state == POINT_IN:             # <<<<<<<<<<<<<<
 *             # Straight and entirely-inside-domain
 *             valid = straightAndDomain(t_start, p_start, t_current, p_current,
 */
    __Pyx_TraceLine(463,0,__PYX_ERR(0, 463, __pyx_L1_error))
    switch (__pyx_v_state) {
      case __pyx_e_7cartopy_5trace_POINT_IN:

      /* "cartopy/trace.pyx":465
 *         if state == POINT_IN:
 *             # Straight and entirely-inside-domain
 *             valid = straightAndDomain(t_start, p_start, t_current, p_current,             # <<<<<<<<<<<<<<
 *                                       interpolator, threshold,
 *                                       handle, gp_domain, True)
 */
      __Pyx_TraceLine(465,0,__PYX_ERR(0, 465, __pyx_L1_error))
      __pyx_v_valid = __pyx_f_7cartopy_5trace_straightAndDomain(__pyx_v_t_start, __pyx_v_p_start, __pyx_v_t_current, __pyx_v_p_current, __pyx_v_interpolator, __pyx_v_threshold, __pyx_v_handle, __pyx_v_gp_domain, 1);

      /* "cartopy/trace.pyx":463
 *             print("t: ", t_current)
 * 
 *         if state == POINT_IN:             # <<<<<<<<<<<<<<
 *             # Straight and entirely-inside-domain
 *             valid = straightAndDomain(t_start, p_start, t_current, p_current,
 */
      break;
      case __pyx_e_7cartopy_5trace_POINT_OUT:

      /* "cartopy/trace.pyx":471
 *         elif state == POINT_OUT:
 *             # Straight and entirely-outside-domain
 *             valid = straightAndDomain(t_start, p_start, t_current, p_current,             # <<<<<<<<<<<<<<
 *                                       interpolator, threshold,
 *                                       handle, gp_domain, False)
 */
      __Pyx_TraceLine(471,0,__PYX_ERR(0, 471, __pyx_L1_error))
      __pyx_v_valid = __pyx_f_7cartopy_5trace_straightAndDomain(__pyx_v_t_start, __pyx_v_p_start, __pyx_v_t_current, __pyx_v_p_current, __pyx_v_interpolator, __pyx_v_threshold, __pyx_v_handle, __pyx_v_gp_domain, 0);

      /* "cartopy/trace.pyx":469
 *                                       handle, gp_domain, True)
 * 
 *         elif state == POINT_OUT:             # <<<<<<<<<<<<<<
 *             # Straight and entirely-outside-domain
 *             valid = straightAndDomain(t_start, p_start, t_current, p_current,
 */
      break;
      default:

      /* "cartopy/trace.pyx":475
 *                                       handle, gp_domain, False)
 *         else:
 *             valid = not isfinite(p_current.x) or not isfinite(p_current.y)             # <<<<<<<<<<<<<<
 * 
 *         if DEBUG:
 */
      __Pyx_TraceLine(475,0,__PYX_ERR(0, 475, __pyx_L1_error))
      __pyx_t_1 = (!(npy_isfinite(__pyx_v_p_current.x) != 0));
      if (!__pyx_t_1) {
      } else {
        __pyx_t_4 = __pyx_t_1;
        goto __pyx_L6_bool_binop_done;
      }
      __pyx_t_1 = (!(npy_isfinite(__pyx_v_p_current.y) != 0));
      __pyx_t_4 = __pyx_t_1;
      __pyx_L6_bool_binop_done:;
      __pyx_v_valid = __pyx_t_4;
      break;
    }

    /* "cartopy/trace.pyx":477
 *             valid = not isfinite(p_current.x) or not isfinite(p_current.y)
 * 
 *         if DEBUG:             # <<<<<<<<<<<<<<
 *             print("   => valid: ", valid)
 * 
 */
    __Pyx_TraceLine(477,0,__PYX_ERR(0, 477, __pyx_L1_error))
    __pyx_t_1 = (__pyx_v_7cartopy_5trace_DEBUG != 0);
    if (__pyx_t_1) {

      /* "cartopy/trace.pyx":478
 * 
 *         if DEBUG:
 *             print("   => valid: ", valid)             # <<<<<<<<<<<<<<
 * 
 *         if valid:
 */
      __Pyx_TraceLine(478,0,__PYX_ERR(0, 478, __pyx_L1_error))
      __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_valid); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 478, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 478, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_kp_s_valid);
      __Pyx_GIVEREF(__pyx_kp_s_valid);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_valid);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
      __pyx_t_3 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 478, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "cartopy/trace.pyx":477
 *             valid = not isfinite(p_current.x) or not isfinite(p_current.y)
 * 
 *         if DEBUG:             # <<<<<<<<<<<<<<
 *             print("   => valid: ", valid)
 * 
 */
    }

    /* "cartopy/trace.pyx":480
 *             print("   => valid: ", valid)
 * 
 *         if valid:             # <<<<<<<<<<<<<<
 *             (&t_min)[0] = t_current
 *             (&p_min)[0] = p_current
 */
    __Pyx_TraceLine(480,0,__PYX_ERR(0, 480, __pyx_L1_error))
    __pyx_t_1 = (__pyx_v_valid != 0);
    if (__pyx_t_1) {

      /* "cartopy/trace.pyx":481
 * 
 *         if valid:
 *             (&t_min)[0] = t_current             # <<<<<<<<<<<<<<
 *             (&p_min)[0] = p_current
 *         else:
 */
      __Pyx_TraceLine(481,0,__PYX_ERR(0, 481, __pyx_L1_error))
      ((&__pyx_v_t_min)[0]) = __pyx_v_t_current;

      /* "cartopy/trace.pyx":482
 *         if valid:
 *             (&t_min)[0] = t_current
 *             (&p_min)[0] = p_current             # <<<<<<<<<<<<<<
 *         else:
 *             (&t_max)[0] = t_current
 */
      __Pyx_TraceLine(482,0,__PYX_ERR(0, 482, __pyx_L1_error))
      ((&__pyx_v_p_min)[0]) = __pyx_v_p_current;

      /* "cartopy/trace.pyx":480
 *             print("   => valid: ", valid)
 * 
 *         if valid:             # <<<<<<<<<<<<<<
 *             (&t_min)[0] = t_current
 *             (&p_min)[0] = p_current
 */
      goto __pyx_L9;
    }

    /* "cartopy/trace.pyx":484
 *             (&p_min)[0] = p_current
 *         else:
 *             (&t_max)[0] = t_current             # <<<<<<<<<<<<<<
 *             (&p_max)[0] = p_current
 * 
 */
    __Pyx_TraceLine(484,0,__PYX_ERR(0, 484, __pyx_L1_error))
    /*else*/ {
      ((&__pyx_v_t_max)[0]) = __pyx_v_t_current;

      /* "cartopy/trace.pyx":485
 *         else:
 *             (&t_max)[0] = t_current
 *             (&p_max)[0] = p_current             # <<<<<<<<<<<<<<
 * 
 *         t_current = (t_min + t_max) * 0.5
 */
      __Pyx_TraceLine(485,0,__PYX_ERR(0, 485, __pyx_L1_error))
      ((&__pyx_v_p_max)[0]) = __pyx_v_p_current;
    }
    __pyx_L9:;

    /* "cartopy/trace.pyx":487
 *             (&p_max)[0] = p_current
 * 
 *         t_current = (t_min + t_max) * 0.5             # <<<<<<<<<<<<<<
 *         p_current = interpolator.interpolate(t_current)
 * 
 */
    __Pyx_TraceLine(487,0,__PYX_ERR(0, 487, __pyx_L1_error))
    __pyx_v_t_current = ((__pyx_v_t_min + __pyx_v_t_max) * 0.5);

    /* "cartopy/trace.pyx":488
 * 
 *         t_current = (t_min + t_max) * 0.5
 *         p_current = interpolator.interpolate(t_current)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_TraceLine(488,0,__PYX_ERR(0, 488, __pyx_L1_error))
    __pyx_v_p_current = ((struct __pyx_vtabstruct_7cartopy_5trace_Interpolator *)__pyx_v_interpolator->__pyx_vtab)->interpolate(__pyx_v_interpolator, __pyx_v_t_current);
  }

  /* "cartopy/trace.pyx":437
 * 
 * 
 * cdef void bisect(double t_start, const Point &p_start, const Point &p_end,             # <<<<<<<<<<<<<<
 *                  GEOSContextHandle_t handle,
 *                  const GEOSPreparedGeometry *gp_domain, const State &state,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("cartopy.trace.bisect", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "cartopy/trace.pyx":491
 * 
 * 
 * cdef void _project_segment(GEOSContextHandle_t handle,             # <<<<<<<<<<<<<<
 *                            const GEOSCoordSequence *src_coords,
 *                            unsigned int src_idx_from, unsigned int src_idx_to,
 */

static void __pyx_f_7cartopy_5trace__project_segment(GEOSContextHandle_t __pyx_v_handle, GEOSCoordSequence const *__pyx_v_src_coords, unsigned int __pyx_v_src_idx_from, unsigned int __pyx_v_src_idx_to, struct __pyx_obj_7cartopy_5trace_Interpolator *__pyx_v_interpolator, GEOSPreparedGeometry const *__pyx_v_gp_domain, double __pyx_v_threshold, struct __pyx_obj_7cartopy_5trace_LineAccumulator *__pyx_v_lines) {
  __pyx_t_7cartopy_5trace_Point __pyx_v_p_current;
  __pyx_t_7cartopy_5trace_Point __pyx_v_p_min;
  __pyx_t_7cartopy_5trace_Point __pyx_v_p_max;
  __pyx_t_7cartopy_5trace_Point __pyx_v_p_end;
  double __pyx_v_t_current;
  double __pyx_v_t_min;
  double __pyx_v_t_max;
  enum __pyx_t_7cartopy_5trace_State __pyx_v_state;
  size_t __pyx_v_old_lines_size;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("_project_segment", 0);
  __Pyx_TraceCall("_project_segment", __pyx_f[0], 491, 0, __PYX_ERR(0, 491, __pyx_L1_error));

  /* "cartopy/trace.pyx":501
 *     cdef State state
 * 
 *     GEOSCoordSeq_getX_r(handle, src_coords, src_idx_from, &p_current.x)             # <<<<<<<<<<<<<<
 *     GEOSCoordSeq_getY_r(handle, src_coords, src_idx_from, &p_current.y)
 *     GEOSCoordSeq_getX_r(handle, src_coords, src_idx_to, &p_end.x)
 */
  __Pyx_TraceLine(501,0,__PYX_ERR(0, 501, __pyx_L1_error))
  (void)(GEOSCoordSeq_getX_r(__pyx_v_handle, __pyx_v_src_coords, __pyx_v_src_idx_from, (&__pyx_v_p_current.x)));

  /* "cartopy/trace.pyx":502
 * 
 *     GEOSCoordSeq_getX_r(handle, src_coords, src_idx_from, &p_current.x)
 *     GEOSCoordSeq_getY_r(handle, src_coords, src_idx_from, &p_current.y)             # <<<<<<<<<<<<<<
 *     GEOSCoordSeq_getX_r(handle, src_coords, src_idx_to, &p_end.x)
 *     GEOSCoordSeq_getY_r(handle, src_coords, src_idx_to, &p_end.y)
 */
  __Pyx_TraceLine(502,0,__PYX_ERR(0, 502, __pyx_L1_error))
  (void)(GEOSCoordSeq_getY_r(__pyx_v_handle, __pyx_v_src_coords, __pyx_v_src_idx_from, (&__pyx_v_p_current.y)));

  /* "cartopy/trace.pyx":503
 *     GEOSCoordSeq_getX_r(handle, src_coords, src_idx_from, &p_current.x)
 *     GEOSCoordSeq_getY_r(handle, src_coords, src_idx_from, &p_current.y)
 *     GEOSCoordSeq_getX_r(handle, src_coords, src_idx_to, &p_end.x)             # <<<<<<<<<<<<<<
 *     GEOSCoordSeq_getY_r(handle, src_coords, src_idx_to, &p_end.y)
 *     if DEBUG:
 */
  __Pyx_TraceLine(503,0,__PYX_ERR(0, 503, __pyx_L1_error))
  (void)(GEOSCoordSeq_getX_r(__pyx_v_handle, __pyx_v_src_coords, __pyx_v_src_idx_to, (&__pyx_v_p_end.x)));

  /* "cartopy/trace.pyx":504
 *     GEOSCoordSeq_getY_r(handle, src_coords, src_idx_from, &p_current.y)
 *     GEOSCoordSeq_getX_r(handle, src_coords, src_idx_to, &p_end.x)
 *     GEOSCoordSeq_getY_r(handle, src_coords, src_idx_to, &p_end.y)             # <<<<<<<<<<<<<<
 *     if DEBUG:
 *         print("Setting line:")
 */
  __Pyx_TraceLine(504,0,__PYX_ERR(0, 504, __pyx_L1_error))
  (void)(GEOSCoordSeq_getY_r(__pyx_v_handle, __pyx_v_src_coords, __pyx_v_src_idx_to, (&__pyx_v_p_end.y)));

  /* "cartopy/trace.pyx":505
 *     GEOSCoordSeq_getX_r(handle, src_coords, src_idx_to, &p_end.x)
 *     GEOSCoordSeq_getY_r(handle, src_coords, src_idx_to, &p_end.y)
 *     if DEBUG:             # <<<<<<<<<<<<<<
 *         print("Setting line:")
 *         print("   ", p_current.x, ", ", p_current.y)
 */
  __Pyx_TraceLine(505,0,__PYX_ERR(0, 505, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_7cartopy_5trace_DEBUG != 0);
  if (__pyx_t_1) {

    /* "cartopy/trace.pyx":506
 *     GEOSCoordSeq_getY_r(handle, src_coords, src_idx_to, &p_end.y)
 *     if DEBUG:
 *         print("Setting line:")             # <<<<<<<<<<<<<<
 *         print("   ", p_current.x, ", ", p_current.y)
 *         print("   ", p_end.x, ", ", p_end.y)
 */
    __Pyx_TraceLine(506,0,__PYX_ERR(0, 506, __pyx_L1_error))
    if (__Pyx_PrintOne(0, __pyx_kp_s_Setting_line) < 0) __PYX_ERR(0, 506, __pyx_L1_error)

    /* "cartopy/trace.pyx":507
 *     if DEBUG:
 *         print("Setting line:")
 *         print("   ", p_current.x, ", ", p_current.y)             # <<<<<<<<<<<<<<
 *         print("   ", p_end.x, ", ", p_end.y)
 * 
 */
    __Pyx_TraceLine(507,0,__PYX_ERR(0, 507, __pyx_L1_error))
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_p_current.x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_p_current.y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_kp_s__15);
    __Pyx_GIVEREF(__pyx_kp_s__15);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_s__15);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_kp_s__16);
    __Pyx_GIVEREF(__pyx_kp_s__16);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_s__16);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_3);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(0, 507, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "cartopy/trace.pyx":508
 *         print("Setting line:")
 *         print("   ", p_current.x, ", ", p_current.y)
 *         print("   ", p_end.x, ", ", p_end.y)             # <<<<<<<<<<<<<<
 * 
 *     interpolator.set_line(p_current, p_end)
 */
    __Pyx_TraceLine(508,0,__PYX_ERR(0, 508, __pyx_L1_error))
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_p_end.x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_p_end.y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_kp_s__15);
    __Pyx_GIVEREF(__pyx_kp_s__15);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s__15);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_INCREF(__pyx_kp_s__16);
    __Pyx_GIVEREF(__pyx_kp_s__16);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_s__16);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_3 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cartopy/trace.pyx":505
 *     GEOSCoordSeq_getX_r(handle, src_coords, src_idx_to, &p_end.x)
 *     GEOSCoordSeq_getY_r(handle, src_coords, src_idx_to, &p_end.y)
 *     if DEBUG:             # <<<<<<<<<<<<<<
 *         print("Setting line:")
 *         print("   ", p_current.x, ", ", p_current.y)
 */
  }

  /* "cartopy/trace.pyx":510
 *         print("   ", p_end.x, ", ", p_end.y)
 * 
 *     interpolator.set_line(p_current, p_end)             # <<<<<<<<<<<<<<
 *     p_current = interpolator.project(p_current)
 *     p_end = interpolator.project(p_end)
 */
  __Pyx_TraceLine(510,0,__PYX_ERR(0, 510, __pyx_L1_error))
  ((struct __pyx_vtabstruct_7cartopy_5trace_Interpolator *)__pyx_v_interpolator->__pyx_vtab)->set_line(__pyx_v_interpolator, __pyx_v_p_current, __pyx_v_p_end);

  /* "cartopy/trace.pyx":511
 * 
 *     interpolator.set_line(p_current, p_end)
 *     p_current = interpolator.project(p_current)             # <<<<<<<<<<<<<<
 *     p_end = interpolator.project(p_end)
 *     if DEBUG:
 */
  __Pyx_TraceLine(511,0,__PYX_ERR(0, 511, __pyx_L1_error))
  __pyx_v_p_current = ((struct __pyx_vtabstruct_7cartopy_5trace_Interpolator *)__pyx_v_interpolator->__pyx_vtab)->project(__pyx_v_interpolator, __pyx_v_p_current);

  /* "cartopy/trace.pyx":512
 *     interpolator.set_line(p_current, p_end)
 *     p_current = interpolator.project(p_current)
 *     p_end = interpolator.project(p_end)             # <<<<<<<<<<<<<<
 *     if DEBUG:
 *         print("Projected as:")
 */
  __Pyx_TraceLine(512,0,__PYX_ERR(0, 512, __pyx_L1_error))
  __pyx_v_p_end = ((struct __pyx_vtabstruct_7cartopy_5trace_Interpolator *)__pyx_v_interpolator->__pyx_vtab)->project(__pyx_v_interpolator, __pyx_v_p_end);

  /* "cartopy/trace.pyx":513
 *     p_current = interpolator.project(p_current)
 *     p_end = interpolator.project(p_end)
 *     if DEBUG:             # <<<<<<<<<<<<<<
 *         print("Projected as:")
 *         print("   ", p_current.x, ", ", p_current.y)
 */
  __Pyx_TraceLine(513,0,__PYX_ERR(0, 513, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_7cartopy_5trace_DEBUG != 0);
  if (__pyx_t_1) {

    /* "cartopy/trace.pyx":514
 *     p_end = interpolator.project(p_end)
 *     if DEBUG:
 *         print("Projected as:")             # <<<<<<<<<<<<<<
 *         print("   ", p_current.x, ", ", p_current.y)
 *         print("   ", p_end.x, ", ", p_end.y)
 */
    __Pyx_TraceLine(514,0,__PYX_ERR(0, 514, __pyx_L1_error))
    if (__Pyx_PrintOne(0, __pyx_kp_s_Projected_as) < 0) __PYX_ERR(0, 514, __pyx_L1_error)

    /* "cartopy/trace.pyx":515
 *     if DEBUG:
 *         print("Projected as:")
 *         print("   ", p_current.x, ", ", p_current.y)             # <<<<<<<<<<<<<<
 *         print("   ", p_end.x, ", ", p_end.y)
 * 
 */
    __Pyx_TraceLine(515,0,__PYX_ERR(0, 515, __pyx_L1_error))
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_p_current.x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_p_current.y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_kp_s__15);
    __Pyx_GIVEREF(__pyx_kp_s__15);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_s__15);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_kp_s__16);
    __Pyx_GIVEREF(__pyx_kp_s__16);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_s__16);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_3);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(0, 515, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "cartopy/trace.pyx":516
 *         print("Projected as:")
 *         print("   ", p_current.x, ", ", p_current.y)
 *         print("   ", p_end.x, ", ", p_end.y)             # <<<<<<<<<<<<<<
 * 
 *     t_current = 0.0
 */
    __Pyx_TraceLine(516,0,__PYX_ERR(0, 516, __pyx_L1_error))
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_p_end.x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_p_end.y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_kp_s__15);
    __Pyx_GIVEREF(__pyx_kp_s__15);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s__15);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_INCREF(__pyx_kp_s__16);
    __Pyx_GIVEREF(__pyx_kp_s__16);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_s__16);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_3 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cartopy/trace.pyx":513
 *     p_current = interpolator.project(p_current)
 *     p_end = interpolator.project(p_end)
 *     if DEBUG:             # <<<<<<<<<<<<<<
 *         print("Projected as:")
 *         print("   ", p_current.x, ", ", p_current.y)
 */
  }

  /* "cartopy/trace.pyx":518
 *         print("   ", p_end.x, ", ", p_end.y)
 * 
 *     t_current = 0.0             # <<<<<<<<<<<<<<
 *     state = get_state(p_current, gp_domain, handle)
 * 
 */
  __Pyx_TraceLine(518,0,__PYX_ERR(0, 518, __pyx_L1_error))
  __pyx_v_t_current = 0.0;

  /* "cartopy/trace.pyx":519
 * 
 *     t_current = 0.0
 *     state = get_state(p_current, gp_domain, handle)             # <<<<<<<<<<<<<<
 * 
 *     cdef size_t old_lines_size = lines.size()
 */
  __Pyx_TraceLine(519,0,__PYX_ERR(0, 519, __pyx_L1_error))
  __pyx_v_state = __pyx_f_7cartopy_5trace_get_state(__pyx_v_p_current, __pyx_v_gp_domain, __pyx_v_handle);

  /* "cartopy/trace.pyx":521
 *     state = get_state(p_current, gp_domain, handle)
 * 
 *     cdef size_t old_lines_size = lines.size()             # <<<<<<<<<<<<<<
 *     while t_current < 1.0 and (lines.size() - old_lines_size) < 100:
 *         if DEBUG:
 */
  __Pyx_TraceLine(521,0,__PYX_ERR(0, 521, __pyx_L1_error))
  __pyx_v_old_lines_size = __pyx_f_7cartopy_5trace_15LineAccumulator_size(__pyx_v_lines);

  /* "cartopy/trace.pyx":522
 * 
 *     cdef size_t old_lines_size = lines.size()
 *     while t_current < 1.0 and (lines.size() - old_lines_size) < 100:             # <<<<<<<<<<<<<<
 *         if DEBUG:
 *             print("Bisecting from: ", t_current, " (")
 */
  __Pyx_TraceLine(522,0,__PYX_ERR(0, 522, __pyx_L1_error))
  while (1) {
    __pyx_t_5 = ((__pyx_v_t_current < 1.0) != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_1 = __pyx_t_5;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_5 = (((__pyx_f_7cartopy_5trace_15LineAccumulator_size(__pyx_v_lines) - __pyx_v_old_lines_size) < 0x64) != 0);
    __pyx_t_1 = __pyx_t_5;
    __pyx_L7_bool_binop_done:;
    if (!__pyx_t_1) break;

    /* "cartopy/trace.pyx":523
 *     cdef size_t old_lines_size = lines.size()
 *     while t_current < 1.0 and (lines.size() - old_lines_size) < 100:
 *         if DEBUG:             # <<<<<<<<<<<<<<
 *             print("Bisecting from: ", t_current, " (")
 *             if state == POINT_IN:
 */
    __Pyx_TraceLine(523,0,__PYX_ERR(0, 523, __pyx_L1_error))
    __pyx_t_1 = (__pyx_v_7cartopy_5trace_DEBUG != 0);
    if (__pyx_t_1) {

      /* "cartopy/trace.pyx":524
 *     while t_current < 1.0 and (lines.size() - old_lines_size) < 100:
 *         if DEBUG:
 *             print("Bisecting from: ", t_current, " (")             # <<<<<<<<<<<<<<
 *             if state == POINT_IN:
 *                 print("IN")
 */
      __Pyx_TraceLine(524,0,__PYX_ERR(0, 524, __pyx_L1_error))
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_t_current); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 524, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 524, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_kp_s_Bisecting_from);
      __Pyx_GIVEREF(__pyx_kp_s_Bisecting_from);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s_Bisecting_from);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
      __Pyx_INCREF(__pyx_kp_s__17);
      __Pyx_GIVEREF(__pyx_kp_s__17);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_s__17);
      __pyx_t_2 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_3) < 0) __PYX_ERR(0, 524, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "cartopy/trace.pyx":525
 *         if DEBUG:
 *             print("Bisecting from: ", t_current, " (")
 *             if state == POINT_IN:             # <<<<<<<<<<<<<<
 *                 print("IN")
 *             elif state == POINT_OUT:
 */
      __Pyx_TraceLine(525,0,__PYX_ERR(0, 525, __pyx_L1_error))
      switch (__pyx_v_state) {
        case __pyx_e_7cartopy_5trace_POINT_IN:

        /* "cartopy/trace.pyx":526
 *             print("Bisecting from: ", t_current, " (")
 *             if state == POINT_IN:
 *                 print("IN")             # <<<<<<<<<<<<<<
 *             elif state == POINT_OUT:
 *                 print("OUT")
 */
        __Pyx_TraceLine(526,0,__PYX_ERR(0, 526, __pyx_L1_error))
        if (__Pyx_PrintOne(0, __pyx_n_s_IN) < 0) __PYX_ERR(0, 526, __pyx_L1_error)

        /* "cartopy/trace.pyx":525
 *         if DEBUG:
 *             print("Bisecting from: ", t_current, " (")
 *             if state == POINT_IN:             # <<<<<<<<<<<<<<
 *                 print("IN")
 *             elif state == POINT_OUT:
 */
        break;
        case __pyx_e_7cartopy_5trace_POINT_OUT:

        /* "cartopy/trace.pyx":528
 *                 print("IN")
 *             elif state == POINT_OUT:
 *                 print("OUT")             # <<<<<<<<<<<<<<
 *             else:
 *                 print("NAN")
 */
        __Pyx_TraceLine(528,0,__PYX_ERR(0, 528, __pyx_L1_error))
        if (__Pyx_PrintOne(0, __pyx_n_s_OUT) < 0) __PYX_ERR(0, 528, __pyx_L1_error)

        /* "cartopy/trace.pyx":527
 *             if state == POINT_IN:
 *                 print("IN")
 *             elif state == POINT_OUT:             # <<<<<<<<<<<<<<
 *                 print("OUT")
 *             else:
 */
        break;
        default:

        /* "cartopy/trace.pyx":530
 *                 print("OUT")
 *             else:
 *                 print("NAN")             # <<<<<<<<<<<<<<
 *             print(")")
 *             print("   ", p_current.x, ", ", p_current.y)
 */
        __Pyx_TraceLine(530,0,__PYX_ERR(0, 530, __pyx_L1_error))
        if (__Pyx_PrintOne(0, __pyx_n_s_NAN) < 0) __PYX_ERR(0, 530, __pyx_L1_error)
        break;
      }

      /* "cartopy/trace.pyx":531
 *             else:
 *                 print("NAN")
 *             print(")")             # <<<<<<<<<<<<<<
 *             print("   ", p_current.x, ", ", p_current.y)
 *             print("   ", p_end.x, ", ", p_end.y)
 */
      __Pyx_TraceLine(531,0,__PYX_ERR(0, 531, __pyx_L1_error))
      if (__Pyx_PrintOne(0, __pyx_kp_s__18) < 0) __PYX_ERR(0, 531, __pyx_L1_error)

      /* "cartopy/trace.pyx":532
 *                 print("NAN")
 *             print(")")
 *             print("   ", p_current.x, ", ", p_current.y)             # <<<<<<<<<<<<<<
 *             print("   ", p_end.x, ", ", p_end.y)
 * 
 */
      __Pyx_TraceLine(532,0,__PYX_ERR(0, 532, __pyx_L1_error))
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_p_current.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 532, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_p_current.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 532, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 532, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_kp_s__15);
      __Pyx_GIVEREF(__pyx_kp_s__15);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_s__15);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_INCREF(__pyx_kp_s__16);
      __Pyx_GIVEREF(__pyx_kp_s__16);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_s__16);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_2);
      __pyx_t_3 = 0;
      __pyx_t_2 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(0, 532, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "cartopy/trace.pyx":533
 *             print(")")
 *             print("   ", p_current.x, ", ", p_current.y)
 *             print("   ", p_end.x, ", ", p_end.y)             # <<<<<<<<<<<<<<
 * 
 *         bisect(t_current, p_current, p_end, handle, gp_domain, state,
 */
      __Pyx_TraceLine(533,0,__PYX_ERR(0, 533, __pyx_L1_error))
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_p_end.x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 533, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_p_end.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 533, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 533, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_kp_s__15);
      __Pyx_GIVEREF(__pyx_kp_s__15);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s__15);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
      __Pyx_INCREF(__pyx_kp_s__16);
      __Pyx_GIVEREF(__pyx_kp_s__16);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_s__16);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_2);
      __pyx_t_4 = 0;
      __pyx_t_2 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_3) < 0) __PYX_ERR(0, 533, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "cartopy/trace.pyx":523
 *     cdef size_t old_lines_size = lines.size()
 *     while t_current < 1.0 and (lines.size() - old_lines_size) < 100:
 *         if DEBUG:             # <<<<<<<<<<<<<<
 *             print("Bisecting from: ", t_current, " (")
 *             if state == POINT_IN:
 */
    }

    /* "cartopy/trace.pyx":535
 *             print("   ", p_end.x, ", ", p_end.y)
 * 
 *         bisect(t_current, p_current, p_end, handle, gp_domain, state,             # <<<<<<<<<<<<<<
 *                interpolator, threshold,
 *                t_min, p_min, t_max, p_max)
 */
    __Pyx_TraceLine(535,0,__PYX_ERR(0, 535, __pyx_L1_error))
    __pyx_f_7cartopy_5trace_bisect(__pyx_v_t_current, __pyx_v_p_current, __pyx_v_p_end, __pyx_v_handle, __pyx_v_gp_domain, __pyx_v_state, __pyx_v_interpolator, __pyx_v_threshold, __pyx_v_t_min, __pyx_v_p_min, __pyx_v_t_max, __pyx_v_p_max);

    /* "cartopy/trace.pyx":538
 *                interpolator, threshold,
 *                t_min, p_min, t_max, p_max)
 *         if DEBUG:             # <<<<<<<<<<<<<<
 *             print("   => ", t_min, "to", t_max)
 *             print("   => (", p_min.x, ", ", p_min.y, ") to (",
 */
    __Pyx_TraceLine(538,0,__PYX_ERR(0, 538, __pyx_L1_error))
    __pyx_t_1 = (__pyx_v_7cartopy_5trace_DEBUG != 0);
    if (__pyx_t_1) {

      /* "cartopy/trace.pyx":539
 *                t_min, p_min, t_max, p_max)
 *         if DEBUG:
 *             print("   => ", t_min, "to", t_max)             # <<<<<<<<<<<<<<
 *             print("   => (", p_min.x, ", ", p_min.y, ") to (",
 *                   p_max.x, ", ", p_max.y, ")")
 */
      __Pyx_TraceLine(539,0,__PYX_ERR(0, 539, __pyx_L1_error))
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_t_min); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 539, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_t_max); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 539, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 539, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_kp_s__19);
      __Pyx_GIVEREF(__pyx_kp_s__19);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_s__19);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_to);
      __Pyx_GIVEREF(__pyx_n_s_to);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_n_s_to);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_2);
      __pyx_t_3 = 0;
      __pyx_t_2 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(0, 539, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "cartopy/trace.pyx":540
 *         if DEBUG:
 *             print("   => ", t_min, "to", t_max)
 *             print("   => (", p_min.x, ", ", p_min.y, ") to (",             # <<<<<<<<<<<<<<
 *                   p_max.x, ", ", p_max.y, ")")
 * 
 */
      __Pyx_TraceLine(540,0,__PYX_ERR(0, 540, __pyx_L1_error))
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_p_min.x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 540, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_p_min.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 540, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);

      /* "cartopy/trace.pyx":541
 *             print("   => ", t_min, "to", t_max)
 *             print("   => (", p_min.x, ", ", p_min.y, ") to (",
 *                   p_max.x, ", ", p_max.y, ")")             # <<<<<<<<<<<<<<
 * 
 *         if state == POINT_IN:
 */
      __Pyx_TraceLine(541,0,__PYX_ERR(0, 541, __pyx_L1_error))
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_p_max.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 541, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyFloat_FromDouble(__pyx_v_p_max.y); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 541, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);

      /* "cartopy/trace.pyx":540
 *         if DEBUG:
 *             print("   => ", t_min, "to", t_max)
 *             print("   => (", p_min.x, ", ", p_min.y, ") to (",             # <<<<<<<<<<<<<<
 *                   p_max.x, ", ", p_max.y, ")")
 * 
 */
      __Pyx_TraceLine(540,0,__PYX_ERR(0, 540, __pyx_L1_error))
      __pyx_t_7 = PyTuple_New(9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 540, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_kp_s__20);
      __Pyx_GIVEREF(__pyx_kp_s__20);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_s__20);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
      __Pyx_INCREF(__pyx_kp_s__16);
      __Pyx_GIVEREF(__pyx_kp_s__16);
      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_kp_s__16);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_2);
      __Pyx_INCREF(__pyx_kp_s_to_2);
      __Pyx_GIVEREF(__pyx_kp_s_to_2);
      PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_kp_s_to_2);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 5, __pyx_t_3);
      __Pyx_INCREF(__pyx_kp_s__16);
      __Pyx_GIVEREF(__pyx_kp_s__16);
      PyTuple_SET_ITEM(__pyx_t_7, 6, __pyx_kp_s__16);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_7, 7, __pyx_t_6);
      __Pyx_INCREF(__pyx_kp_s__18);
      __Pyx_GIVEREF(__pyx_kp_s__18);
      PyTuple_SET_ITEM(__pyx_t_7, 8, __pyx_kp_s__18);
      __pyx_t_4 = 0;
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_6 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_7) < 0) __PYX_ERR(0, 540, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "cartopy/trace.pyx":538
 *                interpolator, threshold,
 *                t_min, p_min, t_max, p_max)
 *         if DEBUG:             # <<<<<<<<<<<<<<
 *             print("   => ", t_min, "to", t_max)
 *             print("   => (", p_min.x, ", ", p_min.y, ") to (",
 */
    }

    /* "cartopy/trace.pyx":543
 *                   p_max.x, ", ", p_max.y, ")")
 * 
 *         if state == POINT_IN:             # <<<<<<<<<<<<<<
 *             lines.add_point_if_empty(p_current)
 *             if t_min != t_current:
 */
    __Pyx_TraceLine(543,0,__PYX_ERR(0, 543, __pyx_L1_error))
    switch (__pyx_v_state) {
      case __pyx_e_7cartopy_5trace_POINT_IN:

      /* "cartopy/trace.pyx":544
 * 
 *         if state == POINT_IN:
 *             lines.add_point_if_empty(p_current)             # <<<<<<<<<<<<<<
 *             if t_min != t_current:
 *                 lines.add_point(p_min)
 */
      __Pyx_TraceLine(544,0,__PYX_ERR(0, 544, __pyx_L1_error))
      __pyx_f_7cartopy_5trace_15LineAccumulator_add_point_if_empty(__pyx_v_lines, __pyx_v_p_current);

      /* "cartopy/trace.pyx":545
 *         if state == POINT_IN:
 *             lines.add_point_if_empty(p_current)
 *             if t_min != t_current:             # <<<<<<<<<<<<<<
 *                 lines.add_point(p_min)
 *                 t_current = t_min
 */
      __Pyx_TraceLine(545,0,__PYX_ERR(0, 545, __pyx_L1_error))
      __pyx_t_1 = ((__pyx_v_t_min != __pyx_v_t_current) != 0);
      if (__pyx_t_1) {

        /* "cartopy/trace.pyx":546
 *             lines.add_point_if_empty(p_current)
 *             if t_min != t_current:
 *                 lines.add_point(p_min)             # <<<<<<<<<<<<<<
 *                 t_current = t_min
 *                 p_current = p_min
 */
        __Pyx_TraceLine(546,0,__PYX_ERR(0, 546, __pyx_L1_error))
        __pyx_f_7cartopy_5trace_15LineAccumulator_add_point(__pyx_v_lines, __pyx_v_p_min);

        /* "cartopy/trace.pyx":547
 *             if t_min != t_current:
 *                 lines.add_point(p_min)
 *                 t_current = t_min             # <<<<<<<<<<<<<<
 *                 p_current = p_min
 *             else:
 */
        __Pyx_TraceLine(547,0,__PYX_ERR(0, 547, __pyx_L1_error))
        __pyx_v_t_current = __pyx_v_t_min;

        /* "cartopy/trace.pyx":548
 *                 lines.add_point(p_min)
 *                 t_current = t_min
 *                 p_current = p_min             # <<<<<<<<<<<<<<
 *             else:
 *                 t_current = t_max
 */
        __Pyx_TraceLine(548,0,__PYX_ERR(0, 548, __pyx_L1_error))
        __pyx_v_p_current = __pyx_v_p_min;

        /* "cartopy/trace.pyx":545
 *         if state == POINT_IN:
 *             lines.add_point_if_empty(p_current)
 *             if t_min != t_current:             # <<<<<<<<<<<<<<
 *                 lines.add_point(p_min)
 *                 t_current = t_min
 */
        goto __pyx_L11;
      }

      /* "cartopy/trace.pyx":550
 *                 p_current = p_min
 *             else:
 *                 t_current = t_max             # <<<<<<<<<<<<<<
 *                 p_current = p_max
 *                 state = get_state(p_current, gp_domain, handle)
 */
      __Pyx_TraceLine(550,0,__PYX_ERR(0, 550, __pyx_L1_error))
      /*else*/ {
        __pyx_v_t_current = __pyx_v_t_max;

        /* "cartopy/trace.pyx":551
 *             else:
 *                 t_current = t_max
 *                 p_current = p_max             # <<<<<<<<<<<<<<
 *                 state = get_state(p_current, gp_domain, handle)
 *                 if state == POINT_IN:
 */
        __Pyx_TraceLine(551,0,__PYX_ERR(0, 551, __pyx_L1_error))
        __pyx_v_p_current = __pyx_v_p_max;

        /* "cartopy/trace.pyx":552
 *                 t_current = t_max
 *                 p_current = p_max
 *                 state = get_state(p_current, gp_domain, handle)             # <<<<<<<<<<<<<<
 *                 if state == POINT_IN:
 *                     lines.new_line()
 */
        __Pyx_TraceLine(552,0,__PYX_ERR(0, 552, __pyx_L1_error))
        __pyx_v_state = __pyx_f_7cartopy_5trace_get_state(__pyx_v_p_current, __pyx_v_gp_domain, __pyx_v_handle);

        /* "cartopy/trace.pyx":553
 *                 p_current = p_max
 *                 state = get_state(p_current, gp_domain, handle)
 *                 if state == POINT_IN:             # <<<<<<<<<<<<<<
 *                     lines.new_line()
 * 
 */
        __Pyx_TraceLine(553,0,__PYX_ERR(0, 553, __pyx_L1_error))
        __pyx_t_1 = ((__pyx_v_state == __pyx_e_7cartopy_5trace_POINT_IN) != 0);
        if (__pyx_t_1) {

          /* "cartopy/trace.pyx":554
 *                 state = get_state(p_current, gp_domain, handle)
 *                 if state == POINT_IN:
 *                     lines.new_line()             # <<<<<<<<<<<<<<
 * 
 *         elif state == POINT_OUT:
 */
          __Pyx_TraceLine(554,0,__PYX_ERR(0, 554, __pyx_L1_error))
          __pyx_f_7cartopy_5trace_15LineAccumulator_new_line(__pyx_v_lines);

          /* "cartopy/trace.pyx":553
 *                 p_current = p_max
 *                 state = get_state(p_current, gp_domain, handle)
 *                 if state == POINT_IN:             # <<<<<<<<<<<<<<
 *                     lines.new_line()
 * 
 */
        }
      }
      __pyx_L11:;

      /* "cartopy/trace.pyx":543
 *                   p_max.x, ", ", p_max.y, ")")
 * 
 *         if state == POINT_IN:             # <<<<<<<<<<<<<<
 *             lines.add_point_if_empty(p_current)
 *             if t_min != t_current:
 */
      break;
      case __pyx_e_7cartopy_5trace_POINT_OUT:

      /* "cartopy/trace.pyx":557
 * 
 *         elif state == POINT_OUT:
 *             if t_min != t_current:             # <<<<<<<<<<<<<<
 *                 t_current = t_min
 *                 p_current = p_min
 */
      __Pyx_TraceLine(557,0,__PYX_ERR(0, 557, __pyx_L1_error))
      __pyx_t_1 = ((__pyx_v_t_min != __pyx_v_t_current) != 0);
      if (__pyx_t_1) {

        /* "cartopy/trace.pyx":558
 *         elif state == POINT_OUT:
 *             if t_min != t_current:
 *                 t_current = t_min             # <<<<<<<<<<<<<<
 *                 p_current = p_min
 *             else:
 */
        __Pyx_TraceLine(558,0,__PYX_ERR(0, 558, __pyx_L1_error))
        __pyx_v_t_current = __pyx_v_t_min;

        /* "cartopy/trace.pyx":559
 *             if t_min != t_current:
 *                 t_current = t_min
 *                 p_current = p_min             # <<<<<<<<<<<<<<
 *             else:
 *                 t_current = t_max
 */
        __Pyx_TraceLine(559,0,__PYX_ERR(0, 559, __pyx_L1_error))
        __pyx_v_p_current = __pyx_v_p_min;

        /* "cartopy/trace.pyx":557
 * 
 *         elif state == POINT_OUT:
 *             if t_min != t_current:             # <<<<<<<<<<<<<<
 *                 t_current = t_min
 *                 p_current = p_min
 */
        goto __pyx_L13;
      }

      /* "cartopy/trace.pyx":561
 *                 p_current = p_min
 *             else:
 *                 t_current = t_max             # <<<<<<<<<<<<<<
 *                 p_current = p_max
 *                 state = get_state(p_current, gp_domain, handle)
 */
      __Pyx_TraceLine(561,0,__PYX_ERR(0, 561, __pyx_L1_error))
      /*else*/ {
        __pyx_v_t_current = __pyx_v_t_max;

        /* "cartopy/trace.pyx":562
 *             else:
 *                 t_current = t_max
 *                 p_current = p_max             # <<<<<<<<<<<<<<
 *                 state = get_state(p_current, gp_domain, handle)
 *                 if state == POINT_IN:
 */
        __Pyx_TraceLine(562,0,__PYX_ERR(0, 562, __pyx_L1_error))
        __pyx_v_p_current = __pyx_v_p_max;

        /* "cartopy/trace.pyx":563
 *                 t_current = t_max
 *                 p_current = p_max
 *                 state = get_state(p_current, gp_domain, handle)             # <<<<<<<<<<<<<<
 *                 if state == POINT_IN:
 *                     lines.new_line()
 */
        __Pyx_TraceLine(563,0,__PYX_ERR(0, 563, __pyx_L1_error))
        __pyx_v_state = __pyx_f_7cartopy_5trace_get_state(__pyx_v_p_current, __pyx_v_gp_domain, __pyx_v_handle);

        /* "cartopy/trace.pyx":564
 *                 p_current = p_max
 *                 state = get_state(p_current, gp_domain, handle)
 *                 if state == POINT_IN:             # <<<<<<<<<<<<<<
 *                     lines.new_line()
 * 
 */
        __Pyx_TraceLine(564,0,__PYX_ERR(0, 564, __pyx_L1_error))
        __pyx_t_1 = ((__pyx_v_state == __pyx_e_7cartopy_5trace_POINT_IN) != 0);
        if (__pyx_t_1) {

          /* "cartopy/trace.pyx":565
 *                 state = get_state(p_current, gp_domain, handle)
 *                 if state == POINT_IN:
 *                     lines.new_line()             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
          __Pyx_TraceLine(565,0,__PYX_ERR(0, 565, __pyx_L1_error))
          __pyx_f_7cartopy_5trace_15LineAccumulator_new_line(__pyx_v_lines);

          /* "cartopy/trace.pyx":564
 *                 p_current = p_max
 *                 state = get_state(p_current, gp_domain, handle)
 *                 if state == POINT_IN:             # <<<<<<<<<<<<<<
 *                     lines.new_line()
 * 
 */
        }
      }
      __pyx_L13:;

      /* "cartopy/trace.pyx":556
 *                     lines.new_line()
 * 
 *         elif state == POINT_OUT:             # <<<<<<<<<<<<<<
 *             if t_min != t_current:
 *                 t_current = t_min
 */
      break;
      default:

      /* "cartopy/trace.pyx":568
 * 
 *         else:
 *             t_current = t_max             # <<<<<<<<<<<<<<
 *             p_current = p_max
 *             state = get_state(p_current, gp_domain, handle)
 */
      __Pyx_TraceLine(568,0,__PYX_ERR(0, 568, __pyx_L1_error))
      __pyx_v_t_current = __pyx_v_t_max;

      /* "cartopy/trace.pyx":569
 *         else:
 *             t_current = t_max
 *             p_current = p_max             # <<<<<<<<<<<<<<
 *             state = get_state(p_current, gp_domain, handle)
 *             if state == POINT_IN:
 */
      __Pyx_TraceLine(569,0,__PYX_ERR(0, 569, __pyx_L1_error))
      __pyx_v_p_current = __pyx_v_p_max;

      /* "cartopy/trace.pyx":570
 *             t_current = t_max
 *             p_current = p_max
 *             state = get_state(p_current, gp_domain, handle)             # <<<<<<<<<<<<<<
 *             if state == POINT_IN:
 *                 lines.new_line()
 */
      __Pyx_TraceLine(570,0,__PYX_ERR(0, 570, __pyx_L1_error))
      __pyx_v_state = __pyx_f_7cartopy_5trace_get_state(__pyx_v_p_current, __pyx_v_gp_domain, __pyx_v_handle);

      /* "cartopy/trace.pyx":571
 *             p_current = p_max
 *             state = get_state(p_current, gp_domain, handle)
 *             if state == POINT_IN:             # <<<<<<<<<<<<<<
 *                 lines.new_line()
 * 
 */
      __Pyx_TraceLine(571,0,__PYX_ERR(0, 571, __pyx_L1_error))
      __pyx_t_1 = ((__pyx_v_state == __pyx_e_7cartopy_5trace_POINT_IN) != 0);
      if (__pyx_t_1) {

        /* "cartopy/trace.pyx":572
 *             state = get_state(p_current, gp_domain, handle)
 *             if state == POINT_IN:
 *                 lines.new_line()             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __Pyx_TraceLine(572,0,__PYX_ERR(0, 572, __pyx_L1_error))
        __pyx_f_7cartopy_5trace_15LineAccumulator_new_line(__pyx_v_lines);

        /* "cartopy/trace.pyx":571
 *             p_current = p_max
 *             state = get_state(p_current, gp_domain, handle)
 *             if state == POINT_IN:             # <<<<<<<<<<<<<<
 *                 lines.new_line()
 * 
 */
      }
      break;
    }
  }

  /* "cartopy/trace.pyx":491
 * 
 * 
 * cdef void _project_segment(GEOSContextHandle_t handle,             # <<<<<<<<<<<<<<
 *                            const GEOSCoordSequence *src_coords,
 *                            unsigned int src_idx_from, unsigned int src_idx_to,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("cartopy.trace._project_segment", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "cartopy/trace.pyx":575
 * 
 * 
 * def project_linear(geometry not None, CRS src_crs not None,             # <<<<<<<<<<<<<<
 *                    dest_projection not None):
 *     """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cartopy_5trace_1project_linear(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7cartopy_5trace_project_linear[] = "project_linear(geometry, CRS src_crs, dest_projection)\n\n    Project a geometry from one projection to another.\n\n    Parameters\n    ----------\n    geometry : `shapely.geometry.LineString` or `shapely.geometry.LinearRing`\n        A geometry to be projected.\n    src_crs : cartopy.crs.CRS\n        The coordinate system of the line to be projected.\n    dest_projection : cartopy.crs.Projection\n        The projection for the resulting projected line.\n\n    Returns\n    -------\n    `shapely.geometry.MultiLineString`\n        The result of projecting the given geometry from the source projection\n        into the destination projection.\n\n    ";
static PyMethodDef __pyx_mdef_7cartopy_5trace_1project_linear = {"project_linear", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7cartopy_5trace_1project_linear, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7cartopy_5trace_project_linear};
static PyObject *__pyx_pw_7cartopy_5trace_1project_linear(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_geometry = 0;
  struct __pyx_obj_7cartopy_4_crs_CRS *__pyx_v_src_crs = 0;
  PyObject *__pyx_v_dest_projection = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project_linear (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_geometry,&__pyx_n_s_src_crs,&__pyx_n_s_dest_projection,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geometry)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_src_crs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("project_linear", 1, 3, 3, 1); __PYX_ERR(0, 575, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dest_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("project_linear", 1, 3, 3, 2); __PYX_ERR(0, 575, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "project_linear") < 0)) __PYX_ERR(0, 575, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_geometry = values[0];
    __pyx_v_src_crs = ((struct __pyx_obj_7cartopy_4_crs_CRS *)values[1]);
    __pyx_v_dest_projection = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("project_linear", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 575, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cartopy.trace.project_linear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(((PyObject *)__pyx_v_geometry) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "geometry"); __PYX_ERR(0, 575, __pyx_L1_error)
  }
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_src_crs), __pyx_ptype_7cartopy_4_crs_CRS, 0, "src_crs", 0))) __PYX_ERR(0, 575, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_dest_projection) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "dest_projection"); __PYX_ERR(0, 576, __pyx_L1_error)
  }
  __pyx_r = __pyx_pf_7cartopy_5trace_project_linear(__pyx_self, __pyx_v_geometry, __pyx_v_src_crs, __pyx_v_dest_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cartopy_5trace_project_linear(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_geometry, struct __pyx_obj_7cartopy_4_crs_CRS *__pyx_v_src_crs, PyObject *__pyx_v_dest_projection) {
  double __pyx_v_threshold;
  GEOSContextHandle_t __pyx_v_handle;
  GEOSGeometry *__pyx_v_g_linear;
  struct __pyx_obj_7cartopy_5trace_Interpolator *__pyx_v_interpolator = 0;
  GEOSGeometry *__pyx_v_g_domain;
  GEOSCoordSequence const *__pyx_v_src_coords;
  unsigned int __pyx_v_src_size;
  unsigned int __pyx_v_src_idx;
  GEOSPreparedGeometry const *__pyx_v_gp_domain;
  struct __pyx_obj_7cartopy_5trace_LineAccumulator *__pyx_v_lines = 0;
  GEOSGeometry *__pyx_v_g_multi_line_string;
  PyObject *__pyx_v_lonlat = NULL;
  PyObject *__pyx_v_multi_line_string = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  GEOSGeometry *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  unsigned int __pyx_t_8;
  unsigned int __pyx_t_9;
  unsigned int __pyx_t_10;
  __Pyx_TraceFrameInit(__pyx_codeobj__21)
  __Pyx_RefNannySetupContext("project_linear", 0);
  __Pyx_TraceCall("project_linear", __pyx_f[0], 575, 0, __PYX_ERR(0, 575, __pyx_L1_error));

  /* "cartopy/trace.pyx":597
 *     """
 *     cdef:
 *         double threshold = dest_projection.threshold             # <<<<<<<<<<<<<<
 *         GEOSContextHandle_t handle = get_geos_context_handle()
 *         GEOSGeometry *g_linear = geos_from_shapely(geometry)
 */
  __Pyx_TraceLine(597,0,__PYX_ERR(0, 597, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dest_projection, __pyx_n_s_threshold); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_threshold = __pyx_t_2;

  /* "cartopy/trace.pyx":598
 *     cdef:
 *         double threshold = dest_projection.threshold
 *         GEOSContextHandle_t handle = get_geos_context_handle()             # <<<<<<<<<<<<<<
 *         GEOSGeometry *g_linear = geos_from_shapely(geometry)
 *         Interpolator interpolator
 */
  __Pyx_TraceLine(598,0,__PYX_ERR(0, 598, __pyx_L1_error))
  __pyx_v_handle = __pyx_f_7cartopy_5trace_get_geos_context_handle();

  /* "cartopy/trace.pyx":599
 *         double threshold = dest_projection.threshold
 *         GEOSContextHandle_t handle = get_geos_context_handle()
 *         GEOSGeometry *g_linear = geos_from_shapely(geometry)             # <<<<<<<<<<<<<<
 *         Interpolator interpolator
 *         GEOSGeometry *g_domain
 */
  __Pyx_TraceLine(599,0,__PYX_ERR(0, 599, __pyx_L1_error))
  __pyx_t_3 = __pyx_f_7cartopy_5trace_geos_from_shapely(__pyx_v_geometry); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 599, __pyx_L1_error)
  __pyx_v_g_linear = __pyx_t_3;

  /* "cartopy/trace.pyx":608
 *         GEOSGeometry *g_multi_line_string
 * 
 *     g_domain = geos_from_shapely(dest_projection.domain)             # <<<<<<<<<<<<<<
 * 
 *     if src_crs.is_geodetic():
 */
  __Pyx_TraceLine(608,0,__PYX_ERR(0, 608, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dest_projection, __pyx_n_s_domain); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_f_7cartopy_5trace_geos_from_shapely(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_g_domain = __pyx_t_3;

  /* "cartopy/trace.pyx":610
 *     g_domain = geos_from_shapely(dest_projection.domain)
 * 
 *     if src_crs.is_geodetic():             # <<<<<<<<<<<<<<
 *         interpolator = SphericalInterpolator()
 *     else:
 */
  __Pyx_TraceLine(610,0,__PYX_ERR(0, 610, __pyx_L1_error))
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cartopy_4_crs_CRS *)__pyx_v_src_crs->__pyx_vtab)->is_geodetic(__pyx_v_src_crs, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "cartopy/trace.pyx":611
 * 
 *     if src_crs.is_geodetic():
 *         interpolator = SphericalInterpolator()             # <<<<<<<<<<<<<<
 *     else:
 *         interpolator = CartesianInterpolator()
 */
    __Pyx_TraceLine(611,0,__PYX_ERR(0, 611, __pyx_L1_error))
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7cartopy_5trace_SphericalInterpolator)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_interpolator = ((struct __pyx_obj_7cartopy_5trace_Interpolator *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cartopy/trace.pyx":610
 *     g_domain = geos_from_shapely(dest_projection.domain)
 * 
 *     if src_crs.is_geodetic():             # <<<<<<<<<<<<<<
 *         interpolator = SphericalInterpolator()
 *     else:
 */
    goto __pyx_L3;
  }

  /* "cartopy/trace.pyx":613
 *         interpolator = SphericalInterpolator()
 *     else:
 *         interpolator = CartesianInterpolator()             # <<<<<<<<<<<<<<
 *     interpolator.init(src_crs.proj4, (<CRS>dest_projection).proj4)
 *     if (6, 1, 1) <= PROJ4_VERSION < (6, 3, 0):
 */
  __Pyx_TraceLine(613,0,__PYX_ERR(0, 613, __pyx_L1_error))
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7cartopy_5trace_CartesianInterpolator)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 613, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_interpolator = ((struct __pyx_obj_7cartopy_5trace_Interpolator *)__pyx_t_1);
    __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "cartopy/trace.pyx":614
 *     else:
 *         interpolator = CartesianInterpolator()
 *     interpolator.init(src_crs.proj4, (<CRS>dest_projection).proj4)             # <<<<<<<<<<<<<<
 *     if (6, 1, 1) <= PROJ4_VERSION < (6, 3, 0):
 *         # Workaround bug in Proj 6.1.1+ with +to_meter on +proj=ob_tran.
 */
  __Pyx_TraceLine(614,0,__PYX_ERR(0, 614, __pyx_L1_error))
  ((struct __pyx_vtabstruct_7cartopy_5trace_Interpolator *)__pyx_v_interpolator->__pyx_vtab)->init(__pyx_v_interpolator, __pyx_v_src_crs->proj4, ((struct __pyx_obj_7cartopy_4_crs_CRS *)__pyx_v_dest_projection)->proj4);

  /* "cartopy/trace.pyx":615
 *         interpolator = CartesianInterpolator()
 *     interpolator.init(src_crs.proj4, (<CRS>dest_projection).proj4)
 *     if (6, 1, 1) <= PROJ4_VERSION < (6, 3, 0):             # <<<<<<<<<<<<<<
 *         # Workaround bug in Proj 6.1.1+ with +to_meter on +proj=ob_tran.
 *         # See https://github.com/OSGeo/proj#1782.
 */
  __Pyx_TraceLine(615,0,__PYX_ERR(0, 615, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_PROJ4_VERSION); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyObject_RichCompare(__pyx_tuple__22, __pyx_t_1, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 615, __pyx_L1_error)
  if (__Pyx_PyObject_IsTrue(__pyx_t_5)) {
    __Pyx_DECREF(__pyx_t_5);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_tuple__23, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 615, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_4) {

    /* "cartopy/trace.pyx":618
 *         # Workaround bug in Proj 6.1.1+ with +to_meter on +proj=ob_tran.
 *         # See https://github.com/OSGeo/proj#1782.
 *         lonlat = ('latlon', 'latlong', 'lonlat', 'longlat')             # <<<<<<<<<<<<<<
 *         if (src_crs.proj4_params.get('proj', '') == 'ob_tran' and
 *                 src_crs.proj4_params.get('o_proj', '') in lonlat and
 */
    __Pyx_TraceLine(618,0,__PYX_ERR(0, 618, __pyx_L1_error))
    __Pyx_INCREF(__pyx_tuple__24);
    __pyx_v_lonlat = __pyx_tuple__24;

    /* "cartopy/trace.pyx":619
 *         # See https://github.com/OSGeo/proj#1782.
 *         lonlat = ('latlon', 'latlong', 'lonlat', 'longlat')
 *         if (src_crs.proj4_params.get('proj', '') == 'ob_tran' and             # <<<<<<<<<<<<<<
 *                 src_crs.proj4_params.get('o_proj', '') in lonlat and
 *                 'to_meter' in src_crs.proj4_params):
 */
    __Pyx_TraceLine(619,0,__PYX_ERR(0, 619, __pyx_L1_error))
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_src_crs->proj4_params, __pyx_n_s_get); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 619, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 619, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_ob_tran, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 619, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L6_bool_binop_done;
    }

    /* "cartopy/trace.pyx":620
 *         lonlat = ('latlon', 'latlong', 'lonlat', 'longlat')
 *         if (src_crs.proj4_params.get('proj', '') == 'ob_tran' and
 *                 src_crs.proj4_params.get('o_proj', '') in lonlat and             # <<<<<<<<<<<<<<
 *                 'to_meter' in src_crs.proj4_params):
 *             interpolator.src_scale = src_crs.proj4_params['to_meter']
 */
    __Pyx_TraceLine(620,0,__PYX_ERR(0, 620, __pyx_L1_error))
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_src_crs->proj4_params, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 620, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 620, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_t_5, __pyx_v_lonlat, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 620, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_4 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }

    /* "cartopy/trace.pyx":621
 *         if (src_crs.proj4_params.get('proj', '') == 'ob_tran' and
 *                 src_crs.proj4_params.get('o_proj', '') in lonlat and
 *                 'to_meter' in src_crs.proj4_params):             # <<<<<<<<<<<<<<
 *             interpolator.src_scale = src_crs.proj4_params['to_meter']
 *         if (dest_projection.proj4_params.get('proj', '') == 'ob_tran' and
 */
    __Pyx_TraceLine(621,0,__PYX_ERR(0, 621, __pyx_L1_error))
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_to_meter, __pyx_v_src_crs->proj4_params, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 621, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_7 != 0);
    __pyx_t_4 = __pyx_t_6;
    __pyx_L6_bool_binop_done:;

    /* "cartopy/trace.pyx":619
 *         # See https://github.com/OSGeo/proj#1782.
 *         lonlat = ('latlon', 'latlong', 'lonlat', 'longlat')
 *         if (src_crs.proj4_params.get('proj', '') == 'ob_tran' and             # <<<<<<<<<<<<<<
 *                 src_crs.proj4_params.get('o_proj', '') in lonlat and
 *                 'to_meter' in src_crs.proj4_params):
 */
    __Pyx_TraceLine(619,0,__PYX_ERR(0, 619, __pyx_L1_error))
    if (__pyx_t_4) {

      /* "cartopy/trace.pyx":622
 *                 src_crs.proj4_params.get('o_proj', '') in lonlat and
 *                 'to_meter' in src_crs.proj4_params):
 *             interpolator.src_scale = src_crs.proj4_params['to_meter']             # <<<<<<<<<<<<<<
 *         if (dest_projection.proj4_params.get('proj', '') == 'ob_tran' and
 *                 dest_projection.proj4_params.get('o_proj', '') in lonlat and
 */
      __Pyx_TraceLine(622,0,__PYX_ERR(0, 622, __pyx_L1_error))
      __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_src_crs->proj4_params, __pyx_n_s_to_meter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 622, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 622, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_interpolator->src_scale = __pyx_t_2;

      /* "cartopy/trace.pyx":619
 *         # See https://github.com/OSGeo/proj#1782.
 *         lonlat = ('latlon', 'latlong', 'lonlat', 'longlat')
 *         if (src_crs.proj4_params.get('proj', '') == 'ob_tran' and             # <<<<<<<<<<<<<<
 *                 src_crs.proj4_params.get('o_proj', '') in lonlat and
 *                 'to_meter' in src_crs.proj4_params):
 */
    }

    /* "cartopy/trace.pyx":623
 *                 'to_meter' in src_crs.proj4_params):
 *             interpolator.src_scale = src_crs.proj4_params['to_meter']
 *         if (dest_projection.proj4_params.get('proj', '') == 'ob_tran' and             # <<<<<<<<<<<<<<
 *                 dest_projection.proj4_params.get('o_proj', '') in lonlat and
 *                 'to_meter' in dest_projection.proj4_params):
 */
    __Pyx_TraceLine(623,0,__PYX_ERR(0, 623, __pyx_L1_error))
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_dest_projection, __pyx_n_s_proj4_params); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_ob_tran, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 623, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L10_bool_binop_done;
    }

    /* "cartopy/trace.pyx":624
 *             interpolator.src_scale = src_crs.proj4_params['to_meter']
 *         if (dest_projection.proj4_params.get('proj', '') == 'ob_tran' and
 *                 dest_projection.proj4_params.get('o_proj', '') in lonlat and             # <<<<<<<<<<<<<<
 *                 'to_meter' in dest_projection.proj4_params):
 *             interpolator.dest_scale = 1 / dest_projection.proj4_params['to_meter']
 */
    __Pyx_TraceLine(624,0,__PYX_ERR(0, 624, __pyx_L1_error))
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_dest_projection, __pyx_n_s_proj4_params); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_t_5, __pyx_v_lonlat, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 624, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_4 = __pyx_t_7;
      goto __pyx_L10_bool_binop_done;
    }

    /* "cartopy/trace.pyx":625
 *         if (dest_projection.proj4_params.get('proj', '') == 'ob_tran' and
 *                 dest_projection.proj4_params.get('o_proj', '') in lonlat and
 *                 'to_meter' in dest_projection.proj4_params):             # <<<<<<<<<<<<<<
 *             interpolator.dest_scale = 1 / dest_projection.proj4_params['to_meter']
 * 
 */
    __Pyx_TraceLine(625,0,__PYX_ERR(0, 625, __pyx_L1_error))
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_dest_projection, __pyx_n_s_proj4_params); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 625, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_to_meter, __pyx_t_5, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 625, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = (__pyx_t_7 != 0);
    __pyx_t_4 = __pyx_t_6;
    __pyx_L10_bool_binop_done:;

    /* "cartopy/trace.pyx":623
 *                 'to_meter' in src_crs.proj4_params):
 *             interpolator.src_scale = src_crs.proj4_params['to_meter']
 *         if (dest_projection.proj4_params.get('proj', '') == 'ob_tran' and             # <<<<<<<<<<<<<<
 *                 dest_projection.proj4_params.get('o_proj', '') in lonlat and
 *                 'to_meter' in dest_projection.proj4_params):
 */
    __Pyx_TraceLine(623,0,__PYX_ERR(0, 623, __pyx_L1_error))
    if (__pyx_t_4) {

      /* "cartopy/trace.pyx":626
 *                 dest_projection.proj4_params.get('o_proj', '') in lonlat and
 *                 'to_meter' in dest_projection.proj4_params):
 *             interpolator.dest_scale = 1 / dest_projection.proj4_params['to_meter']             # <<<<<<<<<<<<<<
 * 
 *     src_coords = GEOSGeom_getCoordSeq_r(handle, g_linear)
 */
      __Pyx_TraceLine(626,0,__PYX_ERR(0, 626, __pyx_L1_error))
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_dest_projection, __pyx_n_s_proj4_params); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_to_meter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_int_1, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 626, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_interpolator->dest_scale = __pyx_t_2;

      /* "cartopy/trace.pyx":623
 *                 'to_meter' in src_crs.proj4_params):
 *             interpolator.src_scale = src_crs.proj4_params['to_meter']
 *         if (dest_projection.proj4_params.get('proj', '') == 'ob_tran' and             # <<<<<<<<<<<<<<
 *                 dest_projection.proj4_params.get('o_proj', '') in lonlat and
 *                 'to_meter' in dest_projection.proj4_params):
 */
    }

    /* "cartopy/trace.pyx":615
 *         interpolator = CartesianInterpolator()
 *     interpolator.init(src_crs.proj4, (<CRS>dest_projection).proj4)
 *     if (6, 1, 1) <= PROJ4_VERSION < (6, 3, 0):             # <<<<<<<<<<<<<<
 *         # Workaround bug in Proj 6.1.1+ with +to_meter on +proj=ob_tran.
 *         # See https://github.com/OSGeo/proj#1782.
 */
  }

  /* "cartopy/trace.pyx":628
 *             interpolator.dest_scale = 1 / dest_projection.proj4_params['to_meter']
 * 
 *     src_coords = GEOSGeom_getCoordSeq_r(handle, g_linear)             # <<<<<<<<<<<<<<
 *     gp_domain = GEOSPrepare_r(handle, g_domain)
 * 
 */
  __Pyx_TraceLine(628,0,__PYX_ERR(0, 628, __pyx_L1_error))
  __pyx_v_src_coords = GEOSGeom_getCoordSeq_r(__pyx_v_handle, __pyx_v_g_linear);

  /* "cartopy/trace.pyx":629
 * 
 *     src_coords = GEOSGeom_getCoordSeq_r(handle, g_linear)
 *     gp_domain = GEOSPrepare_r(handle, g_domain)             # <<<<<<<<<<<<<<
 * 
 *     GEOSCoordSeq_getSize_r(handle, src_coords, &src_size)  # check exceptions
 */
  __Pyx_TraceLine(629,0,__PYX_ERR(0, 629, __pyx_L1_error))
  __pyx_v_gp_domain = GEOSPrepare_r(__pyx_v_handle, __pyx_v_g_domain);

  /* "cartopy/trace.pyx":631
 *     gp_domain = GEOSPrepare_r(handle, g_domain)
 * 
 *     GEOSCoordSeq_getSize_r(handle, src_coords, &src_size)  # check exceptions             # <<<<<<<<<<<<<<
 * 
 *     lines = LineAccumulator()
 */
  __Pyx_TraceLine(631,0,__PYX_ERR(0, 631, __pyx_L1_error))
  (void)(GEOSCoordSeq_getSize_r(__pyx_v_handle, __pyx_v_src_coords, (&__pyx_v_src_size)));

  /* "cartopy/trace.pyx":633
 *     GEOSCoordSeq_getSize_r(handle, src_coords, &src_size)  # check exceptions
 * 
 *     lines = LineAccumulator()             # <<<<<<<<<<<<<<
 *     for src_idx in range(1, src_size):
 *         _project_segment(handle, src_coords, src_idx - 1, src_idx,
 */
  __Pyx_TraceLine(633,0,__PYX_ERR(0, 633, __pyx_L1_error))
  __pyx_t_5 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7cartopy_5trace_LineAccumulator)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_lines = ((struct __pyx_obj_7cartopy_5trace_LineAccumulator *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "cartopy/trace.pyx":634
 * 
 *     lines = LineAccumulator()
 *     for src_idx in range(1, src_size):             # <<<<<<<<<<<<<<
 *         _project_segment(handle, src_coords, src_idx - 1, src_idx,
 *                          interpolator, gp_domain, threshold, lines);
 */
  __Pyx_TraceLine(634,0,__PYX_ERR(0, 634, __pyx_L1_error))
  __pyx_t_8 = __pyx_v_src_size;
  __pyx_t_9 = __pyx_t_8;
  for (__pyx_t_10 = 1; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_src_idx = __pyx_t_10;

    /* "cartopy/trace.pyx":635
 *     lines = LineAccumulator()
 *     for src_idx in range(1, src_size):
 *         _project_segment(handle, src_coords, src_idx - 1, src_idx,             # <<<<<<<<<<<<<<
 *                          interpolator, gp_domain, threshold, lines);
 * 
 */
    __Pyx_TraceLine(635,0,__PYX_ERR(0, 635, __pyx_L1_error))
    __pyx_f_7cartopy_5trace__project_segment(__pyx_v_handle, __pyx_v_src_coords, (__pyx_v_src_idx - 1), __pyx_v_src_idx, __pyx_v_interpolator, __pyx_v_gp_domain, __pyx_v_threshold, __pyx_v_lines);
  }

  /* "cartopy/trace.pyx":638
 *                          interpolator, gp_domain, threshold, lines);
 * 
 *     GEOSPreparedGeom_destroy_r(handle, gp_domain)             # <<<<<<<<<<<<<<
 * 
 *     g_multi_line_string = lines.as_geom(handle)
 */
  __Pyx_TraceLine(638,0,__PYX_ERR(0, 638, __pyx_L1_error))
  GEOSPreparedGeom_destroy_r(__pyx_v_handle, __pyx_v_gp_domain);

  /* "cartopy/trace.pyx":640
 *     GEOSPreparedGeom_destroy_r(handle, gp_domain)
 * 
 *     g_multi_line_string = lines.as_geom(handle)             # <<<<<<<<<<<<<<
 * 
 *     del lines, interpolator
 */
  __Pyx_TraceLine(640,0,__PYX_ERR(0, 640, __pyx_L1_error))
  __pyx_v_g_multi_line_string = __pyx_f_7cartopy_5trace_15LineAccumulator_as_geom(__pyx_v_lines, __pyx_v_handle);

  /* "cartopy/trace.pyx":642
 *     g_multi_line_string = lines.as_geom(handle)
 * 
 *     del lines, interpolator             # <<<<<<<<<<<<<<
 *     multi_line_string = shapely_from_geos(g_multi_line_string)
 *     return multi_line_string
 */
  __Pyx_TraceLine(642,0,__PYX_ERR(0, 642, __pyx_L1_error))
  __Pyx_DECREF(((PyObject *)__pyx_v_lines));
  __pyx_v_lines = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_v_interpolator));
  __pyx_v_interpolator = NULL;

  /* "cartopy/trace.pyx":643
 * 
 *     del lines, interpolator
 *     multi_line_string = shapely_from_geos(g_multi_line_string)             # <<<<<<<<<<<<<<
 *     return multi_line_string
 */
  __Pyx_TraceLine(643,0,__PYX_ERR(0, 643, __pyx_L1_error))
  __pyx_t_5 = __pyx_f_7cartopy_5trace_shapely_from_geos(__pyx_v_g_multi_line_string); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_multi_line_string = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "cartopy/trace.pyx":644
 *     del lines, interpolator
 *     multi_line_string = shapely_from_geos(g_multi_line_string)
 *     return multi_line_string             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(644,0,__PYX_ERR(0, 644, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_multi_line_string);
  __pyx_r = __pyx_v_multi_line_string;
  goto __pyx_L0;

  /* "cartopy/trace.pyx":575
 * 
 * 
 * def project_linear(geometry not None, CRS src_crs not None,             # <<<<<<<<<<<<<<
 *                    dest_projection not None):
 *     """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cartopy.trace.project_linear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_interpolator);
  __Pyx_XDECREF((PyObject *)__pyx_v_lines);
  __Pyx_XDECREF(__pyx_v_lonlat);
  __Pyx_XDECREF(__pyx_v_multi_line_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_LineAccumulator(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cartopy_5trace_3__pyx_unpickle_LineAccumulator(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7cartopy_5trace_2__pyx_unpickle_LineAccumulator[] = "__pyx_unpickle_LineAccumulator(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_7cartopy_5trace_3__pyx_unpickle_LineAccumulator = {"__pyx_unpickle_LineAccumulator", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7cartopy_5trace_3__pyx_unpickle_LineAccumulator, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7cartopy_5trace_2__pyx_unpickle_LineAccumulator};
static PyObject *__pyx_pw_7cartopy_5trace_3__pyx_unpickle_LineAccumulator(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_LineAccumulator (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_LineAccumulator", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_LineAccumulator", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_LineAccumulator") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_LineAccumulator", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cartopy.trace.__pyx_unpickle_LineAccumulator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cartopy_5trace_2__pyx_unpickle_LineAccumulator(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cartopy_5trace_2__pyx_unpickle_LineAccumulator(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_TraceFrameInit(__pyx_codeobj__28)
  __Pyx_RefNannySetupContext("__pyx_unpickle_LineAccumulator", 0);
  __Pyx_TraceCall("__pyx_unpickle_LineAccumulator", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x980da98:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x980da98 = (lines))" % __pyx_checksum)
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(1, 4, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x980da98) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x980da98:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x980da98 = (lines))" % __pyx_checksum)
 *     __pyx_result = LineAccumulator.__new__(__pyx_type)
 */
    __Pyx_TraceLine(5,0,__PYX_ERR(1, 5, __pyx_L1_error))
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x980da98:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x980da98 = (lines))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = LineAccumulator.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __Pyx_TraceLine(6,0,__PYX_ERR(1, 6, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x98, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x980da98:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x980da98 = (lines))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x980da98 = (lines))" % __pyx_checksum)
 *     __pyx_result = LineAccumulator.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_LineAccumulator__set_state(<LineAccumulator> __pyx_result, __pyx_state)
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(1, 7, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7cartopy_5trace_LineAccumulator), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x980da98 = (lines))" % __pyx_checksum)
 *     __pyx_result = LineAccumulator.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_LineAccumulator__set_state(<LineAccumulator> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __Pyx_TraceLine(8,0,__PYX_ERR(1, 8, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = LineAccumulator.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_LineAccumulator__set_state(<LineAccumulator> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_LineAccumulator__set_state(LineAccumulator __pyx_result, tuple __pyx_state):
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(1, 9, __pyx_L1_error))
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_7cartopy_5trace___pyx_unpickle_LineAccumulator__set_state(((struct __pyx_obj_7cartopy_5trace_LineAccumulator *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x980da98 = (lines))" % __pyx_checksum)
 *     __pyx_result = LineAccumulator.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_LineAccumulator__set_state(<LineAccumulator> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_LineAccumulator__set_state(<LineAccumulator> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_LineAccumulator__set_state(LineAccumulator __pyx_result, tuple __pyx_state):
 *     __pyx_result.lines = __pyx_state[0]
 */
  __Pyx_TraceLine(10,0,__PYX_ERR(1, 10, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_LineAccumulator(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cartopy.trace.__pyx_unpickle_LineAccumulator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_LineAccumulator__set_state(<LineAccumulator> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_LineAccumulator__set_state(LineAccumulator __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.lines = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_7cartopy_5trace___pyx_unpickle_LineAccumulator__set_state(struct __pyx_obj_7cartopy_5trace_LineAccumulator *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::list<__pyx_t_7cartopy_5trace_Line>  __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_LineAccumulator__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_LineAccumulator__set_state", __pyx_f[1], 11, 0, __PYX_ERR(1, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_LineAccumulator__set_state(LineAccumulator __pyx_result, tuple __pyx_state):
 *     __pyx_result.lines = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(1, 12, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Line(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->lines = __pyx_t_2;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_LineAccumulator__set_state(LineAccumulator __pyx_result, tuple __pyx_state):
 *     __pyx_result.lines = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  __Pyx_TraceLine(13,0,__PYX_ERR(1, 13, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 1) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.lines = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __Pyx_TraceLine(14,0,__PYX_ERR(1, 14, __pyx_L1_error))
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_LineAccumulator__set_state(LineAccumulator __pyx_result, tuple __pyx_state):
 *     __pyx_result.lines = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_LineAccumulator__set_state(<LineAccumulator> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_LineAccumulator__set_state(LineAccumulator __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.lines = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("cartopy.trace.__pyx_unpickle_LineAccumulator__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "list.to_py":92
 * 
 * @cname("__pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Point")
 * cdef object __pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Point(const cpp_list[X]& v):             # <<<<<<<<<<<<<<
 *     o = []
 *     cdef cpp_list[X].const_iterator iter = v.begin()
 */

static PyObject *__pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Point(std::list<__pyx_t_7cartopy_5trace_Point>  const &__pyx_v_v) {
  PyObject *__pyx_v_o = NULL;
  std::list<__pyx_t_7cartopy_5trace_Point> ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("__pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Point", 0);
  __Pyx_TraceCall("__pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Point", __pyx_f[1], 92, 0, __PYX_ERR(1, 92, __pyx_L1_error));

  /* "list.to_py":93
 * @cname("__pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Point")
 * cdef object __pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Point(const cpp_list[X]& v):
 *     o = []             # <<<<<<<<<<<<<<
 *     cdef cpp_list[X].const_iterator iter = v.begin()
 *     while iter != v.end():
 */
  __Pyx_TraceLine(93,0,__PYX_ERR(1, 93, __pyx_L1_error))
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "list.to_py":94
 * cdef object __pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Point(const cpp_list[X]& v):
 *     o = []
 *     cdef cpp_list[X].const_iterator iter = v.begin()             # <<<<<<<<<<<<<<
 *     while iter != v.end():
 *         o.append(cython.operator.dereference(iter))
 */
  __Pyx_TraceLine(94,0,__PYX_ERR(1, 94, __pyx_L1_error))
  __pyx_v_iter = __pyx_v_v.begin();

  /* "list.to_py":95
 *     o = []
 *     cdef cpp_list[X].const_iterator iter = v.begin()
 *     while iter != v.end():             # <<<<<<<<<<<<<<
 *         o.append(cython.operator.dereference(iter))
 *         cython.operator.preincrement(iter)
 */
  __Pyx_TraceLine(95,0,__PYX_ERR(1, 95, __pyx_L1_error))
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_v.end()) != 0);
    if (!__pyx_t_2) break;

    /* "list.to_py":96
 *     cdef cpp_list[X].const_iterator iter = v.begin()
 *     while iter != v.end():
 *         o.append(cython.operator.dereference(iter))             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __Pyx_TraceLine(96,0,__PYX_ERR(1, 96, __pyx_L1_error))
    __pyx_t_1 = __pyx_convert__to_py___pyx_t_7cartopy_5trace_Point((*__pyx_v_iter)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_o, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 96, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "list.to_py":97
 *     while iter != v.end():
 *         o.append(cython.operator.dereference(iter))
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    __Pyx_TraceLine(97,0,__PYX_ERR(1, 97, __pyx_L1_error))
    (void)((++__pyx_v_iter));
  }

  /* "list.to_py":98
 *         o.append(cython.operator.dereference(iter))
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(98,0,__PYX_ERR(1, 98, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "list.to_py":92
 * 
 * @cname("__pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Point")
 * cdef object __pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Point(const cpp_list[X]& v):             # <<<<<<<<<<<<<<
 *     o = []
 *     cdef cpp_list[X].const_iterator iter = v.begin()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("list.to_py.__pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Point", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Line(std::list<__pyx_t_7cartopy_5trace_Line>  const &__pyx_v_v) {
  PyObject *__pyx_v_o = NULL;
  std::list<__pyx_t_7cartopy_5trace_Line> ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("__pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Line", 0);
  __Pyx_TraceCall("__pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Line", __pyx_f[1], 92, 0, __PYX_ERR(1, 92, __pyx_L1_error));

  /* "list.to_py":93
 * @cname("__pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Line")
 * cdef object __pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Line(const cpp_list[X]& v):
 *     o = []             # <<<<<<<<<<<<<<
 *     cdef cpp_list[X].const_iterator iter = v.begin()
 *     while iter != v.end():
 */
  __Pyx_TraceLine(93,0,__PYX_ERR(1, 93, __pyx_L1_error))
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "list.to_py":94
 * cdef object __pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Line(const cpp_list[X]& v):
 *     o = []
 *     cdef cpp_list[X].const_iterator iter = v.begin()             # <<<<<<<<<<<<<<
 *     while iter != v.end():
 *         o.append(cython.operator.dereference(iter))
 */
  __Pyx_TraceLine(94,0,__PYX_ERR(1, 94, __pyx_L1_error))
  __pyx_v_iter = __pyx_v_v.begin();

  /* "list.to_py":95
 *     o = []
 *     cdef cpp_list[X].const_iterator iter = v.begin()
 *     while iter != v.end():             # <<<<<<<<<<<<<<
 *         o.append(cython.operator.dereference(iter))
 *         cython.operator.preincrement(iter)
 */
  __Pyx_TraceLine(95,0,__PYX_ERR(1, 95, __pyx_L1_error))
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_v.end()) != 0);
    if (!__pyx_t_2) break;

    /* "list.to_py":96
 *     cdef cpp_list[X].const_iterator iter = v.begin()
 *     while iter != v.end():
 *         o.append(cython.operator.dereference(iter))             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __Pyx_TraceLine(96,0,__PYX_ERR(1, 96, __pyx_L1_error))
    __pyx_t_1 = __pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Point((*__pyx_v_iter)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_o, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 96, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "list.to_py":97
 *     while iter != v.end():
 *         o.append(cython.operator.dereference(iter))
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    __Pyx_TraceLine(97,0,__PYX_ERR(1, 97, __pyx_L1_error))
    (void)((++__pyx_v_iter));
  }

  /* "list.to_py":98
 *         o.append(cython.operator.dereference(iter))
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(98,0,__PYX_ERR(1, 98, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "list.to_py":92
 * 
 * @cname("__pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Line")
 * cdef object __pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Line(const cpp_list[X]& v):             # <<<<<<<<<<<<<<
 *     o = []
 *     cdef cpp_list[X].const_iterator iter = v.begin()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("list.to_py.__pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "FromPyStructUtility":11
 * 
 * @cname("__pyx_convert__from_py___pyx_t_7cartopy_5trace_Point")
 * cdef struct_type __pyx_convert__from_py___pyx_t_7cartopy_5trace_Point(obj) except *:             # <<<<<<<<<<<<<<
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 */

static __pyx_t_7cartopy_5trace_Point __pyx_convert__from_py___pyx_t_7cartopy_5trace_Point(PyObject *__pyx_v_obj) {
  __pyx_t_7cartopy_5trace_Point __pyx_v_result;
  PyObject *__pyx_v_value = NULL;
  __pyx_t_7cartopy_5trace_Point __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  double __pyx_t_10;
  __Pyx_RefNannySetupContext("__pyx_convert__from_py___pyx_t_7cartopy_5trace_Point", 0);
  __Pyx_TraceCall("__pyx_convert__from_py___pyx_t_7cartopy_5trace_Point", __pyx_f[1], 11, 0, __PYX_ERR(1, 11, __pyx_L1_error));

  /* "FromPyStructUtility":13
 * cdef struct_type __pyx_convert__from_py___pyx_t_7cartopy_5trace_Point(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 */
  __Pyx_TraceLine(13,0,__PYX_ERR(1, 13, __pyx_L1_error))
  __pyx_t_1 = ((!(PyMapping_Check(__pyx_v_obj) != 0)) != 0);
  if (__pyx_t_1) {

    /* "FromPyStructUtility":14
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
    __Pyx_TraceLine(14,0,__PYX_ERR(1, 14, __pyx_L1_error))
    __pyx_t_2 = PyErr_Format(__pyx_builtin_TypeError, ((char const *)"Expected %.16s, got %.200s"), ((char *)"a mapping"), Py_TYPE(__pyx_v_obj)->tp_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "FromPyStructUtility":13
 * cdef struct_type __pyx_convert__from_py___pyx_t_7cartopy_5trace_Point(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 */
  }

  /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['x']
 *     except KeyError:
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(1, 16, __pyx_L1_error))
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":17
 * 
 *     try:
 *         value = obj['x']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'x'")
 */
      __Pyx_TraceLine(17,0,__PYX_ERR(1, 17, __pyx_L4_error))
      __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 17, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_value = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['x']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "FromPyStructUtility":18
 *     try:
 *         value = obj['x']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'x'")
 *     result.x = value
 */
    __Pyx_TraceLine(18,0,__PYX_ERR(1, 18, __pyx_L6_except_error))
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py___pyx_t_7cartopy_5trace_Point", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(1, 18, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "FromPyStructUtility":19
 *         value = obj['x']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'x'")             # <<<<<<<<<<<<<<
 *     result.x = value
 *     try:
 */
      __Pyx_TraceLine(19,0,__PYX_ERR(1, 19, __pyx_L6_except_error))
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 19, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 19, __pyx_L6_except_error)
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;

    /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['x']
 *     except KeyError:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L9_try_end:;
  }

  /* "FromPyStructUtility":20
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'x'")
 *     result.x = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['y']
 */
  __Pyx_TraceLine(20,0,__PYX_ERR(1, 20, __pyx_L1_error))
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 20, __pyx_L1_error)
  __pyx_v_result.x = __pyx_t_10;

  /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'x'")
 *     result.x = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['y']
 *     except KeyError:
 */
  __Pyx_TraceLine(21,0,__PYX_ERR(1, 21, __pyx_L1_error))
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":22
 *     result.x = value
 *     try:
 *         value = obj['y']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'y'")
 */
      __Pyx_TraceLine(22,0,__PYX_ERR(1, 22, __pyx_L12_error))
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_y); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 22, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'x'")
 *     result.x = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['y']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L17_try_end;
    __pyx_L12_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "FromPyStructUtility":23
 *     try:
 *         value = obj['y']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'y'")
 *     result.y = value
 */
    __Pyx_TraceLine(23,0,__PYX_ERR(1, 23, __pyx_L14_except_error))
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py___pyx_t_7cartopy_5trace_Point", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_2) < 0) __PYX_ERR(1, 23, __pyx_L14_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_2);

      /* "FromPyStructUtility":24
 *         value = obj['y']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'y'")             # <<<<<<<<<<<<<<
 *     result.y = value
 *     return result
 */
      __Pyx_TraceLine(24,0,__PYX_ERR(1, 24, __pyx_L14_except_error))
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 24, __pyx_L14_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 24, __pyx_L14_except_error)
    }
    goto __pyx_L14_except_error;
    __pyx_L14_except_error:;

    /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'x'")
 *     result.x = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['y']
 *     except KeyError:
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L17_try_end:;
  }

  /* "FromPyStructUtility":25
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'y'")
 *     result.y = value             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __Pyx_TraceLine(25,0,__PYX_ERR(1, 25, __pyx_L1_error))
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 25, __pyx_L1_error)
  __pyx_v_result.y = __pyx_t_10;

  /* "FromPyStructUtility":26
 *         raise ValueError("No value specified for struct attribute 'y'")
 *     result.y = value
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(26,0,__PYX_ERR(1, 26, __pyx_L1_error))
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "FromPyStructUtility":11
 * 
 * @cname("__pyx_convert__from_py___pyx_t_7cartopy_5trace_Point")
 * cdef struct_type __pyx_convert__from_py___pyx_t_7cartopy_5trace_Point(obj) except *:             # <<<<<<<<<<<<<<
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py___pyx_t_7cartopy_5trace_Point", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "list.from_py":71
 * 
 * @cname("__pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Point")
 * cdef cpp_list[X] __pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Point(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef cpp_list[X] l
 *     for item in o:
 */

static std::list<__pyx_t_7cartopy_5trace_Point>  __pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Point(PyObject *__pyx_v_o) {
  std::list<__pyx_t_7cartopy_5trace_Point>  __pyx_v_l;
  PyObject *__pyx_v_item = NULL;
  std::list<__pyx_t_7cartopy_5trace_Point>  __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __pyx_t_7cartopy_5trace_Point __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Point", 0);
  __Pyx_TraceCall("__pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Point", __pyx_f[1], 71, 0, __PYX_ERR(1, 71, __pyx_L1_error));

  /* "list.from_py":73
 * cdef cpp_list[X] __pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Point(object o) except *:
 *     cdef cpp_list[X] l
 *     for item in o:             # <<<<<<<<<<<<<<
 *         l.push_back(<X>item)
 *     return l
 */
  __Pyx_TraceLine(73,0,__PYX_ERR(1, 73, __pyx_L1_error))
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 73, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 73, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 73, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 73, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 73, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 73, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "list.from_py":74
 *     cdef cpp_list[X] l
 *     for item in o:
 *         l.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return l
 * 
 */
    __Pyx_TraceLine(74,0,__PYX_ERR(1, 74, __pyx_L1_error))
    __pyx_t_5 = __pyx_convert__from_py___pyx_t_7cartopy_5trace_Point(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 74, __pyx_L1_error)
    __pyx_v_l.push_back(__pyx_t_5);

    /* "list.from_py":73
 * cdef cpp_list[X] __pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Point(object o) except *:
 *     cdef cpp_list[X] l
 *     for item in o:             # <<<<<<<<<<<<<<
 *         l.push_back(<X>item)
 *     return l
 */
    __Pyx_TraceLine(73,0,__PYX_ERR(1, 73, __pyx_L1_error))
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "list.from_py":75
 *     for item in o:
 *         l.push_back(<X>item)
 *     return l             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(75,0,__PYX_ERR(1, 75, __pyx_L1_error))
  __pyx_r = __pyx_v_l;
  goto __pyx_L0;

  /* "list.from_py":71
 * 
 * @cname("__pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Point")
 * cdef cpp_list[X] __pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Point(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef cpp_list[X] l
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("list.from_py.__pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Point", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::list<__pyx_t_7cartopy_5trace_Line>  __pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Line(PyObject *__pyx_v_o) {
  std::list<__pyx_t_7cartopy_5trace_Line>  __pyx_v_l;
  PyObject *__pyx_v_item = NULL;
  std::list<__pyx_t_7cartopy_5trace_Line>  __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __pyx_t_7cartopy_5trace_Line __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Line", 0);
  __Pyx_TraceCall("__pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Line", __pyx_f[1], 71, 0, __PYX_ERR(1, 71, __pyx_L1_error));

  /* "list.from_py":73
 * cdef cpp_list[X] __pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Line(object o) except *:
 *     cdef cpp_list[X] l
 *     for item in o:             # <<<<<<<<<<<<<<
 *         l.push_back(<X>item)
 *     return l
 */
  __Pyx_TraceLine(73,0,__PYX_ERR(1, 73, __pyx_L1_error))
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 73, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 73, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 73, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 73, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 73, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 73, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "list.from_py":74
 *     cdef cpp_list[X] l
 *     for item in o:
 *         l.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return l
 * 
 */
    __Pyx_TraceLine(74,0,__PYX_ERR(1, 74, __pyx_L1_error))
    __pyx_t_5 = __pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Point(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 74, __pyx_L1_error)
    __pyx_v_l.push_back(((__pyx_t_7cartopy_5trace_Line)__pyx_t_5));

    /* "list.from_py":73
 * cdef cpp_list[X] __pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Line(object o) except *:
 *     cdef cpp_list[X] l
 *     for item in o:             # <<<<<<<<<<<<<<
 *         l.push_back(<X>item)
 *     return l
 */
    __Pyx_TraceLine(73,0,__PYX_ERR(1, 73, __pyx_L1_error))
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "list.from_py":75
 *     for item in o:
 *         l.push_back(<X>item)
 *     return l             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(75,0,__PYX_ERR(1, 75, __pyx_L1_error))
  __pyx_r = __pyx_v_l;
  goto __pyx_L0;

  /* "list.from_py":71
 * 
 * @cname("__pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Line")
 * cdef cpp_list[X] __pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Line(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef cpp_list[X] l
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("list.from_py.__pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_7cartopy_5trace_LineAccumulator __pyx_vtable_7cartopy_5trace_LineAccumulator;

static PyObject *__pyx_tp_new_7cartopy_5trace_LineAccumulator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7cartopy_5trace_LineAccumulator *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7cartopy_5trace_LineAccumulator *)o);
  p->__pyx_vtab = __pyx_vtabptr_7cartopy_5trace_LineAccumulator;
  new((void*)&(p->lines)) std::list<__pyx_t_7cartopy_5trace_Line> ();
  return o;
}

static void __pyx_tp_dealloc_7cartopy_5trace_LineAccumulator(PyObject *o) {
  struct __pyx_obj_7cartopy_5trace_LineAccumulator *p = (struct __pyx_obj_7cartopy_5trace_LineAccumulator *)o;
  __Pyx_call_destructor(p->lines);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7cartopy_5trace_LineAccumulator[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7cartopy_5trace_15LineAccumulator_3__reduce_cython__, METH_NOARGS, __pyx_doc_7cartopy_5trace_15LineAccumulator_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7cartopy_5trace_15LineAccumulator_5__setstate_cython__, METH_O, __pyx_doc_7cartopy_5trace_15LineAccumulator_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7cartopy_5trace_LineAccumulator = {
  PyVarObject_HEAD_INIT(0, 0)
  "cartopy.trace.LineAccumulator", /*tp_name*/
  sizeof(struct __pyx_obj_7cartopy_5trace_LineAccumulator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cartopy_5trace_LineAccumulator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  "LineAccumulator()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cartopy_5trace_LineAccumulator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7cartopy_5trace_15LineAccumulator_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cartopy_5trace_LineAccumulator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_7cartopy_5trace_Interpolator __pyx_vtable_7cartopy_5trace_Interpolator;

static PyObject *__pyx_tp_new_7cartopy_5trace_Interpolator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7cartopy_5trace_Interpolator *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7cartopy_5trace_Interpolator *)o);
  p->__pyx_vtab = __pyx_vtabptr_7cartopy_5trace_Interpolator;
  if (unlikely(__pyx_pw_7cartopy_5trace_12Interpolator_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7cartopy_5trace_Interpolator(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7cartopy_5trace_Interpolator[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7cartopy_5trace_12Interpolator_3__reduce_cython__, METH_NOARGS, __pyx_doc_7cartopy_5trace_12Interpolator_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7cartopy_5trace_12Interpolator_5__setstate_cython__, METH_O, __pyx_doc_7cartopy_5trace_12Interpolator_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7cartopy_5trace_Interpolator = {
  PyVarObject_HEAD_INIT(0, 0)
  "cartopy.trace.Interpolator", /*tp_name*/
  sizeof(struct __pyx_obj_7cartopy_5trace_Interpolator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cartopy_5trace_Interpolator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cartopy_5trace_Interpolator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cartopy_5trace_Interpolator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_7cartopy_5trace_CartesianInterpolator __pyx_vtable_7cartopy_5trace_CartesianInterpolator;

static PyObject *__pyx_tp_new_7cartopy_5trace_CartesianInterpolator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7cartopy_5trace_CartesianInterpolator *p;
  PyObject *o = __pyx_tp_new_7cartopy_5trace_Interpolator(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7cartopy_5trace_CartesianInterpolator *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7cartopy_5trace_Interpolator*)__pyx_vtabptr_7cartopy_5trace_CartesianInterpolator;
  return o;
}

static PyMethodDef __pyx_methods_7cartopy_5trace_CartesianInterpolator[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7cartopy_5trace_21CartesianInterpolator_1__reduce_cython__, METH_NOARGS, __pyx_doc_7cartopy_5trace_21CartesianInterpolator___reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7cartopy_5trace_21CartesianInterpolator_3__setstate_cython__, METH_O, __pyx_doc_7cartopy_5trace_21CartesianInterpolator_2__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7cartopy_5trace_CartesianInterpolator = {
  PyVarObject_HEAD_INIT(0, 0)
  "cartopy.trace.CartesianInterpolator", /*tp_name*/
  sizeof(struct __pyx_obj_7cartopy_5trace_CartesianInterpolator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cartopy_5trace_Interpolator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cartopy_5trace_CartesianInterpolator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cartopy_5trace_CartesianInterpolator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_7cartopy_5trace_SphericalInterpolator __pyx_vtable_7cartopy_5trace_SphericalInterpolator;

static PyObject *__pyx_tp_new_7cartopy_5trace_SphericalInterpolator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7cartopy_5trace_SphericalInterpolator *p;
  PyObject *o = __pyx_tp_new_7cartopy_5trace_Interpolator(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7cartopy_5trace_SphericalInterpolator *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7cartopy_5trace_Interpolator*)__pyx_vtabptr_7cartopy_5trace_SphericalInterpolator;
  return o;
}

static PyMethodDef __pyx_methods_7cartopy_5trace_SphericalInterpolator[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7cartopy_5trace_21SphericalInterpolator_1__reduce_cython__, METH_NOARGS, __pyx_doc_7cartopy_5trace_21SphericalInterpolator___reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7cartopy_5trace_21SphericalInterpolator_3__setstate_cython__, METH_O, __pyx_doc_7cartopy_5trace_21SphericalInterpolator_2__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7cartopy_5trace_SphericalInterpolator = {
  PyVarObject_HEAD_INIT(0, 0)
  "cartopy.trace.SphericalInterpolator", /*tp_name*/
  sizeof(struct __pyx_obj_7cartopy_5trace_SphericalInterpolator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cartopy_5trace_Interpolator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cartopy_5trace_SphericalInterpolator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cartopy_5trace_SphericalInterpolator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_trace(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_trace},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "trace",
    __pyx_k_This_module_pulls_together_proj, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_Bisecting_from, __pyx_k_Bisecting_from, sizeof(__pyx_k_Bisecting_from), 0, 0, 1, 0},
  {&__pyx_n_s_CartesianInterpolator, __pyx_k_CartesianInterpolator, sizeof(__pyx_k_CartesianInterpolator), 0, 0, 1, 1},
  {&__pyx_n_s_CartesianInterpolator___reduce_c, __pyx_k_CartesianInterpolator___reduce_c, sizeof(__pyx_k_CartesianInterpolator___reduce_c), 0, 0, 1, 1},
  {&__pyx_n_s_CartesianInterpolator___setstate, __pyx_k_CartesianInterpolator___setstate, sizeof(__pyx_k_CartesianInterpolator___setstate), 0, 0, 1, 1},
  {&__pyx_n_s_IN, __pyx_k_IN, sizeof(__pyx_k_IN), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x98, __pyx_k_Incompatible_checksums_s_vs_0x98, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x98), 0, 0, 1, 0},
  {&__pyx_n_s_Interpolator, __pyx_k_Interpolator, sizeof(__pyx_k_Interpolator), 0, 0, 1, 1},
  {&__pyx_n_s_Interpolator___reduce_cython, __pyx_k_Interpolator___reduce_cython, sizeof(__pyx_k_Interpolator___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_Interpolator___setstate_cython, __pyx_k_Interpolator___setstate_cython, sizeof(__pyx_k_Interpolator___setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_s_LineAccumulator, __pyx_k_LineAccumulator, sizeof(__pyx_k_LineAccumulator), 0, 0, 1, 1},
  {&__pyx_n_s_LineAccumulator___reduce_cython, __pyx_k_LineAccumulator___reduce_cython, sizeof(__pyx_k_LineAccumulator___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_LineAccumulator___setstate_cytho, __pyx_k_LineAccumulator___setstate_cytho, sizeof(__pyx_k_LineAccumulator___setstate_cytho), 0, 0, 1, 1},
  {&__pyx_n_s_NAN, __pyx_k_NAN, sizeof(__pyx_k_NAN), 0, 0, 1, 1},
  {&__pyx_kp_s_No_value_specified_for_struct_at, __pyx_k_No_value_specified_for_struct_at, sizeof(__pyx_k_No_value_specified_for_struct_at), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_2, __pyx_k_No_value_specified_for_struct_at_2, sizeof(__pyx_k_No_value_specified_for_struct_at_2), 0, 0, 1, 0},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s_OUT, __pyx_k_OUT, sizeof(__pyx_k_OUT), 0, 0, 1, 1},
  {&__pyx_n_s_PROJ4_VERSION, __pyx_k_PROJ4_VERSION, sizeof(__pyx_k_PROJ4_VERSION), 0, 0, 1, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_kp_s_Projected_as, __pyx_k_Projected_as, sizeof(__pyx_k_Projected_as), 0, 0, 1, 0},
  {&__pyx_kp_s_Setting_line, __pyx_k_Setting_line, sizeof(__pyx_k_Setting_line), 0, 0, 1, 0},
  {&__pyx_n_s_SphericalInterpolator, __pyx_k_SphericalInterpolator, sizeof(__pyx_k_SphericalInterpolator), 0, 0, 1, 1},
  {&__pyx_n_s_SphericalInterpolator___reduce_c, __pyx_k_SphericalInterpolator___reduce_c, sizeof(__pyx_k_SphericalInterpolator___reduce_c), 0, 0, 1, 1},
  {&__pyx_n_s_SphericalInterpolator___setstate, __pyx_k_SphericalInterpolator___setstate, sizeof(__pyx_k_SphericalInterpolator___setstate), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 0, 1, 0},
  {&__pyx_kp_s__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 0, 1, 0},
  {&__pyx_kp_s__17, __pyx_k__17, sizeof(__pyx_k__17), 0, 0, 1, 0},
  {&__pyx_kp_s__18, __pyx_k__18, sizeof(__pyx_k__18), 0, 0, 1, 0},
  {&__pyx_kp_s__19, __pyx_k__19, sizeof(__pyx_k__19), 0, 0, 1, 0},
  {&__pyx_kp_s__20, __pyx_k__20, sizeof(__pyx_k__20), 0, 0, 1, 0},
  {&__pyx_kp_s__25, __pyx_k__25, sizeof(__pyx_k__25), 0, 0, 1, 0},
  {&__pyx_n_s__31, __pyx_k__31, sizeof(__pyx_k__31), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_cartopy__crs, __pyx_k_cartopy__crs, sizeof(__pyx_k_cartopy__crs), 0, 0, 1, 1},
  {&__pyx_n_s_cartopy_trace, __pyx_k_cartopy_trace, sizeof(__pyx_k_cartopy_trace), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_dest_projection, __pyx_k_dest_projection, sizeof(__pyx_k_dest_projection), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_dict_2, __pyx_k_dict_2, sizeof(__pyx_k_dict_2), 0, 0, 1, 1},
  {&__pyx_n_s_domain, __pyx_k_domain, sizeof(__pyx_k_domain), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_g_domain, __pyx_k_g_domain, sizeof(__pyx_k_g_domain), 0, 0, 1, 1},
  {&__pyx_n_s_g_linear, __pyx_k_g_linear, sizeof(__pyx_k_g_linear), 0, 0, 1, 1},
  {&__pyx_n_s_g_multi_line_string, __pyx_k_g_multi_line_string, sizeof(__pyx_k_g_multi_line_string), 0, 0, 1, 1},
  {&__pyx_n_s_geom, __pyx_k_geom, sizeof(__pyx_k_geom), 0, 0, 1, 1},
  {&__pyx_n_s_geom_factory, __pyx_k_geom_factory, sizeof(__pyx_k_geom_factory), 0, 0, 1, 1},
  {&__pyx_n_s_geometry, __pyx_k_geometry, sizeof(__pyx_k_geometry), 0, 0, 1, 1},
  {&__pyx_n_s_geos_handle, __pyx_k_geos_handle, sizeof(__pyx_k_geos_handle), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_gp_domain, __pyx_k_gp_domain, sizeof(__pyx_k_gp_domain), 0, 0, 1, 1},
  {&__pyx_n_s_handle, __pyx_k_handle, sizeof(__pyx_k_handle), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_interpolator, __pyx_k_interpolator, sizeof(__pyx_k_interpolator), 0, 0, 1, 1},
  {&__pyx_n_s_latlon, __pyx_k_latlon, sizeof(__pyx_k_latlon), 0, 0, 1, 1},
  {&__pyx_n_s_latlong, __pyx_k_latlong, sizeof(__pyx_k_latlong), 0, 0, 1, 1},
  {&__pyx_n_s_lgeos, __pyx_k_lgeos, sizeof(__pyx_k_lgeos), 0, 0, 1, 1},
  {&__pyx_kp_s_lib_cartopy_trace_pyx, __pyx_k_lib_cartopy_trace_pyx, sizeof(__pyx_k_lib_cartopy_trace_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_lines, __pyx_k_lines, sizeof(__pyx_k_lines), 0, 0, 1, 1},
  {&__pyx_n_s_longlat, __pyx_k_longlat, sizeof(__pyx_k_longlat), 0, 0, 1, 1},
  {&__pyx_n_s_lonlat, __pyx_k_lonlat, sizeof(__pyx_k_lonlat), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_multi_line_string, __pyx_k_multi_line_string, sizeof(__pyx_k_multi_line_string), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_o_proj, __pyx_k_o_proj, sizeof(__pyx_k_o_proj), 0, 0, 1, 1},
  {&__pyx_n_s_ob_tran, __pyx_k_ob_tran, sizeof(__pyx_k_ob_tran), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_kp_s_pj_transform_failed_d_s, __pyx_k_pj_transform_failed_d_s, sizeof(__pyx_k_pj_transform_failed_d_s), 0, 0, 1, 0},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_proj, __pyx_k_proj, sizeof(__pyx_k_proj), 0, 0, 1, 1},
  {&__pyx_n_s_proj4_params, __pyx_k_proj4_params, sizeof(__pyx_k_proj4_params), 0, 0, 1, 1},
  {&__pyx_n_s_project_linear, __pyx_k_project_linear, sizeof(__pyx_k_project_linear), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_LineAccumulator, __pyx_k_pyx_unpickle_LineAccumulator, sizeof(__pyx_k_pyx_unpickle_LineAccumulator), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_sgeom, __pyx_k_sgeom, sizeof(__pyx_k_sgeom), 0, 0, 1, 1},
  {&__pyx_n_s_shapely_geometry, __pyx_k_shapely_geometry, sizeof(__pyx_k_shapely_geometry), 0, 0, 1, 1},
  {&__pyx_n_s_shapely_geos, __pyx_k_shapely_geos, sizeof(__pyx_k_shapely_geos), 0, 0, 1, 1},
  {&__pyx_n_s_src_coords, __pyx_k_src_coords, sizeof(__pyx_k_src_coords), 0, 0, 1, 1},
  {&__pyx_n_s_src_crs, __pyx_k_src_crs, sizeof(__pyx_k_src_crs), 0, 0, 1, 1},
  {&__pyx_n_s_src_idx, __pyx_k_src_idx, sizeof(__pyx_k_src_idx), 0, 0, 1, 1},
  {&__pyx_n_s_src_size, __pyx_k_src_size, sizeof(__pyx_k_src_size), 0, 0, 1, 1},
  {&__pyx_n_s_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_kp_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 0},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_threshold, __pyx_k_threshold, sizeof(__pyx_k_threshold), 0, 0, 1, 1},
  {&__pyx_n_s_to, __pyx_k_to, sizeof(__pyx_k_to), 0, 0, 1, 1},
  {&__pyx_kp_s_to_2, __pyx_k_to_2, sizeof(__pyx_k_to_2), 0, 0, 1, 0},
  {&__pyx_n_s_to_meter, __pyx_k_to_meter, sizeof(__pyx_k_to_meter), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_use_setstate, __pyx_k_use_setstate, sizeof(__pyx_k_use_setstate), 0, 0, 1, 1},
  {&__pyx_kp_s_valid, __pyx_k_valid, sizeof(__pyx_k_valid), 0, 0, 1, 0},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 151, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 191, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 634, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(1, 18, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 19, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "cartopy/trace.pyx":615
 *         interpolator = CartesianInterpolator()
 *     interpolator.init(src_crs.proj4, (<CRS>dest_projection).proj4)
 *     if (6, 1, 1) <= PROJ4_VERSION < (6, 3, 0):             # <<<<<<<<<<<<<<
 *         # Workaround bug in Proj 6.1.1+ with +to_meter on +proj=ob_tran.
 *         # See https://github.com/OSGeo/proj#1782.
 */
  __pyx_tuple__22 = PyTuple_Pack(3, __pyx_int_6, __pyx_int_1, __pyx_int_1); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_tuple__23 = PyTuple_Pack(3, __pyx_int_6, __pyx_int_3, __pyx_int_0); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "cartopy/trace.pyx":618
 *         # Workaround bug in Proj 6.1.1+ with +to_meter on +proj=ob_tran.
 *         # See https://github.com/OSGeo/proj#1782.
 *         lonlat = ('latlon', 'latlong', 'lonlat', 'longlat')             # <<<<<<<<<<<<<<
 *         if (src_crs.proj4_params.get('proj', '') == 'ob_tran' and
 *                 src_crs.proj4_params.get('o_proj', '') in lonlat and
 */
  __pyx_tuple__24 = PyTuple_Pack(4, __pyx_n_s_latlon, __pyx_n_s_latlong, __pyx_n_s_lonlat, __pyx_n_s_longlat); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "cartopy/trace.pyx":619
 *         # See https://github.com/OSGeo/proj#1782.
 *         lonlat = ('latlon', 'latlong', 'lonlat', 'longlat')
 *         if (src_crs.proj4_params.get('proj', '') == 'ob_tran' and             # <<<<<<<<<<<<<<
 *                 src_crs.proj4_params.get('o_proj', '') in lonlat and
 *                 'to_meter' in src_crs.proj4_params):
 */
  __pyx_tuple__26 = PyTuple_Pack(2, __pyx_n_s_proj, __pyx_kp_s__25); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "cartopy/trace.pyx":620
 *         lonlat = ('latlon', 'latlong', 'lonlat', 'longlat')
 *         if (src_crs.proj4_params.get('proj', '') == 'ob_tran' and
 *                 src_crs.proj4_params.get('o_proj', '') in lonlat and             # <<<<<<<<<<<<<<
 *                 'to_meter' in src_crs.proj4_params):
 *             interpolator.src_scale = src_crs.proj4_params['to_meter']
 */
  __pyx_tuple__27 = PyTuple_Pack(2, __pyx_n_s_o_proj, __pyx_kp_s__25); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "FromPyStructUtility":19
 *         value = obj['x']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'x'")             # <<<<<<<<<<<<<<
 *     result.x = value
 *     try:
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(1, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "FromPyStructUtility":24
 *         value = obj['y']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'y'")             # <<<<<<<<<<<<<<
 *     result.y = value
 *     return result
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_2); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(1, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__32 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj_ = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj_)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_LineAccumulator, (type(self), 0x980da98, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_LineAccumulator__set_state(self, __pyx_state)
 */
  __pyx_tuple__33 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__35 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__37 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__39 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "cartopy/trace.pyx":575
 * 
 * 
 * def project_linear(geometry not None, CRS src_crs not None,             # <<<<<<<<<<<<<<
 *                    dest_projection not None):
 *     """
 */
  __pyx_tuple__40 = PyTuple_Pack(16, __pyx_n_s_geometry, __pyx_n_s_src_crs, __pyx_n_s_dest_projection, __pyx_n_s_threshold, __pyx_n_s_handle, __pyx_n_s_g_linear, __pyx_n_s_interpolator, __pyx_n_s_g_domain, __pyx_n_s_src_coords, __pyx_n_s_src_size, __pyx_n_s_src_idx, __pyx_n_s_gp_domain, __pyx_n_s_lines, __pyx_n_s_g_multi_line_string, __pyx_n_s_lonlat, __pyx_n_s_multi_line_string); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(3, 0, 16, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lib_cartopy_trace_pyx, __pyx_n_s_project_linear, 575, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(0, 575, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_LineAccumulator(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__41 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_LineAccumulator, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_159439512 = PyInt_FromLong(159439512L); if (unlikely(!__pyx_int_159439512)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_7cartopy_5trace_LineAccumulator = &__pyx_vtable_7cartopy_5trace_LineAccumulator;
  __pyx_vtable_7cartopy_5trace_LineAccumulator.new_line = (void (*)(struct __pyx_obj_7cartopy_5trace_LineAccumulator *))__pyx_f_7cartopy_5trace_15LineAccumulator_new_line;
  __pyx_vtable_7cartopy_5trace_LineAccumulator.add_point = (void (*)(struct __pyx_obj_7cartopy_5trace_LineAccumulator *, __pyx_t_7cartopy_5trace_Point const &))__pyx_f_7cartopy_5trace_15LineAccumulator_add_point;
  __pyx_vtable_7cartopy_5trace_LineAccumulator.add_point_if_empty = (void (*)(struct __pyx_obj_7cartopy_5trace_LineAccumulator *, __pyx_t_7cartopy_5trace_Point const &))__pyx_f_7cartopy_5trace_15LineAccumulator_add_point_if_empty;
  __pyx_vtable_7cartopy_5trace_LineAccumulator.as_geom = (GEOSGeometry *(*)(struct __pyx_obj_7cartopy_5trace_LineAccumulator *, GEOSContextHandle_t))__pyx_f_7cartopy_5trace_15LineAccumulator_as_geom;
  __pyx_vtable_7cartopy_5trace_LineAccumulator.size = (size_t (*)(struct __pyx_obj_7cartopy_5trace_LineAccumulator *))__pyx_f_7cartopy_5trace_15LineAccumulator_size;
  if (PyType_Ready(&__pyx_type_7cartopy_5trace_LineAccumulator) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7cartopy_5trace_LineAccumulator.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7cartopy_5trace_LineAccumulator.tp_dictoffset && __pyx_type_7cartopy_5trace_LineAccumulator.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7cartopy_5trace_LineAccumulator.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  if (__Pyx_SetVtable(__pyx_type_7cartopy_5trace_LineAccumulator.tp_dict, __pyx_vtabptr_7cartopy_5trace_LineAccumulator) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LineAccumulator, (PyObject *)&__pyx_type_7cartopy_5trace_LineAccumulator) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7cartopy_5trace_LineAccumulator) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  __pyx_ptype_7cartopy_5trace_LineAccumulator = &__pyx_type_7cartopy_5trace_LineAccumulator;
  __pyx_vtabptr_7cartopy_5trace_Interpolator = &__pyx_vtable_7cartopy_5trace_Interpolator;
  __pyx_vtable_7cartopy_5trace_Interpolator.init = (void (*)(struct __pyx_obj_7cartopy_5trace_Interpolator *, projPJ, projPJ))__pyx_f_7cartopy_5trace_12Interpolator_init;
  __pyx_vtable_7cartopy_5trace_Interpolator.set_line = (void (*)(struct __pyx_obj_7cartopy_5trace_Interpolator *, __pyx_t_7cartopy_5trace_Point const &, __pyx_t_7cartopy_5trace_Point const &))__pyx_f_7cartopy_5trace_12Interpolator_set_line;
  __pyx_vtable_7cartopy_5trace_Interpolator.interpolate = (__pyx_t_7cartopy_5trace_Point (*)(struct __pyx_obj_7cartopy_5trace_Interpolator *, double))__pyx_f_7cartopy_5trace_12Interpolator_interpolate;
  __pyx_vtable_7cartopy_5trace_Interpolator.project = (__pyx_t_7cartopy_5trace_Point (*)(struct __pyx_obj_7cartopy_5trace_Interpolator *, __pyx_t_7cartopy_5trace_Point const &))__pyx_f_7cartopy_5trace_12Interpolator_project;
  if (PyType_Ready(&__pyx_type_7cartopy_5trace_Interpolator) < 0) __PYX_ERR(0, 170, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7cartopy_5trace_Interpolator.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7cartopy_5trace_Interpolator.tp_dictoffset && __pyx_type_7cartopy_5trace_Interpolator.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7cartopy_5trace_Interpolator.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7cartopy_5trace_Interpolator.tp_dict, __pyx_vtabptr_7cartopy_5trace_Interpolator) < 0) __PYX_ERR(0, 170, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Interpolator, (PyObject *)&__pyx_type_7cartopy_5trace_Interpolator) < 0) __PYX_ERR(0, 170, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7cartopy_5trace_Interpolator) < 0) __PYX_ERR(0, 170, __pyx_L1_error)
  __pyx_ptype_7cartopy_5trace_Interpolator = &__pyx_type_7cartopy_5trace_Interpolator;
  __pyx_vtabptr_7cartopy_5trace_CartesianInterpolator = &__pyx_vtable_7cartopy_5trace_CartesianInterpolator;
  __pyx_vtable_7cartopy_5trace_CartesianInterpolator.__pyx_base = *__pyx_vtabptr_7cartopy_5trace_Interpolator;
  __pyx_vtable_7cartopy_5trace_CartesianInterpolator.__pyx_base.interpolate = (__pyx_t_7cartopy_5trace_Point (*)(struct __pyx_obj_7cartopy_5trace_Interpolator *, double))__pyx_f_7cartopy_5trace_21CartesianInterpolator_interpolate;
  __pyx_vtable_7cartopy_5trace_CartesianInterpolator.__pyx_base.project = (__pyx_t_7cartopy_5trace_Point (*)(struct __pyx_obj_7cartopy_5trace_Interpolator *, __pyx_t_7cartopy_5trace_Point const &))__pyx_f_7cartopy_5trace_21CartesianInterpolator_project;
  __pyx_type_7cartopy_5trace_CartesianInterpolator.tp_base = __pyx_ptype_7cartopy_5trace_Interpolator;
  if (PyType_Ready(&__pyx_type_7cartopy_5trace_CartesianInterpolator) < 0) __PYX_ERR(0, 197, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7cartopy_5trace_CartesianInterpolator.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7cartopy_5trace_CartesianInterpolator.tp_dictoffset && __pyx_type_7cartopy_5trace_CartesianInterpolator.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7cartopy_5trace_CartesianInterpolator.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7cartopy_5trace_CartesianInterpolator.tp_dict, __pyx_vtabptr_7cartopy_5trace_CartesianInterpolator) < 0) __PYX_ERR(0, 197, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CartesianInterpolator, (PyObject *)&__pyx_type_7cartopy_5trace_CartesianInterpolator) < 0) __PYX_ERR(0, 197, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7cartopy_5trace_CartesianInterpolator) < 0) __PYX_ERR(0, 197, __pyx_L1_error)
  __pyx_ptype_7cartopy_5trace_CartesianInterpolator = &__pyx_type_7cartopy_5trace_CartesianInterpolator;
  __pyx_vtabptr_7cartopy_5trace_SphericalInterpolator = &__pyx_vtable_7cartopy_5trace_SphericalInterpolator;
  __pyx_vtable_7cartopy_5trace_SphericalInterpolator.__pyx_base = *__pyx_vtabptr_7cartopy_5trace_Interpolator;
  __pyx_vtable_7cartopy_5trace_SphericalInterpolator.__pyx_base.init = (void (*)(struct __pyx_obj_7cartopy_5trace_Interpolator *, projPJ, projPJ))__pyx_f_7cartopy_5trace_21SphericalInterpolator_init;
  __pyx_vtable_7cartopy_5trace_SphericalInterpolator.__pyx_base.set_line = (void (*)(struct __pyx_obj_7cartopy_5trace_Interpolator *, __pyx_t_7cartopy_5trace_Point const &, __pyx_t_7cartopy_5trace_Point const &))__pyx_f_7cartopy_5trace_21SphericalInterpolator_set_line;
  __pyx_vtable_7cartopy_5trace_SphericalInterpolator.__pyx_base.interpolate = (__pyx_t_7cartopy_5trace_Point (*)(struct __pyx_obj_7cartopy_5trace_Interpolator *, double))__pyx_f_7cartopy_5trace_21SphericalInterpolator_interpolate;
  __pyx_vtable_7cartopy_5trace_SphericalInterpolator.__pyx_base.project = (__pyx_t_7cartopy_5trace_Point (*)(struct __pyx_obj_7cartopy_5trace_Interpolator *, __pyx_t_7cartopy_5trace_Point const &))__pyx_f_7cartopy_5trace_21SphericalInterpolator_project;
  __pyx_type_7cartopy_5trace_SphericalInterpolator.tp_base = __pyx_ptype_7cartopy_5trace_Interpolator;
  if (PyType_Ready(&__pyx_type_7cartopy_5trace_SphericalInterpolator) < 0) __PYX_ERR(0, 227, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7cartopy_5trace_SphericalInterpolator.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7cartopy_5trace_SphericalInterpolator.tp_dictoffset && __pyx_type_7cartopy_5trace_SphericalInterpolator.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7cartopy_5trace_SphericalInterpolator.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7cartopy_5trace_SphericalInterpolator.tp_dict, __pyx_vtabptr_7cartopy_5trace_SphericalInterpolator) < 0) __PYX_ERR(0, 227, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SphericalInterpolator, (PyObject *)&__pyx_type_7cartopy_5trace_SphericalInterpolator) < 0) __PYX_ERR(0, 227, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7cartopy_5trace_SphericalInterpolator) < 0) __PYX_ERR(0, 227, __pyx_L1_error)
  __pyx_ptype_7cartopy_5trace_SphericalInterpolator = &__pyx_type_7cartopy_5trace_SphericalInterpolator;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cartopy._crs"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cartopy_4_crs_CRS = __Pyx_ImportType(__pyx_t_1, "cartopy._crs", "CRS", sizeof(struct __pyx_obj_7cartopy_4_crs_CRS), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cartopy_4_crs_CRS) __PYX_ERR(2, 22, __pyx_L1_error)
  __pyx_vtabptr_7cartopy_4_crs_CRS = (struct __pyx_vtabstruct_7cartopy_4_crs_CRS*)__Pyx_GetVtable(__pyx_ptype_7cartopy_4_crs_CRS->tp_dict); if (unlikely(!__pyx_vtabptr_7cartopy_4_crs_CRS)) __PYX_ERR(2, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC inittrace(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC inittrace(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_trace(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_trace(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_trace(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'trace' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_trace(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("trace", __pyx_methods, __pyx_k_This_module_pulls_together_proj, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_cartopy__trace) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "cartopy.trace")) {
      if (unlikely(PyDict_SetItemString(modules, "cartopy.trace", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) goto __pyx_L1_error;
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) goto __pyx_L1_error;
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __Pyx_TraceCall("__Pyx_PyMODINIT_FUNC PyInit_trace(void)", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "cartopy/trace.pyx":35
 * from libcpp.vector cimport vector
 * 
 * cdef bool DEBUG = False             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "geos_c.h":
 */
  __Pyx_TraceLine(35,0,__PYX_ERR(0, 35, __pyx_L1_error))
  __pyx_v_7cartopy_5trace_DEBUG = 0;

  /* "cartopy/trace.pyx":62
 * 
 * from cartopy._crs cimport CRS
 * from cartopy._crs import PROJ4_VERSION             # <<<<<<<<<<<<<<
 * from ._proj4 cimport (projPJ, projLP, pj_get_spheroid_defn, pj_transform,
 *                       pj_strerrno, DEG_TO_RAD)
 */
  __Pyx_TraceLine(62,0,__PYX_ERR(0, 62, __pyx_L1_error))
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_PROJ4_VERSION);
  __Pyx_GIVEREF(__pyx_n_s_PROJ4_VERSION);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PROJ4_VERSION);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_cartopy__crs, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_PROJ4_VERSION); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PROJ4_VERSION, __pyx_t_1) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cartopy/trace.pyx":71
 * 
 * 
 * import shapely.geometry as sgeom             # <<<<<<<<<<<<<<
 * from shapely.geos import lgeos
 * 
 */
  __Pyx_TraceLine(71,0,__PYX_ERR(0, 71, __pyx_L1_error))
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s__31);
  __Pyx_GIVEREF(__pyx_n_s__31);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s__31);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_shapely_geometry, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sgeom, __pyx_t_1) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cartopy/trace.pyx":72
 * 
 * import shapely.geometry as sgeom
 * from shapely.geos import lgeos             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(72,0,__PYX_ERR(0, 72, __pyx_L1_error))
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_lgeos);
  __Pyx_GIVEREF(__pyx_n_s_lgeos);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_lgeos);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_shapely_geos, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_lgeos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_lgeos, __pyx_t_1) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cartopy/trace.pyx":75
 * 
 * 
 * cdef GEOSContextHandle_t get_geos_context_handle():             # <<<<<<<<<<<<<<
 *     cdef ptr handle = lgeos.geos_handle
 *     return <GEOSContextHandle_t>handle
 */
  __Pyx_TraceLine(75,0,__PYX_ERR(0, 75, __pyx_L1_error))


  /* "cartopy/trace.pyx":80
 * 
 * 
 * cdef GEOSGeometry *geos_from_shapely(shapely_geom) except *:             # <<<<<<<<<<<<<<
 *     """Get the GEOS pointer from the given shapely geometry."""
 *     cdef ptr geos_geom = shapely_geom._geom
 */
  __Pyx_TraceLine(80,0,__PYX_ERR(0, 80, __pyx_L1_error))


  /* "cartopy/trace.pyx":86
 * 
 * 
 * cdef shapely_from_geos(GEOSGeometry *geom):             # <<<<<<<<<<<<<<
 *     """Turn the given GEOS geometry pointer into a shapely geometry."""
 *     return sgeom.base.geom_factory(<ptr>geom)
 */
  __Pyx_TraceLine(86,0,__PYX_ERR(0, 86, __pyx_L1_error))


  /* "cartopy/trace.pyx":98
 * 
 * 
 * cdef bool degenerate_line(const Line &value):             # <<<<<<<<<<<<<<
 *     return value.size() < 2
 * 
 */
  __Pyx_TraceLine(98,0,__PYX_ERR(0, 98, __pyx_L1_error))


  /* "cartopy/trace.pyx":102
 * 
 * 
 * cdef bool close(double a, double b):             # <<<<<<<<<<<<<<
 *     return abs(a - b) <= (1e-8 + 1e-5 * abs(b))
 * 
 */
  __Pyx_TraceLine(102,0,__PYX_ERR(0, 102, __pyx_L1_error))


  /* "cartopy/trace.pyx":113
 *         self.new_line()
 * 
 *     cdef void new_line(self):             # <<<<<<<<<<<<<<
 *         cdef Line line
 *         self.lines.push_back(line)
 */
  __Pyx_TraceLine(113,0,__PYX_ERR(0, 113, __pyx_L1_error))


  /* "cartopy/trace.pyx":117
 *         self.lines.push_back(line)
 * 
 *     cdef void add_point(self, const Point &point):             # <<<<<<<<<<<<<<
 *         self.lines.back().push_back(point)
 * 
 */
  __Pyx_TraceLine(117,0,__PYX_ERR(0, 117, __pyx_L1_error))


  /* "cartopy/trace.pyx":120
 *         self.lines.back().push_back(point)
 * 
 *     cdef void add_point_if_empty(self, const Point &point):             # <<<<<<<<<<<<<<
 *         if self.lines.back().empty():
 *             self.add_point(point)
 */
  __Pyx_TraceLine(120,0,__PYX_ERR(0, 120, __pyx_L1_error))


  /* "cartopy/trace.pyx":124
 *             self.add_point(point)
 * 
 *     cdef GEOSGeometry *as_geom(self, GEOSContextHandle_t handle):             # <<<<<<<<<<<<<<
 *         from cython.operator cimport dereference, preincrement
 *         # self.lines.remove_if(degenerate_line) is not available in Cython.
 */
  __Pyx_TraceLine(124,0,__PYX_ERR(0, 124, __pyx_L1_error))


  /* "cartopy/trace.pyx":166
 *         return geom
 * 
 *     cdef size_t size(self):             # <<<<<<<<<<<<<<
 *         return self.lines.size()
 * 
 */
  __Pyx_TraceLine(166,0,__PYX_ERR(0, 166, __pyx_L1_error))


  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(1, 1, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cartopy_5trace_15LineAccumulator_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_LineAccumulator___reduce_cython, NULL, __pyx_n_s_cartopy_trace, __pyx_d, ((PyObject *)__pyx_codeobj_)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cartopy_5trace_LineAccumulator->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7cartopy_5trace_LineAccumulator);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_LineAccumulator, (type(self), 0x980da98, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_LineAccumulator__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(1, 16, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cartopy_5trace_15LineAccumulator_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_LineAccumulator___setstate_cytho, NULL, __pyx_n_s_cartopy_trace, __pyx_d, ((PyObject *)__pyx_codeobj__2)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cartopy_5trace_LineAccumulator->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7cartopy_5trace_LineAccumulator);

  /* "cartopy/trace.pyx":182
 *         self.dest_scale = 1
 * 
 *     cdef void init(self, projPJ src_proj, projPJ dest_proj):             # <<<<<<<<<<<<<<
 *         self.src_proj = src_proj
 *         self.dest_proj = dest_proj
 */
  __Pyx_TraceLine(182,0,__PYX_ERR(0, 182, __pyx_L1_error))


  /* "cartopy/trace.pyx":186
 *         self.dest_proj = dest_proj
 * 
 *     cdef void set_line(self, const Point &start, const Point &end):             # <<<<<<<<<<<<<<
 *         self.start = start
 *         self.end = end
 */
  __Pyx_TraceLine(186,0,__PYX_ERR(0, 186, __pyx_L1_error))


  /* "cartopy/trace.pyx":190
 *         self.end = end
 * 
 *     cdef Point interpolate(self, double t):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError
 * 
 */
  __Pyx_TraceLine(190,0,__PYX_ERR(0, 190, __pyx_L1_error))


  /* "cartopy/trace.pyx":193
 *         raise NotImplementedError
 * 
 *     cdef Point project(self, const Point &point):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError
 * 
 */
  __Pyx_TraceLine(193,0,__PYX_ERR(0, 193, __pyx_L1_error))


  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(1, 1, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cartopy_5trace_12Interpolator_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Interpolator___reduce_cython, NULL, __pyx_n_s_cartopy_trace, __pyx_d, ((PyObject *)__pyx_codeobj__3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(3,0,__PYX_ERR(1, 3, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cartopy_5trace_12Interpolator_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Interpolator___setstate_cython, NULL, __pyx_n_s_cartopy_trace, __pyx_d, ((PyObject *)__pyx_codeobj__5)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cartopy/trace.pyx":198
 * 
 * cdef class CartesianInterpolator(Interpolator):
 *     cdef Point interpolate(self, double t):             # <<<<<<<<<<<<<<
 *         cdef Point xy
 *         xy.x = self.start.x + (self.end.x - self.start.x) * t
 */
  __Pyx_TraceLine(198,0,__PYX_ERR(0, 198, __pyx_L1_error))


  /* "cartopy/trace.pyx":204
 *         return self.project(xy)
 * 
 *     cdef Point project(self, const Point &src_xy):             # <<<<<<<<<<<<<<
 *         cdef Point dest_xy
 *         cdef projLP xy
 */
  __Pyx_TraceLine(204,0,__PYX_ERR(0, 204, __pyx_L1_error))


  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(1, 1, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cartopy_5trace_21CartesianInterpolator_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_CartesianInterpolator___reduce_c, NULL, __pyx_n_s_cartopy_trace, __pyx_d, ((PyObject *)__pyx_codeobj__7)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(3,0,__PYX_ERR(1, 3, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cartopy_5trace_21CartesianInterpolator_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_CartesianInterpolator___setstate, NULL, __pyx_n_s_cartopy_trace, __pyx_d, ((PyObject *)__pyx_codeobj__9)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cartopy/trace.pyx":232
 *     cdef double a13
 * 
 *     cdef void init(self, projPJ src_proj, projPJ dest_proj):             # <<<<<<<<<<<<<<
 *         self.src_proj = src_proj
 *         self.dest_proj = dest_proj
 */
  __Pyx_TraceLine(232,0,__PYX_ERR(0, 232, __pyx_L1_error))


  /* "cartopy/trace.pyx":241
 *         geod_init(&self.geod, major_axis, 1 - sqrt(1 - eccentricity_squared))
 * 
 *     cdef void set_line(self, const Point &start, const Point &end):             # <<<<<<<<<<<<<<
 *         cdef double azi1
 *         self.a13 = geod_geninverse(&self.geod,
 */
  __Pyx_TraceLine(241,0,__PYX_ERR(0, 241, __pyx_L1_error))


  /* "cartopy/trace.pyx":249
 *                       GEOD_LATITUDE | GEOD_LONGITUDE);
 * 
 *     cdef Point interpolate(self, double t):             # <<<<<<<<<<<<<<
 *         cdef Point lonlat
 * 
 */
  __Pyx_TraceLine(249,0,__PYX_ERR(0, 249, __pyx_L1_error))


  /* "cartopy/trace.pyx":258
 *         return self.project(lonlat)
 * 
 *     cdef Point project(self, const Point &lonlat):             # <<<<<<<<<<<<<<
 *         cdef Point xy
 *         cdef projLP dest
 */
  __Pyx_TraceLine(258,0,__PYX_ERR(0, 258, __pyx_L1_error))


  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(1, 1, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cartopy_5trace_21SphericalInterpolator_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SphericalInterpolator___reduce_c, NULL, __pyx_n_s_cartopy_trace, __pyx_d, ((PyObject *)__pyx_codeobj__11)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(3,0,__PYX_ERR(1, 3, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cartopy_5trace_21SphericalInterpolator_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SphericalInterpolator___setstate, NULL, __pyx_n_s_cartopy_trace, __pyx_d, ((PyObject *)__pyx_codeobj__13)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cartopy/trace.pyx":287
 * 
 * 
 * cdef State get_state(const Point &point, const GEOSPreparedGeometry *gp_domain,             # <<<<<<<<<<<<<<
 *                      GEOSContextHandle_t handle):
 *     cdef State state
 */
  __Pyx_TraceLine(287,0,__PYX_ERR(0, 287, __pyx_L1_error))


  /* "cartopy/trace.pyx":309
 * 
 * @cython.cdivision(True)  # Want divide-by-zero to produce NaN.
 * cdef bool straightAndDomain(double t_start, const Point &p_start,             # <<<<<<<<<<<<<<
 *                             double t_end, const Point &p_end,
 *                             Interpolator interpolator, double threshold,
 */
  __Pyx_TraceLine(309,0,__PYX_ERR(0, 309, __pyx_L1_error))


  /* "cartopy/trace.pyx":437
 * 
 * 
 * cdef void bisect(double t_start, const Point &p_start, const Point &p_end,             # <<<<<<<<<<<<<<
 *                  GEOSContextHandle_t handle,
 *                  const GEOSPreparedGeometry *gp_domain, const State &state,
 */
  __Pyx_TraceLine(437,0,__PYX_ERR(0, 437, __pyx_L1_error))


  /* "cartopy/trace.pyx":491
 * 
 * 
 * cdef void _project_segment(GEOSContextHandle_t handle,             # <<<<<<<<<<<<<<
 *                            const GEOSCoordSequence *src_coords,
 *                            unsigned int src_idx_from, unsigned int src_idx_to,
 */
  __Pyx_TraceLine(491,0,__PYX_ERR(0, 491, __pyx_L1_error))


  /* "cartopy/trace.pyx":575
 * 
 * 
 * def project_linear(geometry not None, CRS src_crs not None,             # <<<<<<<<<<<<<<
 *                    dest_projection not None):
 *     """
 */
  __Pyx_TraceLine(575,0,__PYX_ERR(0, 575, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cartopy_5trace_1project_linear, 0, __pyx_n_s_project_linear, NULL, __pyx_n_s_cartopy_trace, __pyx_d, ((PyObject *)__pyx_codeobj__21)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_project_linear, __pyx_t_2) < 0) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_LineAccumulator(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(1, 1, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cartopy_5trace_3__pyx_unpickle_LineAccumulator, 0, __pyx_n_s_pyx_unpickle_LineAccumulator, NULL, __pyx_n_s_cartopy_trace, __pyx_d, ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_LineAccumulator, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_LineAccumulator__set_state(<LineAccumulator> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_LineAccumulator__set_state(LineAccumulator __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.lines = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(1, 11, __pyx_L1_error))


  /* "cartopy/trace.pyx":1
 * # (C) British Crown Copyright 2011 - 2019, Met Office             # <<<<<<<<<<<<<<
 * #
 * # This file is part of cartopy.
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(0, 1, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "list.to_py":92
 * 
 * @cname("__pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Point")
 * cdef object __pyx_convert_list_to_py___pyx_t_7cartopy_5trace_Point(const cpp_list[X]& v):             # <<<<<<<<<<<<<<
 *     o = []
 *     cdef cpp_list[X].const_iterator iter = v.begin()
 */
  __Pyx_TraceLine(92,0,__PYX_ERR(1, 92, __pyx_L1_error))


  /* "list.to_py":82
 * cimport cython
 * 
 * cdef extern from *:             # <<<<<<<<<<<<<<
 *     cdef cppclass cpp_list "std::list" [T]:
 *         cppclass const_iterator:
 */
  __Pyx_TraceLine(82,0,__PYX_ERR(1, 82, __pyx_L1_error))


  /* "FromPyStructUtility":11
 * 
 * @cname("__pyx_convert__from_py___pyx_t_7cartopy_5trace_Point")
 * cdef struct_type __pyx_convert__from_py___pyx_t_7cartopy_5trace_Point(obj) except *:             # <<<<<<<<<<<<<<
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(1, 11, __pyx_L1_error))


  /* "list.from_py":71
 * 
 * @cname("__pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Point")
 * cdef cpp_list[X] __pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Point(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef cpp_list[X] l
 *     for item in o:
 */
  __Pyx_TraceLine(71,0,__PYX_ERR(1, 71, __pyx_L1_error))


  /* "list.from_py":66
 * 
 * 
 * cdef extern from *:             # <<<<<<<<<<<<<<
 *     cdef cppclass cpp_list "std::list" [T]:
 *         void push_back(T&)
 */
  __Pyx_TraceLine(66,0,__PYX_ERR(1, 66, __pyx_L1_error))


  /* "list.from_py":71
 * 
 * @cname("__pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Line")
 * cdef cpp_list[X] __pyx_convert_list_from_py___pyx_t_7cartopy_5trace_Line(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef cpp_list[X] l
 *     for item in o:
 */
  __Pyx_TraceReturn(Py_None, 0);

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init cartopy.trace", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cartopy.trace");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* Profile */
#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   PyThreadState* tstate,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
      __Pyx_PyFrame_SetLineNumber(*frame, firstlineno);
    retval = 1;
    tstate->tracing++;
    tstate->use_tracing = 0;
    __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    tstate->use_tracing = (tstate->c_profilefunc ||
                           (CYTHON_TRACE && tstate->c_tracefunc));
    tstate->tracing--;
    if (retval) {
        __Pyx_ErrRestoreInState(tstate, type, value, traceback);
        return tstate->use_tracing && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyCodeObject *py_code = 0;
#if PY_MAJOR_VERSION >= 3
    py_code = PyCode_NewEmpty(srcfile, funcname, firstlineno);
    if (likely(py_code)) {
        py_code->co_flags |= CO_OPTIMIZED | CO_NEWLOCALS;
    }
#else
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    py_funcname = PyString_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    py_srcfile = PyString_FromString(srcfile);
    if (unlikely(!py_srcfile)) goto bad;
    py_code = PyCode_New(
        0,
        0,
        0,
        CO_OPTIMIZED | CO_NEWLOCALS,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
#endif
    return py_code;
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static PyObject* __pyx_convert__to_py___pyx_t_7cartopy_5trace_Point(__pyx_t_7cartopy_5trace_Point s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(2); if (unlikely(!res)) return NULL;
  member = PyFloat_FromDouble(s.x); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_x, member) < 0)) goto bad;
  Py_DECREF(member);
  member = PyFloat_FromDouble(s.y); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_y, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* Print */
#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) ((unsigned int) 0 - (unsigned int) 1), const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) ((unsigned int) 0 - (unsigned int) 1), const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* PrintOne */
#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
